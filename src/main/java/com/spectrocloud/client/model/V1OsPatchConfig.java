/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * V1OsPatchConfig
 */



public class V1OsPatchConfig {
  @SerializedName("onDemandPatchAfter")
  private OffsetDateTime onDemandPatchAfter = null;

  @SerializedName("patchOnBoot")
  private Boolean patchOnBoot = null;

  @SerializedName("rebootIfRequired")
  private Boolean rebootIfRequired = null;

  @SerializedName("schedule")
  private String schedule = null;

  public V1OsPatchConfig onDemandPatchAfter(OffsetDateTime onDemandPatchAfter) {
    this.onDemandPatchAfter = onDemandPatchAfter;
    return this;
  }

   /**
   * Get onDemandPatchAfter
   * @return onDemandPatchAfter
  **/
  @Schema(description = "")
  public OffsetDateTime getOnDemandPatchAfter() {
    return onDemandPatchAfter;
  }

  public void setOnDemandPatchAfter(OffsetDateTime onDemandPatchAfter) {
    this.onDemandPatchAfter = onDemandPatchAfter;
  }

  public V1OsPatchConfig patchOnBoot(Boolean patchOnBoot) {
    this.patchOnBoot = patchOnBoot;
    return this;
  }

   /**
   * PatchOnBoot indicates need to do patch when node first boot up, only once
   * @return patchOnBoot
  **/
  @Schema(description = "PatchOnBoot indicates need to do patch when node first boot up, only once")
  public Boolean isPatchOnBoot() {
    return patchOnBoot;
  }

  public void setPatchOnBoot(Boolean patchOnBoot) {
    this.patchOnBoot = patchOnBoot;
  }

  public V1OsPatchConfig rebootIfRequired(Boolean rebootIfRequired) {
    this.rebootIfRequired = rebootIfRequired;
    return this;
  }

   /**
   * Reboot once the OS patch is applied
   * @return rebootIfRequired
  **/
  @Schema(description = "Reboot once the OS patch is applied")
  public Boolean isRebootIfRequired() {
    return rebootIfRequired;
  }

  public void setRebootIfRequired(Boolean rebootIfRequired) {
    this.rebootIfRequired = rebootIfRequired;
  }

  public V1OsPatchConfig schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * The schedule at which security patches will be applied to OS. Schedule should be in Cron format, see https://en.wikipedia.org/wiki/Cron for more help.
   * @return schedule
  **/
  @Schema(description = "The schedule at which security patches will be applied to OS. Schedule should be in Cron format, see https://en.wikipedia.org/wiki/Cron for more help.")
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1OsPatchConfig v1OsPatchConfig = (V1OsPatchConfig) o;
    return Objects.equals(this.onDemandPatchAfter, v1OsPatchConfig.onDemandPatchAfter) &&
        Objects.equals(this.patchOnBoot, v1OsPatchConfig.patchOnBoot) &&
        Objects.equals(this.rebootIfRequired, v1OsPatchConfig.rebootIfRequired) &&
        Objects.equals(this.schedule, v1OsPatchConfig.schedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onDemandPatchAfter, patchOnBoot, rebootIfRequired, schedule);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1OsPatchConfig {\n");
    
    sb.append("    onDemandPatchAfter: ").append(toIndentedString(onDemandPatchAfter)).append("\n");
    sb.append("    patchOnBoot: ").append(toIndentedString(patchOnBoot)).append("\n");
    sb.append("    rebootIfRequired: ").append(toIndentedString(rebootIfRequired)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
