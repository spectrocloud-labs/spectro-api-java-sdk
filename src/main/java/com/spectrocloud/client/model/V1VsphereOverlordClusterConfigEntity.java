/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1ControlPlaneEndPoint;
import com.spectrocloud.client.model.V1VspherePlacementConfigEntity;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * V1VsphereOverlordClusterConfigEntity
 */



public class V1VsphereOverlordClusterConfigEntity {
  @SerializedName("controlPlaneEndpoint")
  private V1ControlPlaneEndPoint controlPlaneEndpoint = null;

  @SerializedName("ntpServers")
  private List<String> ntpServers = null;

  @SerializedName("placements")
  private List<V1VspherePlacementConfigEntity> placements = null;

  @SerializedName("sshKeys")
  private List<String> sshKeys = null;

  @SerializedName("staticIp")
  private Boolean staticIp = null;

  public V1VsphereOverlordClusterConfigEntity controlPlaneEndpoint(V1ControlPlaneEndPoint controlPlaneEndpoint) {
    this.controlPlaneEndpoint = controlPlaneEndpoint;
    return this;
  }

   /**
   * Get controlPlaneEndpoint
   * @return controlPlaneEndpoint
  **/
  @Schema(description = "")
  public V1ControlPlaneEndPoint getControlPlaneEndpoint() {
    return controlPlaneEndpoint;
  }

  public void setControlPlaneEndpoint(V1ControlPlaneEndPoint controlPlaneEndpoint) {
    this.controlPlaneEndpoint = controlPlaneEndpoint;
  }

  public V1VsphereOverlordClusterConfigEntity ntpServers(List<String> ntpServers) {
    this.ntpServers = ntpServers;
    return this;
  }

  public V1VsphereOverlordClusterConfigEntity addNtpServersItem(String ntpServersItem) {
    if (this.ntpServers == null) {
      this.ntpServers = new ArrayList<String>();
    }
    this.ntpServers.add(ntpServersItem);
    return this;
  }

   /**
   * NTPServers is a list of NTP servers to use instead of the machine image&#x27;s default NTP server list.
   * @return ntpServers
  **/
  @Schema(description = "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.")
  public List<String> getNtpServers() {
    return ntpServers;
  }

  public void setNtpServers(List<String> ntpServers) {
    this.ntpServers = ntpServers;
  }

  public V1VsphereOverlordClusterConfigEntity placements(List<V1VspherePlacementConfigEntity> placements) {
    this.placements = placements;
    return this;
  }

  public V1VsphereOverlordClusterConfigEntity addPlacementsItem(V1VspherePlacementConfigEntity placementsItem) {
    if (this.placements == null) {
      this.placements = new ArrayList<V1VspherePlacementConfigEntity>();
    }
    this.placements.add(placementsItem);
    return this;
  }

   /**
   * Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster
   * @return placements
  **/
  @Schema(description = "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster")
  public List<V1VspherePlacementConfigEntity> getPlacements() {
    return placements;
  }

  public void setPlacements(List<V1VspherePlacementConfigEntity> placements) {
    this.placements = placements;
  }

  public V1VsphereOverlordClusterConfigEntity sshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
    return this;
  }

  public V1VsphereOverlordClusterConfigEntity addSshKeysItem(String sshKeysItem) {
    if (this.sshKeys == null) {
      this.sshKeys = new ArrayList<String>();
    }
    this.sshKeys.add(sshKeysItem);
    return this;
  }

   /**
   * SSHKeys specifies a list of ssh authorized keys for the &#x27;spectro&#x27; user
   * @return sshKeys
  **/
  @Schema(description = "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user")
  public List<String> getSshKeys() {
    return sshKeys;
  }

  public void setSshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
  }

  public V1VsphereOverlordClusterConfigEntity staticIp(Boolean staticIp) {
    this.staticIp = staticIp;
    return this;
  }

   /**
   * whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name
   * @return staticIp
  **/
  @Schema(description = "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name")
  public Boolean isStaticIp() {
    return staticIp;
  }

  public void setStaticIp(Boolean staticIp) {
    this.staticIp = staticIp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VsphereOverlordClusterConfigEntity v1VsphereOverlordClusterConfigEntity = (V1VsphereOverlordClusterConfigEntity) o;
    return Objects.equals(this.controlPlaneEndpoint, v1VsphereOverlordClusterConfigEntity.controlPlaneEndpoint) &&
        Objects.equals(this.ntpServers, v1VsphereOverlordClusterConfigEntity.ntpServers) &&
        Objects.equals(this.placements, v1VsphereOverlordClusterConfigEntity.placements) &&
        Objects.equals(this.sshKeys, v1VsphereOverlordClusterConfigEntity.sshKeys) &&
        Objects.equals(this.staticIp, v1VsphereOverlordClusterConfigEntity.staticIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controlPlaneEndpoint, ntpServers, placements, sshKeys, staticIp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VsphereOverlordClusterConfigEntity {\n");
    
    sb.append("    controlPlaneEndpoint: ").append(toIndentedString(controlPlaneEndpoint)).append("\n");
    sb.append("    ntpServers: ").append(toIndentedString(ntpServers)).append("\n");
    sb.append("    placements: ").append(toIndentedString(placements)).append("\n");
    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");
    sb.append("    staticIp: ").append(toIndentedString(staticIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
