/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.api;

import com.spectrocloud.client.model.AccountValidateBody;
import com.spectrocloud.client.model.AccountValidateBody1;
import com.spectrocloud.client.model.AccountValidateBody2;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import com.spectrocloud.client.model.PasswordChangeBody;
import com.spectrocloud.client.model.PasswordChangeBody1;
import com.spectrocloud.client.model.PasswordResetBody;
import com.spectrocloud.client.model.PasswordResetBody1;
import com.spectrocloud.client.model.PasswordTokenActivateBody;
import com.spectrocloud.client.model.PasswordTokenResetBody;
import com.spectrocloud.client.model.V1AWSVolumeTypes;
import com.spectrocloud.client.model.V1AlertEntity;
import com.spectrocloud.client.model.V1APIEndpoint;
import com.spectrocloud.client.model.V1ApiKey;
import com.spectrocloud.client.model.V1ApiKeyActiveState;
import com.spectrocloud.client.model.V1ApiKeyEntity;
import com.spectrocloud.client.model.V1ApiKeyUpdate;
import com.spectrocloud.client.model.V1ApiKeys;
import com.spectrocloud.client.model.V1AppDeployment;
import com.spectrocloud.client.model.V1AppDeploymentClusterGroupEntity;
import com.spectrocloud.client.model.V1AppDeploymentProfileEntity;
import com.spectrocloud.client.model.V1AppDeploymentProfileSpec;
import com.spectrocloud.client.model.V1AppDeploymentProfileVersions;
import com.spectrocloud.client.model.V1AppDeploymentVirtualClusterEntity;
import com.spectrocloud.client.model.V1AppDeploymentsFilterSpec;
import com.spectrocloud.client.model.V1AppDeploymentsSummary;
import com.spectrocloud.client.model.V1AppProfile;
import com.spectrocloud.client.model.V1AppProfileCloneEntity;
import com.spectrocloud.client.model.V1AppProfileCloneMetaInputEntity;
import com.spectrocloud.client.model.V1AppProfileEntity;
import com.spectrocloud.client.model.V1AppProfileMetaEntity;
import com.spectrocloud.client.model.V1AppProfileTiers;
import com.spectrocloud.client.model.V1AppProfilesFilterSpec;
import com.spectrocloud.client.model.V1AppProfilesMetadata;
import com.spectrocloud.client.model.V1AppProfilesSummary;
import com.spectrocloud.client.model.V1AppTier;
import com.spectrocloud.client.model.V1AppTierEntity;
import com.spectrocloud.client.model.V1AppTierManifests;
import com.spectrocloud.client.model.V1AppTierPatchEntity;
import com.spectrocloud.client.model.V1AppTierResolvedValues;
import com.spectrocloud.client.model.V1AppTierUpdateEntity;
import com.spectrocloud.client.model.V1AsyncOperationIdEntity;
import com.spectrocloud.client.model.V1Audit;
import com.spectrocloud.client.model.V1AuditMsgUpdate;
import com.spectrocloud.client.model.V1AuditSysMsg;
import com.spectrocloud.client.model.V1Audits;
import com.spectrocloud.client.model.V1AuthLogin;
import com.spectrocloud.client.model.V1AwsAccount;
import com.spectrocloud.client.model.V1AwsAccountSts;
import com.spectrocloud.client.model.V1AwsAccounts;
import com.spectrocloud.client.model.V1AwsAvailabilityZones;
import com.spectrocloud.client.model.V1AwsCloudAccount;
import com.spectrocloud.client.model.V1AwsCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1AwsCloudConfig;
import com.spectrocloud.client.model.V1AwsCloudCostSpec;
import com.spectrocloud.client.model.V1AwsCloudCostSummary;
import com.spectrocloud.client.model.V1AwsCreditAccountEntity;
import com.spectrocloud.client.model.V1AwsFindImageRequest;
import com.spectrocloud.client.model.V1AwsImage;
import com.spectrocloud.client.model.V1AwsInstanceTypes;
import com.spectrocloud.client.model.V1AwsKeyPairs;
import com.spectrocloud.client.model.V1AwsKmsKeys;
import com.spectrocloud.client.model.V1AwsMachine;
import com.spectrocloud.client.model.V1AwsMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1AwsMachines;
import com.spectrocloud.client.model.V1AwsPolicies;
import com.spectrocloud.client.model.V1AwsPolicyArnsSpec;
import com.spectrocloud.client.model.V1AwsRegions;
import com.spectrocloud.client.model.V1AwsS3BucketCredentials;
import com.spectrocloud.client.model.V1AwsStorageTypes;
import com.spectrocloud.client.model.V1AwsVolumeSize;
import com.spectrocloud.client.model.V1AwsVpcs;
import com.spectrocloud.client.model.V1AzureAccount;
import com.spectrocloud.client.model.V1AzureAccounts;
import com.spectrocloud.client.model.V1AzureCloudAccount;
import com.spectrocloud.client.model.V1AzureCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1AzureCloudConfig;
import com.spectrocloud.client.model.V1AzureGroups;
import com.spectrocloud.client.model.V1AzureInstanceTypes;
import com.spectrocloud.client.model.V1AzureMachine;
import com.spectrocloud.client.model.V1AzureMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1AzureMachines;
import com.spectrocloud.client.model.V1AzurePrivateDnsZones;
import com.spectrocloud.client.model.V1AzureRegions;
import com.spectrocloud.client.model.V1AzureResourceGroupList;
import com.spectrocloud.client.model.V1AzureStorageAccountEntity;
import com.spectrocloud.client.model.V1AzureStorageAccounts;
import com.spectrocloud.client.model.V1AzureStorageContainers;
import com.spectrocloud.client.model.V1AzureStorageTypes;
import com.spectrocloud.client.model.V1AzureSubscriptionList;
import com.spectrocloud.client.model.V1AzureVhdUrlEntity;
import com.spectrocloud.client.model.V1AzureVirtualNetworkList;
import com.spectrocloud.client.model.V1AzureZoneEntity;
import com.spectrocloud.client.model.V1BasicOciRegistry;
import com.spectrocloud.client.model.V1BulkDeleteRequest;
import com.spectrocloud.client.model.V1BulkDeleteResponse;
import com.spectrocloud.client.model.V1Channel;
import com.spectrocloud.client.model.V1CloudAccountsMetadata;
import com.spectrocloud.client.model.V1CloudAccountsSummary;
import com.spectrocloud.client.model.V1CloudCost;
import com.spectrocloud.client.model.V1CloudSpotPrice;
import com.spectrocloud.client.model.V1CloudWatchConfig;
import com.spectrocloud.client.model.V1ClusterBackup;
import com.spectrocloud.client.model.V1ClusterBackupConfig;
import com.spectrocloud.client.model.V1ClusterBackupLocationType;
import com.spectrocloud.client.model.V1ClusterComplianceOnDemandConfig;
import com.spectrocloud.client.model.V1ClusterComplianceScan;
import com.spectrocloud.client.model.V1ClusterComplianceScanLogs;
import com.spectrocloud.client.model.V1ClusterComplianceScheduleConfig;
import com.spectrocloud.client.model.V1ClusterCondition;
import com.spectrocloud.client.model.V1ClusterEdgeInstallerConfig;
import com.spectrocloud.client.model.V1ClusterGroup;
import com.spectrocloud.client.model.V1ClusterGroupEntity;
import com.spectrocloud.client.model.V1ClusterGroupHostClusterEntity;
import com.spectrocloud.client.model.V1ClusterGroupsDeveloperCreditUsage;
import com.spectrocloud.client.model.V1ClusterGroupsHostClusterMetadata;
import com.spectrocloud.client.model.V1ClusterGroupsHostClusterSummary;
import com.spectrocloud.client.model.V1ClusterHelmCharts;
import com.spectrocloud.client.model.V1ClusterLogFetcher;
import com.spectrocloud.client.model.V1ClusterLogFetcherRequest;
import com.spectrocloud.client.model.V1ClusterManifests;
import com.spectrocloud.client.model.V1ClusterNamespaceResource;
import com.spectrocloud.client.model.V1ClusterNamespaceResourceInputEntity;
import com.spectrocloud.client.model.V1ClusterNamespaceResources;
import com.spectrocloud.client.model.V1ClusterNamespaceResourcesUpdateEntity;
import com.spectrocloud.client.model.V1ClusterNamespaces;
import com.spectrocloud.client.model.V1ClusterNotificationUpdateEntity;
import com.spectrocloud.client.model.V1ClusterProfileCloneEntity;
import com.spectrocloud.client.model.V1ClusterProfileCloneMetaInputEntity;
import com.spectrocloud.client.model.V1ClusterProfileEntity;
import com.spectrocloud.client.model.V1ClusterProfileImportEntity;
import com.spectrocloud.client.model.V1ClusterProfileNotificationUpdateEntity;
import com.spectrocloud.client.model.V1ClusterProfilePackConfigList;
import com.spectrocloud.client.model.V1ClusterProfilePacksEntities;
import com.spectrocloud.client.model.V1ClusterProfilePacksManifests;
import com.spectrocloud.client.model.V1ClusterProfileSummary;
import com.spectrocloud.client.model.V1ClusterProfileTemplateDraft;
import com.spectrocloud.client.model.V1ClusterProfileValidatorResponse;
import com.spectrocloud.client.model.V1ClusterProfilesFilterSpec;
import com.spectrocloud.client.model.V1ClusterProfilesMetadata;
import com.spectrocloud.client.model.V1ClusterProfilesSummary;
import com.spectrocloud.client.model.V1ClusterRbac;
import com.spectrocloud.client.model.V1ClusterRbacEntity;
import com.spectrocloud.client.model.V1ClusterRbacInputEntity;
import com.spectrocloud.client.model.V1ClusterRbacResourcesUpdateEntity;
import com.spectrocloud.client.model.V1ClusterRbacs;
import com.spectrocloud.client.model.V1ClusterRefs;
import com.spectrocloud.client.model.V1ClusterRestore;
import com.spectrocloud.client.model.V1ClusterRestoreConfig;
import com.spectrocloud.client.model.V1ClusterScanLogKubeBench;
import com.spectrocloud.client.model.V1ClusterScanLogKubeHunter;
import com.spectrocloud.client.model.V1ClusterScanLogSonobuoy;
import com.spectrocloud.client.model.V1ClusterScanLogSyft;
import com.spectrocloud.client.model.V1ClusterSearchInputSpec;
import com.spectrocloud.client.model.V1ClusterUpgradeSettingsEntity;
import com.spectrocloud.client.model.V1ClusterVirtualMachine;
import com.spectrocloud.client.model.V1ClusterVirtualMachineList;
import com.spectrocloud.client.model.V1ClusterWorkload;
import com.spectrocloud.client.model.V1ClusterWorkloadCronJobs;
import com.spectrocloud.client.model.V1ClusterWorkloadDaemonSets;
import com.spectrocloud.client.model.V1ClusterWorkloadDeployments;
import com.spectrocloud.client.model.V1ClusterWorkloadJobs;
import com.spectrocloud.client.model.V1ClusterWorkloadNamespaces;
import com.spectrocloud.client.model.V1ClusterWorkloadPods;
import com.spectrocloud.client.model.V1ClusterWorkloadRoleBindings;
import com.spectrocloud.client.model.V1ClusterWorkloadStatefulSets;
import com.spectrocloud.client.model.V1ClusterWorkloadsSpec;
import com.spectrocloud.client.model.V1CoxEdgeAccount;
import com.spectrocloud.client.model.V1CoxEdgeAccounts;
import com.spectrocloud.client.model.V1CoxEdgeBaseUrls;
import com.spectrocloud.client.model.V1CoxEdgeCloudAccount;
import com.spectrocloud.client.model.V1CoxEdgeCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1CoxEdgeCloudConfig;
import com.spectrocloud.client.model.V1CoxEdgeCredentials;
import com.spectrocloud.client.model.V1CoxEdgeEnvironments;
import com.spectrocloud.client.model.V1CoxEdgeEnvironmentsRequest;
import com.spectrocloud.client.model.V1CoxEdgeInstanceTypes;
import com.spectrocloud.client.model.V1CoxEdgeMachine;
import com.spectrocloud.client.model.V1CoxEdgeMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1CoxEdgeMachines;
import com.spectrocloud.client.model.V1CoxEdgeOrganizations;
import com.spectrocloud.client.model.V1CoxEdgeRegions;
import com.spectrocloud.client.model.V1CoxEdgeServices;
import com.spectrocloud.client.model.V1DashboardWorkspaces;
import com.spectrocloud.client.model.V1DataSinkCloudWatchConfig;
import com.spectrocloud.client.model.V1DataSinkConfig;
import com.spectrocloud.client.model.V1DeleteMeta;
import com.spectrocloud.client.model.V1DeletedMsg;
import com.spectrocloud.client.model.V1DeveloperCredit;
import com.spectrocloud.client.model.V1EcrRegistry;
import com.spectrocloud.client.model.V1EdgeCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1EdgeCloudConfig;
import com.spectrocloud.client.model.V1EdgeHostClusterEntity;
import com.spectrocloud.client.model.V1EdgeHostDevice;
import com.spectrocloud.client.model.V1EdgeHostDeviceEntity;
import com.spectrocloud.client.model.V1EdgeHostDeviceHostCheckSum;
import com.spectrocloud.client.model.V1EdgeHostDeviceHostPairingKey;
import com.spectrocloud.client.model.V1EdgeHostDeviceMetaUpdateEntity;
import com.spectrocloud.client.model.V1EdgeHostDevices;
import com.spectrocloud.client.model.V1EdgeHostHealth;
import com.spectrocloud.client.model.V1EdgeHostVsphereCloudProperties;
import com.spectrocloud.client.model.V1EdgeHostsMeta;
import com.spectrocloud.client.model.V1EdgeHostsMetadataFilter;
import com.spectrocloud.client.model.V1EdgeHostsMetadataSummary;
import com.spectrocloud.client.model.V1EdgeHostsSearchSummary;
import com.spectrocloud.client.model.V1EdgeMachine;
import com.spectrocloud.client.model.V1EdgeMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1EdgeMachines;
import com.spectrocloud.client.model.V1EdgeNativeCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1EdgeNativeCloudConfig;
import com.spectrocloud.client.model.V1EdgeNativeMachine;
import com.spectrocloud.client.model.V1EdgeNativeMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1EdgeNativeMachines;
import com.spectrocloud.client.model.V1EdgeToken;
import com.spectrocloud.client.model.V1EdgeTokenActiveState;
import com.spectrocloud.client.model.V1EdgeTokenEntity;
import com.spectrocloud.client.model.V1EdgeTokenUpdate;
import com.spectrocloud.client.model.V1EdgeTokens;
import com.spectrocloud.client.model.V1EksCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1EksCloudConfig;
import com.spectrocloud.client.model.V1EksFargateProfiles;
import com.spectrocloud.client.model.V1EksMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1Event;
import com.spectrocloud.client.model.V1Events;
import com.spectrocloud.client.model.V1FiltersMetadata;
import com.spectrocloud.client.model.V1FiltersSummary;
import com.spectrocloud.client.model.V1FipsConfig;
import com.spectrocloud.client.model.V1GcpAccount;
import com.spectrocloud.client.model.V1GcpAccountEntity;
import com.spectrocloud.client.model.V1GcpAccountNameValidateSpec;
import com.spectrocloud.client.model.V1GcpAccounts;
import com.spectrocloud.client.model.V1GcpCloudAccountValidateEntity;
import com.spectrocloud.client.model.V1GcpCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1GcpCloudConfig;
import com.spectrocloud.client.model.V1GcpImageUrlEntity;
import com.spectrocloud.client.model.V1GcpInstanceTypes;
import com.spectrocloud.client.model.V1GcpMachine;
import com.spectrocloud.client.model.V1GcpMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1GcpMachines;
import com.spectrocloud.client.model.V1GcpNetworks;
import com.spectrocloud.client.model.V1GcpProjects;
import com.spectrocloud.client.model.V1GcpRegions;
import com.spectrocloud.client.model.V1GcpStorageTypes;
import com.spectrocloud.client.model.V1GcpZones;
import com.spectrocloud.client.model.V1GenericCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1GenericCloudConfig;
import com.spectrocloud.client.model.V1GenericMachine;
import com.spectrocloud.client.model.V1GenericMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1GenericMachines;
import com.spectrocloud.client.model.V1GeolocationLatlong;
import com.spectrocloud.client.model.V1HelmRegistries;
import com.spectrocloud.client.model.V1HelmRegistriesSummary;
import com.spectrocloud.client.model.V1HelmRegistry;
import com.spectrocloud.client.model.V1HelmRegistryEntity;
import com.spectrocloud.client.model.V1HelmRegistrySpec;
import com.spectrocloud.client.model.V1HostClusterConfigEntity;
import com.spectrocloud.client.model.V1HttpPatch;
import com.spectrocloud.client.model.V1IdentityProviders;
import com.spectrocloud.client.model.V1Invoice;
import com.spectrocloud.client.model.V1IpPoolInputEntity;
import com.spectrocloud.client.model.V1IpPools;
import com.spectrocloud.client.model.V1KubeBenchEntity;
import com.spectrocloud.client.model.V1KubeHunterEntity;
import com.spectrocloud.client.model.V1LibvirtCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1LibvirtCloudConfig;
import com.spectrocloud.client.model.V1LibvirtMachine;
import com.spectrocloud.client.model.V1LibvirtMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1LibvirtMachines;
import com.spectrocloud.client.model.V1LifecycleConfigEntity;
import com.spectrocloud.client.model.V1LoadBalancerService;
import com.spectrocloud.client.model.V1LoginResponse;
import com.spectrocloud.client.model.V1MaasAccount;
import com.spectrocloud.client.model.V1MaasAccounts;
import com.spectrocloud.client.model.V1MaasCloudAccount;
import com.spectrocloud.client.model.V1MaasCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1MaasCloudConfig;
import com.spectrocloud.client.model.V1MaasDomains;
import com.spectrocloud.client.model.V1MaasMachine;
import com.spectrocloud.client.model.V1MaasMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1MaasMachines;
import com.spectrocloud.client.model.V1MaasPools;
import com.spectrocloud.client.model.V1MaasSubnets;
import com.spectrocloud.client.model.V1MaasZones;
import com.spectrocloud.client.model.V1MachineCertificates;
import com.spectrocloud.client.model.V1MachinePoolsMachineUids;
import com.spectrocloud.client.model.V1Macros;
import com.spectrocloud.client.model.V1Manifest;
import com.spectrocloud.client.model.V1ManifestEntities;
import com.spectrocloud.client.model.V1ManifestEntity;
import com.spectrocloud.client.model.V1ManifestInputEntity;
import com.spectrocloud.client.model.V1ManifestRefInputEntities;
import com.spectrocloud.client.model.V1ManifestRefUpdateEntity;
import com.spectrocloud.client.model.V1MetricTimeSeries;
import com.spectrocloud.client.model.V1MetricTimeSeriesList;
import com.spectrocloud.client.model.V1NodesAutoRemediationSettings;
import com.spectrocloud.client.model.V1NotificationEvent;
import com.spectrocloud.client.model.V1Notifications;
import com.spectrocloud.client.model.V1ObjectMeta;
import com.spectrocloud.client.model.V1ObjectMetaInputEntitySchema;
import com.spectrocloud.client.model.V1OciRegistries;
import com.spectrocloud.client.model.V1OciRegistryEntity;
import com.spectrocloud.client.model.V1OpenStackAccount;
import com.spectrocloud.client.model.V1OpenStackAccounts;
import com.spectrocloud.client.model.V1OpenStackAzs;
import com.spectrocloud.client.model.V1OpenStackCloudAccount;
import com.spectrocloud.client.model.V1OpenStackCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1OpenStackCloudConfig;
import com.spectrocloud.client.model.V1OpenStackFlavors;
import com.spectrocloud.client.model.V1OpenStackKeypairs;
import com.spectrocloud.client.model.V1OpenStackMachine;
import com.spectrocloud.client.model.V1OpenStackMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1OpenStackMachines;
import com.spectrocloud.client.model.V1OpenStackNetworks;
import com.spectrocloud.client.model.V1OpenStackProjects;
import com.spectrocloud.client.model.V1OpenStackRegions;
import com.spectrocloud.client.model.V1Organizations;
import com.spectrocloud.client.model.V1OsPatchEntity;
import com.spectrocloud.client.model.V1OverloadVsphereOva;
import com.spectrocloud.client.model.V1Overlord;
import com.spectrocloud.client.model.V1OverlordMaasAccountCreate;
import com.spectrocloud.client.model.V1OverlordMaasAccountEntity;
import com.spectrocloud.client.model.V1OverlordMaasCloudConfig;
import com.spectrocloud.client.model.V1OverlordManifest;
import com.spectrocloud.client.model.V1OverlordMigrateEntity;
import com.spectrocloud.client.model.V1OverlordOpenStackAccountCreate;
import com.spectrocloud.client.model.V1OverlordOpenStackAccountEntity;
import com.spectrocloud.client.model.V1OverlordOpenStackCloudConfig;
import com.spectrocloud.client.model.V1OverlordVsphereAccountCreate;
import com.spectrocloud.client.model.V1OverlordVsphereAccountEntity;
import com.spectrocloud.client.model.V1OverlordVsphereCloudConfig;
import com.spectrocloud.client.model.V1Overlords;
import com.spectrocloud.client.model.V1PackInputEntity;
import com.spectrocloud.client.model.V1PackManifests;
import com.spectrocloud.client.model.V1PackMetadataList;
import com.spectrocloud.client.model.V1PackParamsEntity;
import com.spectrocloud.client.model.V1PackRefSummaryResponse;
import com.spectrocloud.client.model.V1PackRegistries;
import com.spectrocloud.client.model.V1PackRegistriesSummary;
import com.spectrocloud.client.model.V1PackRegistry;
import com.spectrocloud.client.model.V1PackRegistrySpec;
import com.spectrocloud.client.model.V1PackResolvedValues;
import com.spectrocloud.client.model.V1PackSummaries;
import com.spectrocloud.client.model.V1PackTagEntity;
import com.spectrocloud.client.model.V1PackUpdateEntity;
import com.spectrocloud.client.model.V1PacksFilterSpec;
import com.spectrocloud.client.model.V1PairingCode;
import com.spectrocloud.client.model.V1PcgSelfHostedParams;
import com.spectrocloud.client.model.V1PcgServiceKubectlCommands;
import com.spectrocloud.client.model.V1PcgsSummary;
import com.spectrocloud.client.model.V1Permissions;
import com.spectrocloud.client.model.V1ProfileMetaEntity;
import com.spectrocloud.client.model.V1Project;
import com.spectrocloud.client.model.V1ProjectActiveResources;
import com.spectrocloud.client.model.V1ProjectAlertComponents;
import com.spectrocloud.client.model.V1ProjectCleanup;
import com.spectrocloud.client.model.V1ProjectClusterSettings;
import com.spectrocloud.client.model.V1ProjectEntity;
import com.spectrocloud.client.model.V1ProjectRolesEntity;
import com.spectrocloud.client.model.V1ProjectRolesPatch;
import com.spectrocloud.client.model.V1ProjectTeamsEntity;
import com.spectrocloud.client.model.V1ProjectUsersEntity;
import com.spectrocloud.client.model.V1ProjectsFilterSpec;
import com.spectrocloud.client.model.V1ProjectsMetadata;
import com.spectrocloud.client.model.V1ProjectsSummary;
import com.spectrocloud.client.model.V1RateConfig;
import com.spectrocloud.client.model.V1RegistriesMetadata;
import com.spectrocloud.client.model.V1RegistryConfigEntity;
import com.spectrocloud.client.model.V1RegistrySyncStatus;
import com.spectrocloud.client.model.V1ResourceConsumptionSpec;
import com.spectrocloud.client.model.V1ResourceCostSummarySpec;
import com.spectrocloud.client.model.V1ResourceRoles;
import com.spectrocloud.client.model.V1ResourceRolesUpdateEntity;
import com.spectrocloud.client.model.V1ResourceUsageSummarySpec;
import com.spectrocloud.client.model.V1ResourcesCloudCostSummary;
import com.spectrocloud.client.model.V1ResourcesConsumption;
import com.spectrocloud.client.model.V1ResourcesCostSummary;
import com.spectrocloud.client.model.V1ResourcesUsageSummary;
import com.spectrocloud.client.model.V1Role;
import com.spectrocloud.client.model.V1RoleClone;
import com.spectrocloud.client.model.V1Roles;
import com.spectrocloud.client.model.V1SearchFilterSchemaSpec;
import com.spectrocloud.client.model.V1SearchFilterSummarySpec;
import com.spectrocloud.client.model.V1SectroClusterK8sDashboardUrl;
import com.spectrocloud.client.model.V1ServiceManifest;
import com.spectrocloud.client.model.V1ServiceVersion;
import com.spectrocloud.client.model.V1SonobuoyEntity;
import com.spectrocloud.client.model.V1SpcApply;
import com.spectrocloud.client.model.V1SpcPatchTimeEntity;
import com.spectrocloud.client.model.V1SpectroAwsClusterEntity;
import com.spectrocloud.client.model.V1SpectroAwsClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroAwsClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroAzureClusterEntity;
import com.spectrocloud.client.model.V1SpectroAzureClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroAzureClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroCluster;
import com.spectrocloud.client.model.V1SpectroClusterAssetEntity;
import com.spectrocloud.client.model.V1SpectroClusterAssetFrpKubeConfig;
import com.spectrocloud.client.model.V1SpectroClusterAssetKubeConfig;
import com.spectrocloud.client.model.V1SpectroClusterAssetKubeConfigClient;
import com.spectrocloud.client.model.V1SpectroClusterAssetManifest;
import com.spectrocloud.client.model.V1SpectroClusterCloudCostSummarySpec;
import com.spectrocloud.client.model.V1SpectroClusterCostSummary;
import com.spectrocloud.client.model.V1SpectroClusterKubeCtlRedirect;
import com.spectrocloud.client.model.V1SpectroClusterLocationInputEntity;
import com.spectrocloud.client.model.V1SpectroClusterMetadataSpec;
import com.spectrocloud.client.model.V1SpectroClusterOidcSpec;
import com.spectrocloud.client.model.V1SpectroClusterPackConfigList;
import com.spectrocloud.client.model.V1SpectroClusterPackProperties;
import com.spectrocloud.client.model.V1SpectroClusterPacksEntity;
import com.spectrocloud.client.model.V1SpectroClusterPacksStatusEntity;
import com.spectrocloud.client.model.V1SpectroClusterProfileList;
import com.spectrocloud.client.model.V1SpectroClusterProfileUpdates;
import com.spectrocloud.client.model.V1SpectroClusterProfiles;
import com.spectrocloud.client.model.V1SpectroClusterProfilesDeleteEntity;
import com.spectrocloud.client.model.V1SpectroClusterProfilesPacksManifests;
import com.spectrocloud.client.model.V1SpectroClusterProfilesParamReferenceEntity;
import com.spectrocloud.client.model.V1SpectroClusterProfilesResolvedValues;
import com.spectrocloud.client.model.V1SpectroClusterRate;
import com.spectrocloud.client.model.V1SpectroClusterUidSummary;
import com.spectrocloud.client.model.V1SpectroClusterUidUpgrades;
import com.spectrocloud.client.model.V1SpectroClusterVMCloneEntity;
import com.spectrocloud.client.model.V1SpectroClusterValidatorResponse;
import com.spectrocloud.client.model.V1SpectroClustersAgentsNotifyEntity;
import com.spectrocloud.client.model.V1SpectroClustersMetadata;
import com.spectrocloud.client.model.V1SpectroClustersMetadataSearch;
import com.spectrocloud.client.model.V1SpectroClustersSummary;
import com.spectrocloud.client.model.V1SpectroCoxEdgeClusterEntity;
import com.spectrocloud.client.model.V1SpectroCoxEdgeClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroEdgeClusterEntity;
import com.spectrocloud.client.model.V1SpectroEdgeClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroEdgeClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroEdgeNativeClusterEntity;
import com.spectrocloud.client.model.V1SpectroEdgeNativeClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroEdgeNativeClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroEksClusterEntity;
import com.spectrocloud.client.model.V1SpectroEksClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroGcpClusterEntity;
import com.spectrocloud.client.model.V1SpectroGcpClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroGcpClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroGenericClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroGenericClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroLibvirtClusterEntity;
import com.spectrocloud.client.model.V1SpectroLibvirtClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroLibvirtClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroMaasClusterEntity;
import com.spectrocloud.client.model.V1SpectroMaasClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroMaasClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroOpenStackClusterEntity;
import com.spectrocloud.client.model.V1SpectroOpenStackClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroOpenStackClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroTencentClusterEntity;
import com.spectrocloud.client.model.V1SpectroTencentClusterRateEntity;
import com.spectrocloud.client.model.V1SpectroVirtualClusterEntity;
import com.spectrocloud.client.model.V1SpectroVsphereClusterEntity;
import com.spectrocloud.client.model.V1SpectroVsphereClusterImportEntity;
import com.spectrocloud.client.model.V1SpectroVsphereClusterRateEntity;
import com.spectrocloud.client.model.V1SsoLogins;
import com.spectrocloud.client.model.V1SyftEntity;
import com.spectrocloud.client.model.V1SystemScarSpec;
import com.spectrocloud.client.model.V1TagFilter;
import com.spectrocloud.client.model.V1TagFilterSummary;
import com.spectrocloud.client.model.V1Team;
import com.spectrocloud.client.model.V1TeamTenantRolesEntity;
import com.spectrocloud.client.model.V1TeamTenantRolesUpdate;
import com.spectrocloud.client.model.V1Teams;
import com.spectrocloud.client.model.V1TeamsSummaryList;
import com.spectrocloud.client.model.V1TeamsSummarySpec;
import com.spectrocloud.client.model.V1TenantAddressPatch;
import com.spectrocloud.client.model.V1TenantAssetCert;
import com.spectrocloud.client.model.V1TenantAssetCerts;
import com.spectrocloud.client.model.V1TenantClusterSettings;
import com.spectrocloud.client.model.V1TenantDomains;
import com.spectrocloud.client.model.V1TenantEmailPatch;
import com.spectrocloud.client.model.V1TenantEnableClusterGroup;
import com.spectrocloud.client.model.V1TenantFreemium;
import com.spectrocloud.client.model.V1TenantFreemiumUsage;
import com.spectrocloud.client.model.V1TenantOidcClientSpec;
import com.spectrocloud.client.model.V1TenantPasswordPolicyEntity;
import com.spectrocloud.client.model.V1TenantResourceLimits;
import com.spectrocloud.client.model.V1TenantResourceLimitsEntity;
import com.spectrocloud.client.model.V1TenantSamlRequestSpec;
import com.spectrocloud.client.model.V1TenantSamlSpec;
import com.spectrocloud.client.model.V1TenantSsoAuthProvidersEntity;
import com.spectrocloud.client.model.V1TencentAccount;
import com.spectrocloud.client.model.V1TencentAccounts;
import com.spectrocloud.client.model.V1TencentAvailabilityZones;
import com.spectrocloud.client.model.V1TencentCloudAccount;
import com.spectrocloud.client.model.V1TencentCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1TencentCloudConfig;
import com.spectrocloud.client.model.V1TencentInstanceTypes;
import com.spectrocloud.client.model.V1TencentKeypairs;
import com.spectrocloud.client.model.V1TencentMachine;
import com.spectrocloud.client.model.V1TencentMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1TencentMachines;
import com.spectrocloud.client.model.V1TencentRegions;
import com.spectrocloud.client.model.V1TencentSecurityGroups;
import com.spectrocloud.client.model.V1TencentStorageTypes;
import com.spectrocloud.client.model.V1TencentVpcs;
import com.spectrocloud.client.model.V1Uid;
import com.spectrocloud.client.model.V1Uids;
import com.spectrocloud.client.model.V1UpdatedMsg;
import com.spectrocloud.client.model.V1User;
import com.spectrocloud.client.model.V1UserAssetSsh;
import com.spectrocloud.client.model.V1UserAssetSshEntity;
import com.spectrocloud.client.model.V1UserAssetsLocationAzure;
import com.spectrocloud.client.model.V1UserAssetsLocationGcp;
import com.spectrocloud.client.model.V1UserAssetsLocationS3;
import com.spectrocloud.client.model.V1UserAssetsLocations;
import com.spectrocloud.client.model.V1UserAssetsSsh;
import com.spectrocloud.client.model.V1UserEntity;
import com.spectrocloud.client.model.V1UserKubectlSession;
import com.spectrocloud.client.model.V1UserRoleUIDs;
import com.spectrocloud.client.model.V1UserRolesEntity;
import com.spectrocloud.client.model.V1UserStatusLoginMode;
import com.spectrocloud.client.model.V1UserToken;
import com.spectrocloud.client.model.V1UserUpdateEntity;
import com.spectrocloud.client.model.V1Users;
import com.spectrocloud.client.model.V1UsersMetadata;
import com.spectrocloud.client.model.V1UsersSummaryList;
import com.spectrocloud.client.model.V1UsersSummarySpec;
import com.spectrocloud.client.model.V1VMAddVolumeEntity;
import com.spectrocloud.client.model.V1VMClusters;
import com.spectrocloud.client.model.V1VMRemoveVolumeEntity;
import com.spectrocloud.client.model.V1VirtualCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1VirtualCloudConfig;
import com.spectrocloud.client.model.V1VirtualClusterResize;
import com.spectrocloud.client.model.V1VirtualMachine;
import com.spectrocloud.client.model.V1VirtualMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1VirtualMachineSnapshot;
import com.spectrocloud.client.model.V1VirtualMachineSnapshotList;
import com.spectrocloud.client.model.V1VirtualMachines;
import com.spectrocloud.client.model.V1VsphereAccount;
import com.spectrocloud.client.model.V1VsphereAccounts;
import com.spectrocloud.client.model.V1VsphereCloudAccount;
import com.spectrocloud.client.model.V1VsphereCloudClusterConfigEntity;
import com.spectrocloud.client.model.V1VsphereCloudConfig;
import com.spectrocloud.client.model.V1VsphereComputeClusterResources;
import com.spectrocloud.client.model.V1VsphereDatacenters;
import com.spectrocloud.client.model.V1VsphereDnsMapping;
import com.spectrocloud.client.model.V1VsphereDnsMappings;
import com.spectrocloud.client.model.V1VsphereEnv;
import com.spectrocloud.client.model.V1VsphereMachine;
import com.spectrocloud.client.model.V1VsphereMachinePoolConfigEntity;
import com.spectrocloud.client.model.V1VsphereMachines;
import com.spectrocloud.client.model.V1Workspace;
import com.spectrocloud.client.model.V1WorkspaceBackup;
import com.spectrocloud.client.model.V1WorkspaceBackupConfigEntity;
import com.spectrocloud.client.model.V1WorkspaceBackupDeleteEntity;
import com.spectrocloud.client.model.V1WorkspaceClusterNamespacesEntity;
import com.spectrocloud.client.model.V1WorkspaceClustersWorkloadCronJobs;
import com.spectrocloud.client.model.V1WorkspaceClustersWorkloadDaemonSets;
import com.spectrocloud.client.model.V1WorkspaceClustersWorkloadDeployments;
import com.spectrocloud.client.model.V1WorkspaceClustersWorkloadJobs;
import com.spectrocloud.client.model.V1WorkspaceClustersWorkloadNamespaces;
import com.spectrocloud.client.model.V1WorkspaceClustersWorkloadPods;
import com.spectrocloud.client.model.V1WorkspaceClustersWorkloadRoleBindings;
import com.spectrocloud.client.model.V1WorkspaceClustersWorkloadStatefulSets;
import com.spectrocloud.client.model.V1WorkspaceEntity;
import com.spectrocloud.client.model.V1WorkspaceRestore;
import com.spectrocloud.client.model.V1WorkspaceRestoreConfigEntity;
import com.spectrocloud.client.model.V1WorkspaceScopeRoles;
import com.spectrocloud.client.model.V1WorkspaceWorkloadsSpec;
import com.spectrocloud.client.model.V1WorkspacesRolesPatch;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for V1Api
 */
@Ignore
public class V1ApiTest {

    private final V1Api api = new V1Api();

    /**
     * Update the geolocation annotation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AccountsGeolocationPatchTest() throws Exception {
        V1GeolocationLatlong body = null;
        String uid = null;
        api.v1AccountsGeolocationPatch(body, uid);

        // TODO: test validations
    }
    /**
     * Create an API key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ApiKeysCreateTest() throws Exception {
        V1ApiKeyEntity body = null;
        V1Uid response = api.v1ApiKeysCreate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of API keys
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ApiKeysListTest() throws Exception {
        V1ApiKeys response = api.v1ApiKeysList();

        // TODO: test validations
    }
    /**
     * Activate or de-active the specified API key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ApiKeysUidActiveStateTest() throws Exception {
        String uid = null;
        V1ApiKeyActiveState body = null;
        api.v1ApiKeysUidActiveState(uid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified API key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ApiKeysUidDeleteTest() throws Exception {
        String uid = null;
        api.v1ApiKeysUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified API key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ApiKeysUidGetTest() throws Exception {
        String uid = null;
        V1ApiKey response = api.v1ApiKeysUidGet(uid);

        // TODO: test validations
    }
    /**
     * Revoke or re-activate the API key access
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ApiKeysUidStateTest() throws Exception {
        String uid = null;
        V1ApiKeyActiveState body = null;
        api.v1ApiKeysUidState(uid, body);

        // TODO: test validations
    }
    /**
     * Update the specified API key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ApiKeysUidUpdateTest() throws Exception {
        String uid = null;
        V1ApiKeyUpdate body = null;
        api.v1ApiKeysUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates a application deployment in one of virtual clusters in the cluster group
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsClusterGroupCreateTest() throws Exception {
        V1AppDeploymentClusterGroupEntity body = null;
        V1Uid response = api.v1AppDeploymentsClusterGroupCreate(body);

        // TODO: test validations
    }
    /**
     * Returns the specified application deployment tier manifest information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsProfileTiersManifestsUidGetTest() throws Exception {
        String uid = null;
        String tierUid = null;
        String manifestUid = null;
        V1Manifest response = api.v1AppDeploymentsProfileTiersManifestsUidGet(uid, tierUid, manifestUid);

        // TODO: test validations
    }
    /**
     * Updates the specified application deployment tier manifest information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsProfileTiersManifestsUidUpdateTest() throws Exception {
        String uid = null;
        String tierUid = null;
        String manifestUid = null;
        V1ManifestRefUpdateEntity body = null;
        api.v1AppDeploymentsProfileTiersManifestsUidUpdate(uid, tierUid, manifestUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified application deployment profile tier information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsProfileTiersUidGetTest() throws Exception {
        String uid = null;
        String tierUid = null;
        V1AppTier response = api.v1AppDeploymentsProfileTiersUidGet(uid, tierUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of manifests of the specified application deployment profile tier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsProfileTiersUidManifestsGetTest() throws Exception {
        String uid = null;
        String tierUid = null;
        V1AppTierManifests response = api.v1AppDeploymentsProfileTiersUidManifestsGet(uid, tierUid);

        // TODO: test validations
    }
    /**
     * Updates the specified application deployment profile tier information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsProfileTiersUidUpdateTest() throws Exception {
        String uid = null;
        String tierUid = null;
        V1AppTierUpdateEntity body = null;
        api.v1AppDeploymentsProfileTiersUidUpdate(uid, tierUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified application deployment
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsUidDeleteTest() throws Exception {
        String uid = null;
        api.v1AppDeploymentsUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified application deployment
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsUidGetTest() throws Exception {
        String uid = null;
        V1AppDeployment response = api.v1AppDeploymentsUidGet(uid);

        // TODO: test validations
    }
    /**
     * Apply the application deployment profile updates
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsUidProfileApplyTest() throws Exception {
        String uid = null;
        String notify = null;
        api.v1AppDeploymentsUidProfileApply(uid, notify);

        // TODO: test validations
    }
    /**
     * Returns profile of the specified application deployment
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsUidProfileGetTest() throws Exception {
        String uid = null;
        V1AppDeploymentProfileSpec response = api.v1AppDeploymentsUidProfileGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified application deployment profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsUidProfileUpdateTest() throws Exception {
        String uid = null;
        V1AppDeploymentProfileEntity body = null;
        api.v1AppDeploymentsUidProfileUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of profile versions of the specified application deployment
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsUidProfileVersionsGetTest() throws Exception {
        String uid = null;
        V1AppDeploymentProfileVersions response = api.v1AppDeploymentsUidProfileVersionsGet(uid);

        // TODO: test validations
    }
    /**
     * Creates a application deployment in the virtual cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppDeploymentsVirtualClusterCreateTest() throws Exception {
        V1AppDeploymentVirtualClusterEntity body = null;
        V1Uid response = api.v1AppDeploymentsVirtualClusterCreate(body);

        // TODO: test validations
    }
    /**
     * Creates a application profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesCreateTest() throws Exception {
        V1AppProfileEntity body = null;
        V1Uid response = api.v1AppProfilesCreate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of application profile macros
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesMacrosListTest() throws Exception {
        V1Macros response = api.v1AppProfilesMacrosList();

        // TODO: test validations
    }
    /**
     * Clones the specified application profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidCloneTest() throws Exception {
        String uid = null;
        V1AppProfileCloneEntity body = null;
        V1Uid response = api.v1AppProfilesUidClone(uid, body);

        // TODO: test validations
    }
    /**
     * Validates the specified application profile clone
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidCloneValidateTest() throws Exception {
        String uid = null;
        V1AppProfileCloneMetaInputEntity body = null;
        api.v1AppProfilesUidCloneValidate(uid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified application profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidDeleteTest() throws Exception {
        String uid = null;
        api.v1AppProfilesUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified application profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidGetTest() throws Exception {
        String uid = null;
        V1AppProfile response = api.v1AppProfilesUidGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified application profile metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidMetadataUpdateTest() throws Exception {
        String uid = null;
        V1AppProfileMetaEntity body = null;
        api.v1AppProfilesUidMetadataUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Adds tier to the specified application profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersCreateTest() throws Exception {
        String uid = null;
        V1AppTierEntity body = null;
        V1Uid response = api.v1AppProfilesUidTiersCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of tiers of the specified application profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersGetTest() throws Exception {
        String uid = null;
        V1AppProfileTiers response = api.v1AppProfilesUidTiersGet(uid);

        // TODO: test validations
    }
    /**
     * Updates app tier of the specified application profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersPatchTest() throws Exception {
        String uid = null;
        V1AppTierPatchEntity body = null;
        V1Uid response = api.v1AppProfilesUidTiersPatch(uid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified application profile tier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersUidDeleteTest() throws Exception {
        String uid = null;
        String tierUid = null;
        api.v1AppProfilesUidTiersUidDelete(uid, tierUid);

        // TODO: test validations
    }
    /**
     * Returns the specified application profile tier information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersUidGetTest() throws Exception {
        String uid = null;
        String tierUid = null;
        V1AppTier response = api.v1AppProfilesUidTiersUidGet(uid, tierUid);

        // TODO: test validations
    }
    /**
     * Adds manifest to the specified application profile tier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersUidManifestsCreateTest() throws Exception {
        String uid = null;
        String tierUid = null;
        V1ManifestInputEntity body = null;
        V1Uid response = api.v1AppProfilesUidTiersUidManifestsCreate(uid, tierUid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of manifests of the specified application profile tier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersUidManifestsGetTest() throws Exception {
        String uid = null;
        String tierUid = null;
        V1AppTierManifests response = api.v1AppProfilesUidTiersUidManifestsGet(uid, tierUid);

        // TODO: test validations
    }
    /**
     * Deletes the specified application profile tier manifest
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersUidManifestsUidDeleteTest() throws Exception {
        String uid = null;
        String tierUid = null;
        String manifestUid = null;
        api.v1AppProfilesUidTiersUidManifestsUidDelete(uid, tierUid, manifestUid);

        // TODO: test validations
    }
    /**
     * Returns the specified application profile tier manifest information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersUidManifestsUidGetTest() throws Exception {
        String uid = null;
        String tierUid = null;
        String manifestUid = null;
        V1Manifest response = api.v1AppProfilesUidTiersUidManifestsUidGet(uid, tierUid, manifestUid);

        // TODO: test validations
    }
    /**
     * Updates the specified application profile tier manifest information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersUidManifestsUidUpdateTest() throws Exception {
        String uid = null;
        String tierUid = null;
        String manifestUid = null;
        V1ManifestRefUpdateEntity body = null;
        api.v1AppProfilesUidTiersUidManifestsUidUpdate(uid, tierUid, manifestUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified application profile tier resolved values
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersUidResolvedValuesGetTest() throws Exception {
        String uid = null;
        String tierUid = null;
        V1AppTierResolvedValues response = api.v1AppProfilesUidTiersUidResolvedValuesGet(uid, tierUid);

        // TODO: test validations
    }
    /**
     * Updates the specified application profile tier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidTiersUidUpdateTest() throws Exception {
        String uid = null;
        String tierUid = null;
        V1AppTierUpdateEntity body = null;
        api.v1AppProfilesUidTiersUidUpdate(uid, tierUid, body);

        // TODO: test validations
    }
    /**
     * Updates the specified application profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AppProfilesUidUpdateTest() throws Exception {
        String uid = null;
        V1AppProfileEntity body = null;
        api.v1AppProfilesUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves the list of audit logs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuditsListTest() throws Exception {
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String userUid = null;
        String projectUid = null;
        String tenantUid = null;
        String resourceKind = null;
        String resourceUid = null;
        String actionType = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1Audits response = api.v1AuditsList(startTime, endTime, userUid, projectUid, tenantUid, resourceKind, resourceUid, actionType, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Returns the specified audit log
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuditsUidGetTest() throws Exception {
        String uid = null;
        V1Audit response = api.v1AuditsUidGet(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified system audit message
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuditsUidGetSysMsgTest() throws Exception {
        String uid = null;
        V1AuditSysMsg response = api.v1AuditsUidGetSysMsg(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified user message for the specified audit
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuditsUidMsgUpdateTest() throws Exception {
        String uid = null;
        V1AuditMsgUpdate body = null;
        api.v1AuditsUidMsgUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the user organization details
     *
     * Returns the allowed login method and information with the organization details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuthOrgTest() throws Exception {
        String orgName = null;
        V1LoginResponse response = api.v1AuthOrg(orgName);

        // TODO: test validations
    }
    /**
     * Creates a request to switch organization
     *
     * Creates a request to switch to the same user&#x27;s other organization. Only possible if user belongs to multiple organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuthOrgSwitchTest() throws Exception {
        String orgName = null;
        Boolean setCookie = null;
        V1UserToken response = api.v1AuthOrgSwitch(orgName, setCookie);

        // TODO: test validations
    }
    /**
     * Returns a list of user&#x27;s organizations
     *
     * Returns a list of user&#x27;s organizations details and login methods
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuthOrgsTest() throws Exception {
        V1Organizations response = api.v1AuthOrgs();

        // TODO: test validations
    }
    /**
     * Refreshes authentication token
     *
     * Returns a new token within refresh timeout and same session id is maintained
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuthRefreshTest() throws Exception {
        String token = null;
        Boolean setCookie = null;
        V1UserToken response = api.v1AuthRefresh(token, setCookie);

        // TODO: test validations
    }
    /**
     * Returns a list of supported sso auth providers
     *
     * Returns a list of supported sso auth providers
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuthSsoProvidersTest() throws Exception {
        V1SsoLogins response = api.v1AuthSsoProviders();

        // TODO: test validations
    }
    /**
     * Returns No Content. Sends the user organization information via email
     *
     * Returns No Content. Sends the user organization(s) information via email
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuthUserOrgForgotTest() throws Exception {
        String emailId = null;
        api.v1AuthUserOrgForgot(emailId);

        // TODO: test validations
    }
    /**
     * Authenticates the user for the specified crendentials
     *
     * Creates a authentication request with the specified credentials
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AuthenticateTest() throws Exception {
        V1AuthLogin body = null;
        Boolean setCookie = null;
        V1UserToken response = api.v1Authenticate(body, setCookie);

        // TODO: test validations
    }
    /**
     * Retrieves AWS external id and account id
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsAccountStsGetTest() throws Exception {
        String partition = null;
        V1AwsAccountSts response = api.v1AwsAccountStsGet(partition);

        // TODO: test validations
    }
    /**
     * Validate the specified AWS account credentials
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsAccountValidateTest() throws Exception {
        V1AwsCloudAccount body = null;
        api.v1AwsAccountValidate(body);

        // TODO: test validations
    }
    /**
     * Retrieves AWS cloud account usage cost from cost explorer.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsCloudCostTest() throws Exception {
        V1AwsCloudCostSpec body = null;
        V1AwsCloudCostSummary response = api.v1AwsCloudCost(body);

        // TODO: test validations
    }
    /**
     * Check if Aws cluster name is valid
     *
     * Returns no contents if aws cluster name is valid else error.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsClusterNameValidateTest() throws Exception {
        String cloudAccountUid = null;
        String name = null;
        String region = null;
        api.v1AwsClusterNameValidate(cloudAccountUid, name, region);

        // TODO: test validations
    }
    /**
     * Copies the specified image from one region to another region
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsCopyImageFromDefaultRegionTest() throws Exception {
        String region = null;
        V1AwsFindImageRequest body = null;
        V1AsyncOperationIdEntity response = api.v1AwsCopyImageFromDefaultRegion(region, body);

        // TODO: test validations
    }
    /**
     * Returns AWS image for the specified AMI name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsFindImageTest() throws Exception {
        String region = null;
        V1AwsFindImageRequest body = null;
        V1AwsImage response = api.v1AwsFindImage(region, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AWS policies for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsIamPoliciesTest() throws Exception {
        V1AwsCloudAccount body = null;
        String cloudAccountUid = null;
        V1AwsPolicies response = api.v1AwsIamPolicies(body, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AWS instance types
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsInstanceTypesTest() throws Exception {
        String region = null;
        Double cpuGtEq = null;
        Double memoryGtEq = null;
        Double gpuGtEq = null;
        String cloudAccountUid = null;
        V1AwsInstanceTypes response = api.v1AwsInstanceTypes(region, cpuGtEq, memoryGtEq, gpuGtEq, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Validate the specified AWS keypair
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsKeyPairValidateTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        String keypair = null;
        api.v1AwsKeyPairValidate(region, cloudAccountUid, keypair);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AWS keypairs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsKeyPairsTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        V1AwsKeyPairs response = api.v1AwsKeyPairs(region, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Validate an Aws KMS key for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsKmsKeyValidateTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        String keyArn = null;
        api.v1AwsKmsKeyValidate(region, cloudAccountUid, keyArn);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AWS KMS keys for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsKmsKeysTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        V1AwsKmsKeys response = api.v1AwsKmsKeys(region, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Validate the aws policy arns validate
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsPolicyArnsValidateTest() throws Exception {
        V1AwsPolicyArnsSpec body = null;
        String cloudAccountUid = null;
        api.v1AwsPolicyArnsValidate(body, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AWS regions for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsRegionsTest() throws Exception {
        String cloudAccountUid = null;
        V1AwsRegions response = api.v1AwsRegions(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Validate the AWS S3 bucket
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsS3ValidateTest() throws Exception {
        V1AwsS3BucketCredentials body = null;
        api.v1AwsS3Validate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AWS storage types
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsStorageTypesTest() throws Exception {
        String region = null;
        V1AwsStorageTypes response = api.v1AwsStorageTypes(region);

        // TODO: test validations
    }
    /**
     * Get AWS Volume Size
     *
     * Get AWS Volume Size
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsVolumeSizeGetTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        String imageId = null;
        V1AwsVolumeSize response = api.v1AwsVolumeSizeGet(region, cloudAccountUid, imageId);

        // TODO: test validations
    }
    /**
     * Get all AWS Volume Types
     *
     * List all AWS Volume Types
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsVolumeTypesGetTest() throws Exception {
        String region = null;
        V1AWSVolumeTypes response = api.v1AwsVolumeTypesGet(region);

        // TODO: test validations
    }
    /**
     * Retrieves a list of VPCs for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsVpcsTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        V1AwsVpcs response = api.v1AwsVpcs(region, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AWS availability zones for the specified region
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AwsZonesTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        V1AwsAvailabilityZones response = api.v1AwsZones(region, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Check if Azure account is valid
     *
     * Returns no contents if account is valid else error.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureAccountValidateTest() throws Exception {
        V1AzureCloudAccount body = null;
        api.v1AzureAccountValidate(body);

        // TODO: test validations
    }
    /**
     * Check if Azure cluster name is valid
     *
     * Returns no contents if Azure cluster name is valid else error.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureClusterNameValidateTest() throws Exception {
        String cloudAccountUid = null;
        String name = null;
        String region = null;
        String subscriptionId = null;
        String resourceGroup = null;
        api.v1AzureClusterNameValidate(cloudAccountUid, name, region, subscriptionId, resourceGroup);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Azure groups
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureGroupsTest() throws Exception {
        String cloudAccountUid = null;
        V1AzureGroups response = api.v1AzureGroups(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Azure instance types
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureInstanceTypesTest() throws Exception {
        String region = null;
        Double cpuGtEq = null;
        Double memoryGtEq = null;
        Double gpuGtEq = null;
        V1AzureInstanceTypes response = api.v1AzureInstanceTypes(region, cpuGtEq, memoryGtEq, gpuGtEq);

        // TODO: test validations
    }
    /**
     * Get Azure private DNS zones for the given resource group
     *
     * Returns Azure private DNS zones
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzurePrivateDnsZonesTest() throws Exception {
        String resourceGroup = null;
        String cloudAccountUid = null;
        String subscriptionId = null;
        V1AzurePrivateDnsZones response = api.v1AzurePrivateDnsZones(resourceGroup, cloudAccountUid, subscriptionId);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Azure regions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureRegionsTest() throws Exception {
        String cloudAccountUid = null;
        String subscriptionId = null;
        V1AzureRegions response = api.v1AzureRegions(cloudAccountUid, subscriptionId);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Azure resource group for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureResourceGroupListTest() throws Exception {
        String cloudAccountUid = null;
        String region = null;
        String subscriptionId = null;
        V1AzureResourceGroupList response = api.v1AzureResourceGroupList(cloudAccountUid, region, subscriptionId);

        // TODO: test validations
    }
    /**
     * Get Azure storage account types
     *
     * Returns Azure storage account types.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureStorageAccountTypesTest() throws Exception {
        String region = null;
        V1AzureStorageAccountEntity response = api.v1AzureStorageAccountTypes(region);

        // TODO: test validations
    }
    /**
     * Get Azure storage accounts
     *
     * Returns Azure storage accounts.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureStorageAccountsTest() throws Exception {
        String resourceGroup = null;
        String subscriptionId = null;
        String cloudAccountUid = null;
        V1AzureStorageAccounts response = api.v1AzureStorageAccounts(resourceGroup, subscriptionId, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Get Azure storage containers
     *
     * Returns Azure storage containers for the given account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureStorageContainersTest() throws Exception {
        String resourceGroup = null;
        String subscriptionId = null;
        String storageAccountName = null;
        String cloudAccountUid = null;
        V1AzureStorageContainers response = api.v1AzureStorageContainers(resourceGroup, subscriptionId, storageAccountName, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Azure storage types
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureStorageTypesTest() throws Exception {
        String region = null;
        V1AzureStorageTypes response = api.v1AzureStorageTypes(region);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Azure subscription list for the specified account
     *
     * Returns list of Azure subscription list.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureSubscriptionListTest() throws Exception {
        String cloudAccountUid = null;
        V1AzureSubscriptionList response = api.v1AzureSubscriptionList(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Returns the Azure vhd url for the specified vhd location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureVhdUrlTest() throws Exception {
        String vhd = null;
        V1AzureVhdUrlEntity response = api.v1AzureVhdUrl(vhd);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Azure virtual network list for the sepcified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureVirtualNetworkListTest() throws Exception {
        String cloudAccountUid = null;
        String region = null;
        String subscriptionId = null;
        String resourceGroup = null;
        V1AzureVirtualNetworkList response = api.v1AzureVirtualNetworkList(cloudAccountUid, region, subscriptionId, resourceGroup);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Azure zones for the specified region
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1AzureZonesTest() throws Exception {
        String region = null;
        V1AzureZoneEntity response = api.v1AzureZones(region);

        // TODO: test validations
    }
    /**
     * Creates a basic oci registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1BasicOciRegistriesCreateTest() throws Exception {
        V1BasicOciRegistry body = null;
        V1Uid response = api.v1BasicOciRegistriesCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified basic oci registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1BasicOciRegistriesUidDeleteTest() throws Exception {
        String uid = null;
        api.v1BasicOciRegistriesUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the basic oci registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1BasicOciRegistriesUidGetTest() throws Exception {
        String uid = null;
        V1BasicOciRegistry response = api.v1BasicOciRegistriesUidGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified basic oci registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1BasicOciRegistriesUidUpdateTest() throws Exception {
        String uid = null;
        V1BasicOciRegistry body = null;
        api.v1BasicOciRegistriesUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates an AWS cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAwsCreateTest() throws Exception {
        V1AwsAccount body = null;
        V1Uid response = api.v1CloudAccountsAwsCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified AWS account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAwsDeleteTest() throws Exception {
        String uid = null;
        api.v1CloudAccountsAwsDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified AWS account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAwsGetTest() throws Exception {
        String uid = null;
        Boolean assumeCredentials = null;
        V1AwsAccount response = api.v1CloudAccountsAwsGet(uid, assumeCredentials);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AWS cloud accounts
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAwsListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1AwsAccounts response = api.v1CloudAccountsAwsList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Updates the specified AWS account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAwsUpdateTest() throws Exception {
        String uid = null;
        V1AwsAccount body = null;
        api.v1CloudAccountsAwsUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Create azure cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAzureCreateTest() throws Exception {
        V1AzureAccount body = null;
        V1Uid response = api.v1CloudAccountsAzureCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified azure account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAzureDeleteTest() throws Exception {
        String uid = null;
        api.v1CloudAccountsAzureDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified azure cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAzureGetTest() throws Exception {
        String uid = null;
        V1AzureAccount response = api.v1CloudAccountsAzureGet(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of azure cloud accounts
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAzureListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1AzureAccounts response = api.v1CloudAccountsAzureList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Updates the specified azure account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsAzureUpdateTest() throws Exception {
        String uid = null;
        V1AzureAccount body = null;
        api.v1CloudAccountsAzureUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates an CoxEdge cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsCoxEdgeCreateTest() throws Exception {
        V1CoxEdgeAccount body = null;
        V1Uid response = api.v1CloudAccountsCoxEdgeCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified CoxEdge account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsCoxEdgeDeleteTest() throws Exception {
        String uid = null;
        api.v1CloudAccountsCoxEdgeDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified CoxEdge account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsCoxEdgeGetTest() throws Exception {
        String uid = null;
        V1CoxEdgeAccount response = api.v1CloudAccountsCoxEdgeGet(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of CoxEdge cloud accounts
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsCoxEdgeListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1CoxEdgeAccounts response = api.v1CloudAccountsCoxEdgeList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Updates the specified CoxEdge account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsCoxEdgeUpdateTest() throws Exception {
        String uid = null;
        V1CoxEdgeAccount body = null;
        api.v1CloudAccountsCoxEdgeUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates a GCP cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsGcpCreateTest() throws Exception {
        V1GcpAccountEntity body = null;
        V1Uid response = api.v1CloudAccountsGcpCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified GCP account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsGcpDeleteTest() throws Exception {
        String uid = null;
        api.v1CloudAccountsGcpDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified GCP cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsGcpGetTest() throws Exception {
        String uid = null;
        V1GcpAccount response = api.v1CloudAccountsGcpGet(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of gcp cloud accounts
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsGcpListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1GcpAccounts response = api.v1CloudAccountsGcpList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Updates the specified GCP account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsGcpUpdateTest() throws Exception {
        String uid = null;
        V1GcpAccountEntity body = null;
        api.v1CloudAccountsGcpUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cloud accounts summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsListSummaryTest() throws Exception {
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1CloudAccountsSummary response = api.v1CloudAccountsListSummary(filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Creates an Maas cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsMaasCreateTest() throws Exception {
        V1MaasAccount body = null;
        V1Uid response = api.v1CloudAccountsMaasCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified Maas account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsMaasDeleteTest() throws Exception {
        String uid = null;
        api.v1CloudAccountsMaasDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified Maas account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsMaasGetTest() throws Exception {
        String uid = null;
        V1MaasAccount response = api.v1CloudAccountsMaasGet(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Maas cloud accounts
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsMaasListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1MaasAccounts response = api.v1CloudAccountsMaasList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Patches the specified CloudAccount Maas
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsMaasPatchTest() throws Exception {
        List<V1HttpPatch> body = null;
        String uid = null;
        api.v1CloudAccountsMaasPatch(body, uid);

        // TODO: test validations
    }
    /**
     * Updates the specified Maas account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsMaasUpdateTest() throws Exception {
        String uid = null;
        V1MaasAccount body = null;
        api.v1CloudAccountsMaasUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates a OpenStack cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsOpenStackCreateTest() throws Exception {
        V1OpenStackAccount body = null;
        V1Uid response = api.v1CloudAccountsOpenStackCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified OpenStack account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsOpenStackDeleteTest() throws Exception {
        String uid = null;
        api.v1CloudAccountsOpenStackDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified OpenStack account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsOpenStackGetTest() throws Exception {
        String uid = null;
        V1OpenStackAccount response = api.v1CloudAccountsOpenStackGet(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of OpenStack cloud accounts
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsOpenStackListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1OpenStackAccounts response = api.v1CloudAccountsOpenStackList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Updates the specified OpenStack account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsOpenStackUpdateTest() throws Exception {
        String uid = null;
        V1OpenStackAccount body = null;
        api.v1CloudAccountsOpenStackUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates an Tencent cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsTencentCreateTest() throws Exception {
        V1TencentAccount body = null;
        V1Uid response = api.v1CloudAccountsTencentCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified Tencent account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsTencentDeleteTest() throws Exception {
        String uid = null;
        api.v1CloudAccountsTencentDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified Tencent account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsTencentGetTest() throws Exception {
        String uid = null;
        V1TencentAccount response = api.v1CloudAccountsTencentGet(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Tencent cloud accounts
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsTencentListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1TencentAccounts response = api.v1CloudAccountsTencentList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Updates the specified Tencent account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsTencentUpdateTest() throws Exception {
        String uid = null;
        V1TencentAccount body = null;
        api.v1CloudAccountsTencentUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates a vSphere cloud account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsVsphereCreateTest() throws Exception {
        V1VsphereAccount body = null;
        V1Uid response = api.v1CloudAccountsVsphereCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified vSphere account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsVsphereDeleteTest() throws Exception {
        String uid = null;
        api.v1CloudAccountsVsphereDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified vSphere account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsVsphereGetTest() throws Exception {
        String uid = null;
        V1VsphereAccount response = api.v1CloudAccountsVsphereGet(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of vSphere cloud accounts
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsVsphereListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1VsphereAccounts response = api.v1CloudAccountsVsphereList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Updates the specified VSphere account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudAccountsVsphereUpdateTest() throws Exception {
        String uid = null;
        V1VsphereAccount body = null;
        api.v1CloudAccountsVsphereUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the cloud compute rate
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudComputeRateTest() throws Exception {
        String cloud = null;
        String type = null;
        String region = null;
        V1CloudCost response = api.v1CloudComputeRate(cloud, type, region);

        // TODO: test validations
    }
    /**
     * Returns the specified AKS cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksGetTest() throws Exception {
        String configUid = null;
        V1AzureCloudConfig response = api.v1CloudConfigsAksGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates an AKS cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1AzureMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsAksMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsAksMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified AKS cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1AzureMachinePoolConfigEntity body = null;
        api.v1CloudConfigsAksMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksPoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1AzureMachine body = null;
        V1Uid response = api.v1CloudConfigsAksPoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AKS machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksPoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1AzureMachines response = api.v1CloudConfigsAksPoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified Azure machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksPoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsAksPoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified AKS machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksPoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1AzureMachine response = api.v1CloudConfigsAksPoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksPoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1AzureMachine body = null;
        api.v1CloudConfigsAksPoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAksUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1AzureCloudClusterConfigEntity body = null;
        api.v1CloudConfigsAksUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified AWS cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsGetTest() throws Exception {
        String configUid = null;
        V1AwsCloudConfig response = api.v1CloudConfigsAwsGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates an AWS cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1AwsMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsAwsMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsAwsMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified AWS cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1AwsMachinePoolConfigEntity body = null;
        api.v1CloudConfigsAwsMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsPoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1AwsMachine body = null;
        V1Uid response = api.v1CloudConfigsAwsPoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of AWS machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsPoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1AwsMachines response = api.v1CloudConfigsAwsPoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified AWS machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsPoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsAwsPoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified AWS machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsPoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1AwsMachine response = api.v1CloudConfigsAwsPoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsPoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1AwsMachine body = null;
        api.v1CloudConfigsAwsPoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAwsUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1AwsCloudClusterConfigEntity body = null;
        api.v1CloudConfigsAwsUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified Azure cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzureGetTest() throws Exception {
        String configUid = null;
        V1AzureCloudConfig response = api.v1CloudConfigsAzureGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates an Azure cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzureMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1AzureMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsAzureMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzureMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsAzureMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified Azure cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzureMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1AzureMachinePoolConfigEntity body = null;
        api.v1CloudConfigsAzureMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzurePoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1AzureMachine body = null;
        V1Uid response = api.v1CloudConfigsAzurePoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Azure machines
     *
     * Returns all the Azure machines restricted to the user role and filters.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzurePoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1AzureMachines response = api.v1CloudConfigsAzurePoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified Azure machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzurePoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsAzurePoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified Azure machine
     *
     * Returns a Azure machine for the specified uid.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzurePoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1AzureMachine response = api.v1CloudConfigsAzurePoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzurePoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1AzureMachine body = null;
        api.v1CloudConfigsAzurePoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsAzureUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1AzureCloudClusterConfigEntity body = null;
        api.v1CloudConfigsAzureUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified CoxEdge cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgeGetTest() throws Exception {
        String configUid = null;
        V1CoxEdgeCloudConfig response = api.v1CloudConfigsCoxEdgeGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates a CoxEdge cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgeMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1CoxEdgeMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsCoxEdgeMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgeMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsCoxEdgeMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified CoxEdge cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgeMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1CoxEdgeMachinePoolConfigEntity body = null;
        api.v1CloudConfigsCoxEdgeMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgePoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1CoxEdgeMachine body = null;
        V1Uid response = api.v1CloudConfigsCoxEdgePoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of CoxEdge machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgePoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1CoxEdgeMachines response = api.v1CloudConfigsCoxEdgePoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified CoxEdge machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgePoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsCoxEdgePoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified CoxEdge machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgePoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1CoxEdgeMachine response = api.v1CloudConfigsCoxEdgePoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgePoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1CoxEdgeMachine body = null;
        api.v1CloudConfigsCoxEdgePoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsCoxEdgeUidClusterConfigUpdateTest() throws Exception {
        String configUid = null;
        V1CoxEdgeCloudClusterConfigEntity body = null;
        api.v1CloudConfigsCoxEdgeUidClusterConfigUpdate(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified edge cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeGetTest() throws Exception {
        String configUid = null;
        V1EdgeCloudConfig response = api.v1CloudConfigsEdgeGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates a edge cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1EdgeMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsEdgeMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsEdgeMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified Edge cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1EdgeMachinePoolConfigEntity body = null;
        api.v1CloudConfigsEdgeMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Returns the specified edge-native cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativeGetTest() throws Exception {
        String configUid = null;
        V1EdgeNativeCloudConfig response = api.v1CloudConfigsEdgeNativeGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates a edge-native cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativeMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1EdgeNativeMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsEdgeNativeMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativeMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsEdgeNativeMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified edge-native cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativeMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1EdgeNativeMachinePoolConfigEntity body = null;
        api.v1CloudConfigsEdgeNativeMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the edge-native machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativePoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1EdgeNativeMachine body = null;
        V1Uid response = api.v1CloudConfigsEdgeNativePoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of edge-native machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativePoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1EdgeNativeMachines response = api.v1CloudConfigsEdgeNativePoolMachinesList(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Deletes the specified edge-native machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativePoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsEdgeNativePoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified edge-native machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativePoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1EdgeNativeMachine response = api.v1CloudConfigsEdgeNativePoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativePoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1EdgeNativeMachine body = null;
        api.v1CloudConfigsEdgeNativePoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeNativeUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1EdgeNativeCloudClusterConfigEntity body = null;
        api.v1CloudConfigsEdgeNativeUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Adds the Edge machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgePoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1EdgeMachine body = null;
        V1Uid response = api.v1CloudConfigsEdgePoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Edge machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgePoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1EdgeMachines response = api.v1CloudConfigsEdgePoolMachinesList(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Deletes the specified Edge machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgePoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsEdgePoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified Edge machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgePoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1EdgeMachine response = api.v1CloudConfigsEdgePoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgePoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1EdgeMachine body = null;
        api.v1CloudConfigsEdgePoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEdgeUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1EdgeCloudClusterConfigEntity body = null;
        api.v1CloudConfigsEdgeUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified EKS cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksGetTest() throws Exception {
        String configUid = null;
        V1EksCloudConfig response = api.v1CloudConfigsEksGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates an EKS cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1EksMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsEksMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsEksMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified EKS cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1EksMachinePoolConfigEntity body = null;
        api.v1CloudConfigsEksMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksPoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1AwsMachine body = null;
        V1Uid response = api.v1CloudConfigsEksPoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of EKS machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksPoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1AwsMachines response = api.v1CloudConfigsEksPoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified EKS machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksPoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsEksPoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified EKS machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksPoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1AwsMachine response = api.v1CloudConfigsEksPoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksPoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1AwsMachine body = null;
        api.v1CloudConfigsEksPoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1EksCloudClusterConfigEntity body = null;
        api.v1CloudConfigsEksUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Updates EKS cloud config&#x27;s fargate profiles
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsEksUidFargateProfilesUpdateTest() throws Exception {
        String configUid = null;
        V1EksFargateProfiles body = null;
        api.v1CloudConfigsEksUidFargateProfilesUpdate(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified GCP cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpGetTest() throws Exception {
        String configUid = null;
        V1GcpCloudConfig response = api.v1CloudConfigsGcpGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates a Gcp cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1GcpMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsGcpMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsGcpMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified GCP cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1GcpMachinePoolConfigEntity body = null;
        api.v1CloudConfigsGcpMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpPoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1GcpMachine body = null;
        V1Uid response = api.v1CloudConfigsGcpPoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of GCP machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpPoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1GcpMachines response = api.v1CloudConfigsGcpPoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified GCP machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpPoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsGcpPoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified GCP machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpPoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1GcpMachine response = api.v1CloudConfigsGcpPoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpPoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1GcpMachine body = null;
        api.v1CloudConfigsGcpPoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGcpUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1GcpCloudClusterConfigEntity body = null;
        api.v1CloudConfigsGcpUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified Generic cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericGetTest() throws Exception {
        String configUid = null;
        V1GenericCloudConfig response = api.v1CloudConfigsGenericGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates a generic cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1GenericMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsGenericMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsGenericMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified generic cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1GenericMachinePoolConfigEntity body = null;
        api.v1CloudConfigsGenericMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericPoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1GenericMachine body = null;
        V1Uid response = api.v1CloudConfigsGenericPoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Generic machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericPoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1GenericMachines response = api.v1CloudConfigsGenericPoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericPoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsGenericPoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified generic machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericPoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1GenericMachine response = api.v1CloudConfigsGenericPoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericPoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1GenericMachine body = null;
        api.v1CloudConfigsGenericPoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGenericUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1GenericCloudClusterConfigEntity body = null;
        api.v1CloudConfigsGenericUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified GKE cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkeGetTest() throws Exception {
        String configUid = null;
        V1GcpCloudConfig response = api.v1CloudConfigsGkeGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates an GKE cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkeMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1GcpMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsGkeMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkeMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsGkeMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified GKE cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkeMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1GcpMachinePoolConfigEntity body = null;
        api.v1CloudConfigsGkeMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkePoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1GcpMachine body = null;
        V1Uid response = api.v1CloudConfigsGkePoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of GKE machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkePoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1GcpMachines response = api.v1CloudConfigsGkePoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified Gcp machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkePoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsGkePoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified GKE machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkePoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1GcpMachine response = api.v1CloudConfigsGkePoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkePoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1GcpMachine body = null;
        api.v1CloudConfigsGkePoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsGkeUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1GcpCloudClusterConfigEntity body = null;
        api.v1CloudConfigsGkeUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified libvirt cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtGetTest() throws Exception {
        String configUid = null;
        V1LibvirtCloudConfig response = api.v1CloudConfigsLibvirtGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates a libvirt cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1LibvirtMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsLibvirtMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsLibvirtMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified Libvirt cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1LibvirtMachinePoolConfigEntity body = null;
        api.v1CloudConfigsLibvirtMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the Libvirt machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtPoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1LibvirtMachine body = null;
        V1Uid response = api.v1CloudConfigsLibvirtPoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Libvirt machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtPoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1LibvirtMachines response = api.v1CloudConfigsLibvirtPoolMachinesList(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Deletes the specified Libvirt machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtPoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsLibvirtPoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified Libvirt machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtPoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1LibvirtMachine response = api.v1CloudConfigsLibvirtPoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtPoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1LibvirtMachine body = null;
        api.v1CloudConfigsLibvirtPoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsLibvirtUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1LibvirtCloudClusterConfigEntity body = null;
        api.v1CloudConfigsLibvirtUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified Maas cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasGetTest() throws Exception {
        String configUid = null;
        V1MaasCloudConfig response = api.v1CloudConfigsMaasGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates an Maas cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1MaasMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsMaasMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsMaasMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified Maas cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1MaasMachinePoolConfigEntity body = null;
        api.v1CloudConfigsMaasMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasPoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1MaasMachine body = null;
        V1Uid response = api.v1CloudConfigsMaasPoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Maas machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasPoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1MaasMachines response = api.v1CloudConfigsMaasPoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified Maas machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasPoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsMaasPoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified Maas machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasPoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1MaasMachine response = api.v1CloudConfigsMaasPoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasPoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1MaasMachine body = null;
        api.v1CloudConfigsMaasPoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMaasUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1MaasCloudClusterConfigEntity body = null;
        api.v1CloudConfigsMaasUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified cloud config&#x27;s machine pools and machine uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsMachinePoolsMachineUidsGetTest() throws Exception {
        String configUid = null;
        V1MachinePoolsMachineUids response = api.v1CloudConfigsMachinePoolsMachineUidsGet(configUid);

        // TODO: test validations
    }
    /**
     * Returns the specified OpenStack cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackGetTest() throws Exception {
        String configUid = null;
        V1OpenStackCloudConfig response = api.v1CloudConfigsOpenStackGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates a OpenStack cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1OpenStackMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsOpenStackMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsOpenStackMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified OpenStack cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1OpenStackMachinePoolConfigEntity body = null;
        api.v1CloudConfigsOpenStackMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the OpenStack machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackPoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1OpenStackMachine body = null;
        V1Uid response = api.v1CloudConfigsOpenStackPoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of OpenStack machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackPoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1OpenStackMachines response = api.v1CloudConfigsOpenStackPoolMachinesList(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Deletes the specified OpenStack machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackPoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsOpenStackPoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified OpenStack machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackPoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1OpenStackMachine response = api.v1CloudConfigsOpenStackPoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackPoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1OpenStackMachine body = null;
        api.v1CloudConfigsOpenStackPoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsOpenStackUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1OpenStackCloudClusterConfigEntity body = null;
        api.v1CloudConfigsOpenStackUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified TKE cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkeGetTest() throws Exception {
        String configUid = null;
        V1TencentCloudConfig response = api.v1CloudConfigsTkeGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates an TKE cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkeMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1TencentMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsTkeMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkeMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsTkeMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified TKE cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkeMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1TencentMachinePoolConfigEntity body = null;
        api.v1CloudConfigsTkeMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkePoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1TencentMachine body = null;
        V1Uid response = api.v1CloudConfigsTkePoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of TKE machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkePoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1TencentMachines response = api.v1CloudConfigsTkePoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified Tencent machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkePoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsTkePoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified Tke machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkePoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1TencentMachine response = api.v1CloudConfigsTkePoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkePoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1TencentMachine body = null;
        api.v1CloudConfigsTkePoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsTkeUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1TencentCloudClusterConfigEntity body = null;
        api.v1CloudConfigsTkeUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified Virtual cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualGetTest() throws Exception {
        String configUid = null;
        V1VirtualCloudConfig response = api.v1CloudConfigsVirtualGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates a virtual cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1VirtualMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsVirtualMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsVirtualMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified virtual cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1VirtualMachinePoolConfigEntity body = null;
        api.v1CloudConfigsVirtualMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualPoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1VirtualMachine body = null;
        V1Uid response = api.v1CloudConfigsVirtualPoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of virtual machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualPoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1VirtualMachines response = api.v1CloudConfigsVirtualPoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualPoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsVirtualPoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualPoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1VirtualMachine response = api.v1CloudConfigsVirtualPoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to the cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualPoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1VirtualMachine body = null;
        api.v1CloudConfigsVirtualPoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1VirtualCloudClusterConfigEntity body = null;
        api.v1CloudConfigsVirtualUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Updates and resizes the virtual cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVirtualUidUpdateTest() throws Exception {
        String configUid = null;
        V1VirtualClusterResize body = null;
        api.v1CloudConfigsVirtualUidUpdate(configUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified vSphere cloud config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVsphereGetTest() throws Exception {
        String configUid = null;
        V1VsphereCloudConfig response = api.v1CloudConfigsVsphereGet(configUid);

        // TODO: test validations
    }
    /**
     * Creates a vSphere cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVsphereMachinePoolCreateTest() throws Exception {
        String configUid = null;
        V1VsphereMachinePoolConfigEntity body = null;
        V1Uid response = api.v1CloudConfigsVsphereMachinePoolCreate(configUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVsphereMachinePoolDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        api.v1CloudConfigsVsphereMachinePoolDelete(configUid, machinePoolName);

        // TODO: test validations
    }
    /**
     * Updates the specified vSphere cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVsphereMachinePoolUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1VsphereMachinePoolConfigEntity body = null;
        api.v1CloudConfigsVsphereMachinePoolUpdate(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Adds the vSphere machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVspherePoolMachinesAddTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        V1VsphereMachine body = null;
        V1Uid response = api.v1CloudConfigsVspherePoolMachinesAdd(configUid, machinePoolName, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of vSphere machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVspherePoolMachinesListTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1VsphereMachines response = api.v1CloudConfigsVspherePoolMachinesList(configUid, machinePoolName, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified vSphere machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVspherePoolMachinesUidDeleteTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        api.v1CloudConfigsVspherePoolMachinesUidDelete(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Returns the specified vSphere machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVspherePoolMachinesUidGetTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1VsphereMachine response = api.v1CloudConfigsVspherePoolMachinesUidGet(configUid, machinePoolName, machineUid);

        // TODO: test validations
    }
    /**
     * Updates the specified machine to cloud config&#x27;s machine pool
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVspherePoolMachinesUidUpdateTest() throws Exception {
        String configUid = null;
        String machinePoolName = null;
        String machineUid = null;
        V1VsphereMachine body = null;
        api.v1CloudConfigsVspherePoolMachinesUidUpdate(configUid, machinePoolName, machineUid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster configuration information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudConfigsVsphereUidClusterConfigTest() throws Exception {
        String configUid = null;
        V1VsphereCloudClusterConfigEntity body = null;
        api.v1CloudConfigsVsphereUidClusterConfig(configUid, body);

        // TODO: test validations
    }
    /**
     * Retrieves the cloud instance spot price based on zone and timestamp for a specific cloud
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudInstanceSpotPriceGetTest() throws Exception {
        String cloudType = null;
        String instanceType = null;
        String zone = null;
        OffsetDateTime timestamp = null;
        V1CloudSpotPrice response = api.v1CloudInstanceSpotPriceGet(cloudType, instanceType, zone, timestamp);

        // TODO: test validations
    }
    /**
     * Returns the cloud storage rate
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudStorageRateTest() throws Exception {
        String cloud = null;
        String type = null;
        String region = null;
        Integer maxDiskType = null;
        V1CloudCost response = api.v1CloudStorageRate(cloud, type, region, maxDiskType);

        // TODO: test validations
    }
    /**
     * validates aws cloud watch credentials
     *
     * Validates aws cloud watch credentials
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CloudsAwsCloudWatchValidateTest() throws Exception {
        V1CloudWatchConfig body = null;
        api.v1CloudsAwsCloudWatchValidate(body);

        // TODO: test validations
    }
    /**
     * Create cluster backup settings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureBackupCreateTest() throws Exception {
        String uid = null;
        V1ClusterBackupConfig body = null;
        V1Uid response = api.v1ClusterFeatureBackupCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Delete cluster backup
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureBackupDeleteTest() throws Exception {
        String uid = null;
        String backupName = null;
        String requestUid = null;
        api.v1ClusterFeatureBackupDelete(uid, backupName, requestUid);

        // TODO: test validations
    }
    /**
     * Returns the cluster backup result
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureBackupGetTest() throws Exception {
        String uid = null;
        String backupRequestUid = null;
        V1ClusterBackup response = api.v1ClusterFeatureBackupGet(uid, backupRequestUid);

        // TODO: test validations
    }
    /**
     * Change cluster backup location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureBackupLocationUidChangeTest() throws Exception {
        String uid = null;
        V1ClusterBackupLocationType body = null;
        api.v1ClusterFeatureBackupLocationUidChange(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the cluster object references based on locationUid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureBackupLocationUidGetTest() throws Exception {
        String uid = null;
        V1ClusterRefs response = api.v1ClusterFeatureBackupLocationUidGet(uid);

        // TODO: test validations
    }
    /**
     * Create on demand cluster backup
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureBackupOnDemandCreateTest() throws Exception {
        String uid = null;
        V1ClusterBackupConfig body = null;
        V1Uid response = api.v1ClusterFeatureBackupOnDemandCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Reset cluster backup schedule settings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureBackupScheduleResetTest() throws Exception {
        String uid = null;
        api.v1ClusterFeatureBackupScheduleReset(uid);

        // TODO: test validations
    }
    /**
     * Update cluster backup settings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureBackupUpdateTest() throws Exception {
        String uid = null;
        V1ClusterBackupConfig body = null;
        api.v1ClusterFeatureBackupUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Create cluster compliance scan
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureComplianceScanCreateTest() throws Exception {
        String uid = null;
        V1ClusterComplianceScheduleConfig body = null;
        V1Uid response = api.v1ClusterFeatureComplianceScanCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the compliance scan of cluster, if driverType is provided then specific status of driverType will be returned
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureComplianceScanGetTest() throws Exception {
        String uid = null;
        V1ClusterComplianceScan response = api.v1ClusterFeatureComplianceScanGet(uid);

        // TODO: test validations
    }
    /**
     * Delete the compliance scan log by uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureComplianceScanLogDeleteTest() throws Exception {
        String uid = null;
        String logUid = null;
        api.v1ClusterFeatureComplianceScanLogDelete(uid, logUid);

        // TODO: test validations
    }
    /**
     * Returns the compliance scan log by cluster uid and driver type
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureComplianceScanLogsGetTest() throws Exception {
        String uid = null;
        V1ClusterComplianceScanLogs response = api.v1ClusterFeatureComplianceScanLogsGet(uid);

        // TODO: test validations
    }
    /**
     * Create on demand cluster compliance scan
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureComplianceScanOnDemandCreateTest() throws Exception {
        String uid = null;
        V1ClusterComplianceOnDemandConfig body = null;
        V1Uid response = api.v1ClusterFeatureComplianceScanOnDemandCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Update cluster compliance scan settings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureComplianceScanUpdateTest() throws Exception {
        String uid = null;
        V1ClusterComplianceScheduleConfig body = null;
        api.v1ClusterFeatureComplianceScanUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Downloads the driver cluster logs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureDriverLogDownloadTest() throws Exception {
        String uid = null;
        String logUid = null;
        String driver = null;
        String fileFormat = null;
        File response = api.v1ClusterFeatureDriverLogDownload(uid, logUid, driver, fileFormat);

        // TODO: test validations
    }
    /**
     * Get the installed helm charts of a specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureHelmChartsGetTest() throws Exception {
        String uid = null;
        V1ClusterHelmCharts response = api.v1ClusterFeatureHelmChartsGet(uid);

        // TODO: test validations
    }
    /**
     * Returns the KubeBench compliance scan log by uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureKubeBenchLogGetTest() throws Exception {
        String uid = null;
        String logUid = null;
        String reportId = null;
        V1ClusterScanLogKubeBench response = api.v1ClusterFeatureKubeBenchLogGet(uid, logUid, reportId);

        // TODO: test validations
    }
    /**
     * Returns the KubeHunter compliance scan log by uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureKubeHunterLogGetTest() throws Exception {
        String uid = null;
        String logUid = null;
        String reportId = null;
        V1ClusterScanLogKubeHunter response = api.v1ClusterFeatureKubeHunterLogGet(uid, logUid, reportId);

        // TODO: test validations
    }
    /**
     * Create the log fetcher for cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureLogFetcherCreateTest() throws Exception {
        String uid = null;
        V1ClusterLogFetcherRequest body = null;
        V1Uid response = api.v1ClusterFeatureLogFetcherCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Get the log fetcher for cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureLogFetcherGetTest() throws Exception {
        String uid = null;
        String requestId = null;
        V1ClusterLogFetcher response = api.v1ClusterFeatureLogFetcherGet(uid, requestId);

        // TODO: test validations
    }
    /**
     * Download log fetcher logs for cluster by log fetcher uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureLogFetcherLogDownloadTest() throws Exception {
        String uid = null;
        String fileName = null;
        File response = api.v1ClusterFeatureLogFetcherLogDownload(uid, fileName);

        // TODO: test validations
    }
    /**
     * Update log fetcher logs by log fetcher uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureLogFetcherLogUpdateTest() throws Exception {
        String uid = null;
        File fileName = null;
        String requestId = null;
        api.v1ClusterFeatureLogFetcherLogUpdate(uid, fileName, requestId);

        // TODO: test validations
    }
    /**
     * Get the installed manifests of a specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureManifestsGetTest() throws Exception {
        String uid = null;
        V1ClusterManifests response = api.v1ClusterFeatureManifestsGet(uid);

        // TODO: test validations
    }
    /**
     * Returns the cluster restore of cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureRestoreGetTest() throws Exception {
        String uid = null;
        String restoreRequestUid = null;
        V1ClusterRestore response = api.v1ClusterFeatureRestoreGet(uid, restoreRequestUid);

        // TODO: test validations
    }
    /**
     * Create on demand cluster restore
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureRestoreOnDemandCreateTest() throws Exception {
        String uid = null;
        V1ClusterRestoreConfig body = null;
        V1Uid response = api.v1ClusterFeatureRestoreOnDemandCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the KubeBench compliance scan log by uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureScanKubeBenchLogUpdateTest() throws Exception {
        String uid = null;
        V1KubeBenchEntity body = null;
        api.v1ClusterFeatureScanKubeBenchLogUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the KubeHunter compliance scan log by uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureScanKubeHunterLogUpdateTest() throws Exception {
        String uid = null;
        V1KubeHunterEntity body = null;
        api.v1ClusterFeatureScanKubeHunterLogUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the Sonobuoy compliance scan log by uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureScanSonobuoyLogUpdateTest() throws Exception {
        String uid = null;
        V1SonobuoyEntity body = null;
        api.v1ClusterFeatureScanSonobuoyLogUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the Syft compliance scan log by uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureScanSyftLogUpdateTest() throws Exception {
        String uid = null;
        V1SyftEntity body = null;
        api.v1ClusterFeatureScanSyftLogUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the Sonobuoy compliance scan log by uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureSonobuoyLogGetTest() throws Exception {
        String uid = null;
        String logUid = null;
        String reportId = null;
        V1ClusterScanLogSonobuoy response = api.v1ClusterFeatureSonobuoyLogGet(uid, logUid, reportId);

        // TODO: test validations
    }
    /**
     * Returns the Syft compliance scan log by uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterFeatureSyftLogGetTest() throws Exception {
        String uid = null;
        String logUid = null;
        V1ClusterScanLogSyft response = api.v1ClusterFeatureSyftLogGet(uid, logUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster summary for a given cluster group
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupUidHostClustersSummaryTest() throws Exception {
        String uid = null;
        V1SearchFilterSummarySpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1SpectroClustersSummary response = api.v1ClusterGroupUidHostClustersSummary(uid, body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster summary for a given cluster group
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupUidVirtualClustersSummaryTest() throws Exception {
        String uid = null;
        V1SearchFilterSummarySpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1SpectroClustersSummary response = api.v1ClusterGroupUidVirtualClustersSummary(uid, body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Create cluster groups
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupsCreateTest() throws Exception {
        V1ClusterGroupEntity body = null;
        V1Uid response = api.v1ClusterGroupsCreate(body);

        // TODO: test validations
    }
    /**
     * Get cluster group developer credit usage by scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupsDeveloperCreditUsageGetTest() throws Exception {
        String scope = null;
        V1ClusterGroupsDeveloperCreditUsage response = api.v1ClusterGroupsDeveloperCreditUsageGet(scope);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster groups host cluster metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupsHostClusterMetadataTest() throws Exception {
        V1ClusterGroupsHostClusterMetadata response = api.v1ClusterGroupsHostClusterMetadata();

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster groups host cluster summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupsHostClusterSummaryTest() throws Exception {
        V1ClusterGroupsHostClusterSummary response = api.v1ClusterGroupsHostClusterSummary();

        // TODO: test validations
    }
    /**
     * Deletes the specified cluster group
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupsUidDeleteTest() throws Exception {
        String uid = null;
        api.v1ClusterGroupsUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster groups
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupsUidGetTest() throws Exception {
        String uid = null;
        V1ClusterGroup response = api.v1ClusterGroupsUidGet(uid);

        // TODO: test validations
    }
    /**
     * Updates cluster reference and host cluster config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupsUidHostClusterUpdateTest() throws Exception {
        String uid = null;
        V1ClusterGroupHostClusterEntity body = null;
        api.v1ClusterGroupsUidHostClusterUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster groups meta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupsUidMetaUpdateTest() throws Exception {
        String uid = null;
        V1ObjectMeta body = null;
        api.v1ClusterGroupsUidMetaUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Validates the cluster groups name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterGroupsValidateNameTest() throws Exception {
        String name = null;
        api.v1ClusterGroupsValidateName(name);

        // TODO: test validations
    }
    /**
     * Returns available namespaces for the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterNamespacesGetTest() throws Exception {
        String uid = null;
        V1ClusterNamespaces response = api.v1ClusterNamespacesGet(uid);

        // TODO: test validations
    }
    /**
     * Deletes list of cluster profiles
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesBulkDeleteTest() throws Exception {
        V1BulkDeleteRequest body = null;
        V1BulkDeleteResponse response = api.v1ClusterProfilesBulkDelete(body);

        // TODO: test validations
    }
    /**
     * Creates a cluster profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesCreateTest() throws Exception {
        V1ClusterProfileEntity body = null;
        V1Uid response = api.v1ClusterProfilesCreate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster profiles filter summary Supported filter fields - [\&quot;profileName\&quot;, \&quot;tags\&quot;, \&quot;profileType\&quot;, \&quot;environment\&quot;] Supported sort fields - [\&quot;profileName\&quot;, \&quot;environment\&quot;, \&quot;profileType\&quot;, \&quot;creationTimestamp\&quot;, \&quot;lastModifiedTimestamp\&quot;]
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesFilterSummaryTest() throws Exception {
        V1ClusterProfilesFilterSpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1ClusterProfilesSummary response = api.v1ClusterProfilesFilterSummary(body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Imports a cluster profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesImportTest() throws Exception {
        V1ClusterProfileImportEntity body = null;
        Boolean publish = null;
        V1Uid response = api.v1ClusterProfilesImport(body, publish);

        // TODO: test validations
    }
    /**
     * Imports a cluster profile via file
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesImportFileTest() throws Exception {
        File importFile = null;
        Boolean publish = null;
        String format = null;
        V1Uid response = api.v1ClusterProfilesImportFile(importFile, publish, format);

        // TODO: test validations
    }
    /**
     * Validates cluster profile import
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesImportValidateTest() throws Exception {
        V1ClusterProfileImportEntity body = null;
        V1ClusterProfileImportEntity response = api.v1ClusterProfilesImportValidate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster profiles metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesMetadataTest() throws Exception {
        V1ClusterProfilesMetadata response = api.v1ClusterProfilesMetadata();

        // TODO: test validations
    }
    /**
     * Updates cluster profile packs ref
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesPacksRefUpdateTest() throws Exception {
        String uid = null;
        V1ClusterProfileNotificationUpdateEntity body = null;
        String notify = null;
        api.v1ClusterProfilesPacksRefUpdate(uid, body, notify);

        // TODO: test validations
    }
    /**
     * Publishes the specified cluster profile
     *
     * Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published and the draft cluster profile will be set to null in the cluster profile template. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesPublishTest() throws Exception {
        String uid = null;
        api.v1ClusterProfilesPublish(uid);

        // TODO: test validations
    }
    /**
     * Creates a clone of the specified cluster profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidCloneTest() throws Exception {
        String uid = null;
        V1ClusterProfileCloneEntity body = null;
        V1Uid response = api.v1ClusterProfilesUidClone(uid, body);

        // TODO: test validations
    }
    /**
     * Validates the cluster profile clone
     *
     * Validates the cloned cluster profile name, version and target project uid
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidCloneValidateTest() throws Exception {
        String uid = null;
        V1ClusterProfileCloneMetaInputEntity body = null;
        api.v1ClusterProfilesUidCloneValidate(uid, body);

        // TODO: test validations
    }
    /**
     * Export the specified cluster profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidExportTest() throws Exception {
        String uid = null;
        String format = null;
        File response = api.v1ClusterProfilesUidExport(uid, format);

        // TODO: test validations
    }
    /**
     * Downloads the specified cluster profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidExportTerraformTest() throws Exception {
        String uid = null;
        String format = null;
        File response = api.v1ClusterProfilesUidExportTerraform(uid, format);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster profile metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidMetadataUpdateTest() throws Exception {
        String uid = null;
        V1ProfileMetaEntity body = null;
        api.v1ClusterProfilesUidMetadataUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Adds a new pack to the specified cluster profile and returns the created pack uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksAddTest() throws Exception {
        String uid = null;
        V1PackInputEntity body = null;
        String includePackMeta = null;
        V1Uid response = api.v1ClusterProfilesUidPacksAdd(uid, body, includePackMeta);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster profile pack configuration
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksConfigGetTest() throws Exception {
        String uid = null;
        String packName = null;
        String packUid = null;
        V1ClusterProfilePackConfigList response = api.v1ClusterProfilesUidPacksConfigGet(uid, packName, packUid);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster profile packs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksGetTest() throws Exception {
        String uid = null;
        String includePackMeta = null;
        V1ClusterProfilePacksEntities response = api.v1ClusterProfilesUidPacksGet(uid, includePackMeta);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster profile pack manifests
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksManifestsGetTest() throws Exception {
        String uid = null;
        String includePackMeta = null;
        V1ClusterProfilePacksManifests response = api.v1ClusterProfilesUidPacksManifestsGet(uid, includePackMeta);

        // TODO: test validations
    }
    /**
     * Deletes the specified pack information in the cluster profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksNameDeleteTest() throws Exception {
        String uid = null;
        String packName = null;
        api.v1ClusterProfilesUidPacksNameDelete(uid, packName);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster profile pack
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksNameGetTest() throws Exception {
        String uid = null;
        String packName = null;
        V1PackRefSummaryResponse response = api.v1ClusterProfilesUidPacksNameGet(uid, packName);

        // TODO: test validations
    }
    /**
     * Adds manifest to the profiles packs and returns the added manifests uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksNameManifestsAddTest() throws Exception {
        String uid = null;
        String packName = null;
        V1ManifestInputEntity body = null;
        V1Uid response = api.v1ClusterProfilesUidPacksNameManifestsAdd(uid, packName, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified cluster profile pack manifest
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksNameManifestsUidDeleteTest() throws Exception {
        String uid = null;
        String packName = null;
        String manifestUid = null;
        api.v1ClusterProfilesUidPacksNameManifestsUidDelete(uid, packName, manifestUid);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster profile pack manifest
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksNameManifestsUidGetTest() throws Exception {
        String uid = null;
        String packName = null;
        String manifestUid = null;
        V1ManifestEntity response = api.v1ClusterProfilesUidPacksNameManifestsUidGet(uid, packName, manifestUid);

        // TODO: test validations
    }
    /**
     * Updates the specified manifest of the profile&#x27;s pack
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksNameManifestsUidUpdateTest() throws Exception {
        String uid = null;
        String packName = null;
        String manifestUid = null;
        V1ManifestInputEntity body = null;
        api.v1ClusterProfilesUidPacksNameManifestsUidUpdate(uid, packName, manifestUid, body);

        // TODO: test validations
    }
    /**
     * Updates the specified pack information in the cluster profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksNameUpdateTest() throws Exception {
        String uid = null;
        String packName = null;
        V1PackUpdateEntity body = null;
        api.v1ClusterProfilesUidPacksNameUpdate(uid, packName, body);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster profile packs resolved values
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksResolvedValuesGetTest() throws Exception {
        String uid = null;
        V1PackParamsEntity body = null;
        V1PackResolvedValues response = api.v1ClusterProfilesUidPacksResolvedValuesGet(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the associated manifests for the specified profile&#x27;s pack
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidPacksUidManifestsTest() throws Exception {
        String uid = null;
        String packName = null;
        V1ManifestEntities response = api.v1ClusterProfilesUidPacksUidManifests(uid, packName);

        // TODO: test validations
    }
    /**
     * Downloads the specified cluster profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidSpcDownloadTest() throws Exception {
        String uid = null;
        File response = api.v1ClusterProfilesUidSpcDownload(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a specified cluster profile summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidSummaryTest() throws Exception {
        String uid = null;
        V1ClusterProfileSummary response = api.v1ClusterProfilesUidSummary(uid);

        // TODO: test validations
    }
    /**
     * Validates specified cluster profile packs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesUidValidatePacksTest() throws Exception {
        String uid = null;
        V1ClusterProfileTemplateDraft body = null;
        V1ClusterProfileValidatorResponse response = api.v1ClusterProfilesUidValidatePacks(uid, body);

        // TODO: test validations
    }
    /**
     * Validates the cluster profile metadata
     *
     * Validates the cluster profile name and version
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesValidateNameVersionTest() throws Exception {
        String name = null;
        String version = null;
        api.v1ClusterProfilesValidateNameVersion(name, version);

        // TODO: test validations
    }
    /**
     * Validates cluster profile packs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterProfilesValidatePacksTest() throws Exception {
        V1ClusterProfileTemplateDraft body = null;
        V1ClusterProfileValidatorResponse response = api.v1ClusterProfilesValidatePacks(body);

        // TODO: test validations
    }
    /**
     * Returns the list of snapshots of given namespaces
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ClusterVMSnapshotsListTest() throws Exception {
        String uid = null;
        List<String> vmName = null;
        List<String> namespace = null;
        Long limit = null;
        String _continue = null;
        V1VirtualMachineSnapshotList response = api.v1ClusterVMSnapshotsList(uid, vmName, namespace, limit, _continue);

        // TODO: test validations
    }
    /**
     * Validate the specified CoxEdge account credentials
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeAccountValidateTest() throws Exception {
        V1CoxEdgeCloudAccount body = null;
        api.v1CoxEdgeAccountValidate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of default base urls
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeBaseUrlsTest() throws Exception {
        V1CoxEdgeBaseUrls response = api.v1CoxEdgeBaseUrls();

        // TODO: test validations
    }
    /**
     * Retrieves a list of environments for baseUrl and apiKey
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeEnvironmentsTest() throws Exception {
        V1CoxEdgeEnvironmentsRequest body = null;
        V1CoxEdgeEnvironments response = api.v1CoxEdgeEnvironments(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of environments for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeEnvironmentsGetTest() throws Exception {
        String cloudAccountUid = null;
        String organizationId = null;
        V1CoxEdgeEnvironments response = api.v1CoxEdgeEnvironmentsGet(cloudAccountUid, organizationId);

        // TODO: test validations
    }
    /**
     * Retrieves a list of CoxEdge instance types
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeInstanceTypesTest() throws Exception {
        String region = null;
        Double cpuGtEq = null;
        Double memoryGtEq = null;
        V1CoxEdgeInstanceTypes response = api.v1CoxEdgeInstanceTypes(region, cpuGtEq, memoryGtEq);

        // TODO: test validations
    }
    /**
     * Retrieves a list of organizations for baseUrl and apiKey
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeOrganizationsTest() throws Exception {
        V1CoxEdgeCredentials body = null;
        V1CoxEdgeOrganizations response = api.v1CoxEdgeOrganizations(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of organizations for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeOrganizationsGetTest() throws Exception {
        String cloudAccountUid = null;
        V1CoxEdgeOrganizations response = api.v1CoxEdgeOrganizationsGet(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of CoxEdge regions for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeRegionsTest() throws Exception {
        String cloudAccountUid = null;
        String service = null;
        String environment = null;
        V1CoxEdgeRegions response = api.v1CoxEdgeRegions(cloudAccountUid, service, environment);

        // TODO: test validations
    }
    /**
     * Retrieves a list of services for baseUrl and apiKey
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeServicesTest() throws Exception {
        V1CoxEdgeCredentials body = null;
        V1CoxEdgeServices response = api.v1CoxEdgeServices(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of services for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1CoxEdgeServicesGetTest() throws Exception {
        String cloudAccountUid = null;
        V1CoxEdgeServices response = api.v1CoxEdgeServicesGet(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of application deployments filter summary Supported filter fields - [\&quot;appDeploymentName\&quot;, \&quot;clusterUid\&quot;, \&quot;tags\&quot;] Supported sort fields - [\&quot;appDeploymentName\&quot;, \&quot;creationTimestamp\&quot;, \&quot;lastModifiedTimestamp\&quot;]
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardAppDeploymentsTest() throws Exception {
        V1AppDeploymentsFilterSpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1AppDeploymentsSummary response = api.v1DashboardAppDeployments(body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves a list of application profiles filter summary Supported filter fields - [\&quot;profileName\&quot;, \&quot;tags\&quot;] Supported sort fields - [\&quot;profileName\&quot;, \&quot;creationTimestamp\&quot;, \&quot;lastModifiedTimestamp\&quot;]
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardAppProfilesTest() throws Exception {
        V1AppProfilesFilterSpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1AppProfilesSummary response = api.v1DashboardAppProfiles(body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves a list of application profile metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardAppProfilesMetadataTest() throws Exception {
        V1AppProfilesMetadata response = api.v1DashboardAppProfilesMetadata();

        // TODO: test validations
    }
    /**
     * Retrieves a list of cloud accounts metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardCloudAccountsMetadataTest() throws Exception {
        String environment = null;
        V1CloudAccountsMetadata response = api.v1DashboardCloudAccountsMetadata(environment);

        // TODO: test validations
    }
    /**
     * Export the list of cluster summary with matching search filter and download as a file(csv) Supported sort fields - [\&quot;environment\&quot;, \&quot;clusterName\&quot;, \&quot;healthState\&quot;, \&quot;creationTimestamp\&quot;, \&quot;lastModifiedTimestamp\&quot;]
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardClustersSearchSummaryExportTest() throws Exception {
        V1SearchFilterSummarySpec body = null;
        String format = null;
        File response = api.v1DashboardClustersSearchSummaryExport(body, format);

        // TODO: test validations
    }
    /**
     * Export and download the list of cluster summary with matching search filter and download as a file(csv)
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardClustersSearchSummaryExportGetTest() throws Exception {
        String encodedFilter = null;
        String format = null;
        File response = api.v1DashboardClustersSearchSummaryExportGet(encodedFilter, format);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Edgehosts summary with provided search filter. Supported fields as per schema /v1/dashboard/edgehosts/search/schema
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardEdgehostsSearchTest() throws Exception {
        V1SearchFilterSummarySpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1EdgeHostsSearchSummary response = api.v1DashboardEdgehostsSearch(body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves a schema for the Edgehost search filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardEdgehostsSearchSchemaGetTest() throws Exception {
        V1SearchFilterSchemaSpec response = api.v1DashboardEdgehostsSearchSchemaGet();

        // TODO: test validations
    }
    /**
     * Retrieves a schema for the PCG search filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardPcgSearchSchemaGetTest() throws Exception {
        V1SearchFilterSchemaSpec response = api.v1DashboardPcgSearchSchemaGet();

        // TODO: test validations
    }
    /**
     * Retrieves a list of PCG summary with provided search filter. Supported fields as per schema /v1/dashboard/pcgs/search/schema
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardPcgsSearchSummaryTest() throws Exception {
        V1SearchFilterSummarySpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1PcgsSummary response = api.v1DashboardPcgsSearchSummary(body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves spectro clusters cloud cost summary information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersCostSummaryTest() throws Exception {
        V1SpectroClusterCloudCostSummarySpec body = null;
        V1ResourcesCloudCostSummary response = api.v1DashboardSpectroClustersCostSummary(body);

        // TODO: test validations
    }
    /**
     * Retrieves a supported input values for the cluster search filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersSearchInputTest() throws Exception {
        V1ClusterSearchInputSpec response = api.v1DashboardSpectroClustersSearchInput();

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workloads
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkload response = api.v1DashboardSpectroClustersUidWorkloads(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workload clusterrolebindings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsClusterRoleBindingTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkloadRoleBindings response = api.v1DashboardSpectroClustersUidWorkloadsClusterRoleBinding(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workload cronjobs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsCronJobTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkloadCronJobs response = api.v1DashboardSpectroClustersUidWorkloadsCronJob(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workload daemonsets
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsDaemonSetTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkloadDaemonSets response = api.v1DashboardSpectroClustersUidWorkloadsDaemonSet(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workload deployments
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsDeploymentTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkloadDeployments response = api.v1DashboardSpectroClustersUidWorkloadsDeployment(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workload jobs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsJobTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkloadJobs response = api.v1DashboardSpectroClustersUidWorkloadsJob(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workload namespaces
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsNamespaceTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkloadNamespaces response = api.v1DashboardSpectroClustersUidWorkloadsNamespace(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workload pods
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsPodTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkloadPods response = api.v1DashboardSpectroClustersUidWorkloadsPod(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workload rolebindings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsRoleBindingTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkloadRoleBindings response = api.v1DashboardSpectroClustersUidWorkloadsRoleBinding(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified cluster workload statefulsets
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardSpectroClustersUidWorkloadsStatefulSetTest() throws Exception {
        String uid = null;
        V1ClusterWorkloadsSpec body = null;
        V1ClusterWorkloadStatefulSets response = api.v1DashboardSpectroClustersUidWorkloadsStatefulSet(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Virtual machine enabled clusters
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardVMEnabledClustersListTest() throws Exception {
        V1VMClusters response = api.v1DashboardVMEnabledClustersList();

        // TODO: test validations
    }
    /**
     * Retrieves a list of workspace
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesListTest() throws Exception {
        V1DashboardWorkspaces response = api.v1DashboardWorkspacesList();

        // TODO: test validations
    }
    /**
     * Retrieves specified workspace clusters workload clusterrolebindings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingTest() throws Exception {
        String uid = null;
        V1WorkspaceWorkloadsSpec body = null;
        V1WorkspaceClustersWorkloadRoleBindings response = api.v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBinding(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified workspace clusters workload cronjobs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobTest() throws Exception {
        String uid = null;
        V1WorkspaceWorkloadsSpec body = null;
        V1WorkspaceClustersWorkloadCronJobs response = api.v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJob(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified workspace clusters workload daemonsets
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetTest() throws Exception {
        String uid = null;
        V1WorkspaceWorkloadsSpec body = null;
        V1WorkspaceClustersWorkloadDaemonSets response = api.v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSet(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified workspace clusters workload deployments
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentTest() throws Exception {
        String uid = null;
        V1WorkspaceWorkloadsSpec body = null;
        V1WorkspaceClustersWorkloadDeployments response = api.v1DashboardWorkspacesUidSpectroClustersWorkloadsDeployment(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified workspace clusters workload jobs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesUidSpectroClustersWorkloadsJobTest() throws Exception {
        String uid = null;
        V1WorkspaceWorkloadsSpec body = null;
        V1WorkspaceClustersWorkloadJobs response = api.v1DashboardWorkspacesUidSpectroClustersWorkloadsJob(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified workspace clusters workload namespaces
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceTest() throws Exception {
        String uid = null;
        V1WorkspaceWorkloadsSpec body = null;
        V1WorkspaceClustersWorkloadNamespaces response = api.v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespace(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified workspace clusters workload pods
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesUidSpectroClustersWorkloadsPodTest() throws Exception {
        String uid = null;
        V1WorkspaceWorkloadsSpec body = null;
        V1WorkspaceClustersWorkloadPods response = api.v1DashboardWorkspacesUidSpectroClustersWorkloadsPod(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified workspace clusters workload rolebindings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingTest() throws Exception {
        String uid = null;
        V1WorkspaceWorkloadsSpec body = null;
        V1WorkspaceClustersWorkloadRoleBindings response = api.v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBinding(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves specified workspace clusters workload statefulsets
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetTest() throws Exception {
        String uid = null;
        V1WorkspaceWorkloadsSpec body = null;
        V1WorkspaceClustersWorkloadStatefulSets response = api.v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSet(uid, body);

        // TODO: test validations
    }
    /**
     * sync data to cloud watch
     *
     * Sync data to cloud watch
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1DataSinksCloudWatchSinkTest() throws Exception {
        V1DataSinkCloudWatchConfig body = null;
        api.v1DataSinksCloudWatchSink(body);

        // TODO: test validations
    }
    /**
     * Creates a ecr registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EcrRegistriesCreateTest() throws Exception {
        V1EcrRegistry body = null;
        V1Uid response = api.v1EcrRegistriesCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified ecr registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EcrRegistriesUidDeleteTest() throws Exception {
        String uid = null;
        api.v1EcrRegistriesUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified ecr registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EcrRegistriesUidGetTest() throws Exception {
        String uid = null;
        V1EcrRegistry response = api.v1EcrRegistriesUidGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified ecr registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EcrRegistriesUidUpdateTest() throws Exception {
        String uid = null;
        V1EcrRegistry body = null;
        api.v1EcrRegistriesUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of edge host of libvirt cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeClustersHostsListTest() throws Exception {
        String uid = null;
        V1EdgeHostDevices response = api.v1EdgeClustersHostsList(uid);

        // TODO: test validations
    }
    /**
     * Update the specified edge host device host check sum
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDeviceHostCheckSumUpdateTest() throws Exception {
        String uid = null;
        V1EdgeHostDeviceHostCheckSum body = null;
        api.v1EdgeHostDeviceHostCheckSumUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the specified edge host device host pairing key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDeviceHostPairingKeyUpdateTest() throws Exception {
        String uid = null;
        V1EdgeHostDeviceHostPairingKey body = null;
        api.v1EdgeHostDeviceHostPairingKeyUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Create the edge host device
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesCreateTest() throws Exception {
        V1EdgeHostDeviceEntity body = null;
        V1Uid response = api.v1EdgeHostDevicesCreate(body);

        // TODO: test validations
    }
    /**
     * Updates the edge host health
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesHealthUpdateTest() throws Exception {
        String uid = null;
        V1EdgeHostHealth body = null;
        api.v1EdgeHostDevicesHealthUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of registered edge host devices
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesListTest() throws Exception {
        String type = null;
        V1EdgeHostDevices response = api.v1EdgeHostDevicesList(type);

        // TODO: test validations
    }
    /**
     * Registers the edge host device
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesRegisterTest() throws Exception {
        V1EdgeHostDevice body = null;
        V1EdgeHostDevice response = api.v1EdgeHostDevicesRegister(body);

        // TODO: test validations
    }
    /**
     * Associate the clusters to the edge host
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidClusterAssociateTest() throws Exception {
        String uid = null;
        V1EdgeHostClusterEntity body = null;
        api.v1EdgeHostDevicesUidClusterAssociate(uid, body);

        // TODO: test validations
    }
    /**
     * Deassociate the clusters to the edge host
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidClusterDeassociateTest() throws Exception {
        String uid = null;
        api.v1EdgeHostDevicesUidClusterDeassociate(uid);

        // TODO: test validations
    }
    /**
     * Deletes the specified edge host device
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidDeleteTest() throws Exception {
        String uid = null;
        api.v1EdgeHostDevicesUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified edge host device
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidGetTest() throws Exception {
        String uid = null;
        Boolean resolvePackValues = null;
        V1EdgeHostDevice response = api.v1EdgeHostDevicesUidGet(uid, resolvePackValues);

        // TODO: test validations
    }
    /**
     * Updates the specified edge host device meta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidMetaUpdateTest() throws Exception {
        String uid = null;
        V1EdgeHostDeviceMetaUpdateEntity body = null;
        api.v1EdgeHostDevicesUidMetaUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified edge host&#x27;s manifest
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidPackManifestsUidGetTest() throws Exception {
        String uid = null;
        String manifestUid = null;
        Boolean resolveManifestValues = null;
        V1Manifest response = api.v1EdgeHostDevicesUidPackManifestsUidGet(uid, manifestUid, resolveManifestValues);

        // TODO: test validations
    }
    /**
     * Patch update specified edge host&#x27;s packs status
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidPacksStatusPatchTest() throws Exception {
        String uid = null;
        V1SpectroClusterPacksStatusEntity body = null;
        api.v1EdgeHostDevicesUidPacksStatusPatch(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the associated profiles of a specified edge host device
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidProfilesGetTest() throws Exception {
        String uid = null;
        String includePackMeta = null;
        V1SpectroClusterProfileList response = api.v1EdgeHostDevicesUidProfilesGet(uid, includePackMeta);

        // TODO: test validations
    }
    /**
     * Associate cluster profiles to the specified edge host device
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidProfilesUpdateTest() throws Exception {
        String uid = null;
        V1SpectroClusterProfiles body = null;
        api.v1EdgeHostDevicesUidProfilesUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Download the specified edge host device spc
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidSpcDownloadTest() throws Exception {
        String uid = null;
        File response = api.v1EdgeHostDevicesUidSpcDownload(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified edge host device
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidUpdateTest() throws Exception {
        String uid = null;
        V1EdgeHostDevice body = null;
        api.v1EdgeHostDevicesUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Updates the specified edge host device vsphere properties
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostDevicesUidVspherePropertiesUpdateTest() throws Exception {
        String uid = null;
        V1EdgeHostVsphereCloudProperties body = null;
        api.v1EdgeHostDevicesUidVspherePropertiesUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of edgehosts summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostsMetadataTest() throws Exception {
        V1EdgeHostsMetadataFilter body = null;
        V1EdgeHostsMetadataSummary response = api.v1EdgeHostsMetadata(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of edge hosts metadata matching the filter condition
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeHostsMetadataQuickFilterGetTest() throws Exception {
        String type = null;
        String quickFilter = null;
        V1EdgeHostsMeta response = api.v1EdgeHostsMetadataQuickFilterGet(type, quickFilter);

        // TODO: test validations
    }
    /**
     * Retrieves a list of edge host of edge-native cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeNativeClustersHostsListTest() throws Exception {
        String uid = null;
        V1EdgeHostDevices response = api.v1EdgeNativeClustersHostsList(uid);

        // TODO: test validations
    }
    /**
     * Create the edge token
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeTokensCreateTest() throws Exception {
        V1EdgeTokenEntity body = null;
        V1Uid response = api.v1EdgeTokensCreate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of edge tokens
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeTokensListTest() throws Exception {
        V1EdgeTokens response = api.v1EdgeTokensList();

        // TODO: test validations
    }
    /**
     * Deletes the specified edge token
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeTokensUidDeleteTest() throws Exception {
        String uid = null;
        api.v1EdgeTokensUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified edge token
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeTokensUidGetTest() throws Exception {
        String uid = null;
        V1EdgeToken response = api.v1EdgeTokensUidGet(uid);

        // TODO: test validations
    }
    /**
     * Revoke or re-activate the edge token access
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeTokensUidStateTest() throws Exception {
        String uid = null;
        V1EdgeTokenActiveState body = null;
        api.v1EdgeTokensUidState(uid, body);

        // TODO: test validations
    }
    /**
     * Updates the specified edge token
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EdgeTokensUidUpdateTest() throws Exception {
        String uid = null;
        V1EdgeTokenUpdate body = null;
        api.v1EdgeTokensUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates a component event
     *
     * Creates a component event
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EventsComponentsCreateTest() throws Exception {
        V1Event body = null;
        V1Uid response = api.v1EventsComponentsCreate(body);

        // TODO: test validations
    }
    /**
     * Creates the component events in bulk
     *
     * Creates the component events in bulk
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EventsComponentsCreateBulkTest() throws Exception {
        List<V1Event> body = null;
        V1Uids response = api.v1EventsComponentsCreateBulk(body);

        // TODO: test validations
    }
    /**
     * Returns a paginated list of component events based on request parameters
     *
     * Returns a paginated list of component events based on request parameters
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EventsComponentsListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1Events response = api.v1EventsComponentsList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Delete all the components events for the specified related object
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EventsComponentsObjTypeUidDeleteTest() throws Exception {
        String objectKind = null;
        String objectUid = null;
        api.v1EventsComponentsObjTypeUidDelete(objectKind, objectUid);

        // TODO: test validations
    }
    /**
     * Returns a list of components events for the specified related object
     *
     * Returns a list of components events for the specified related object
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1EventsComponentsObjTypeUidListTest() throws Exception {
        String objectKind = null;
        String objectUid = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1Events response = api.v1EventsComponentsObjTypeUidList(objectKind, objectUid, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Returns a list of Filters
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1FiltersListTest() throws Exception {
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1FiltersSummary response = api.v1FiltersList(limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Returns a list of Filters metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1FiltersMetadataTest() throws Exception {
        String filterType = null;
        V1FiltersMetadata response = api.v1FiltersMetadata(filterType);

        // TODO: test validations
    }
    /**
     * Validate the specified GCP account credentials
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpAccountValidateTest() throws Exception {
        V1GcpCloudAccountValidateEntity body = null;
        api.v1GcpAccountValidate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of GCP zones for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpAvailabilityZonesTest() throws Exception {
        String cloudAccountUid = null;
        String project = null;
        V1GcpZones response = api.v1GcpAvailabilityZones(cloudAccountUid, project);

        // TODO: test validations
    }
    /**
     * Validate the specified GCP bucket name credentials
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpBucketNameValidateTest() throws Exception {
        V1GcpAccountNameValidateSpec body = null;
        api.v1GcpBucketNameValidate(body);

        // TODO: test validations
    }
    /**
     * Validates the image with tag
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpContainerImageValidateTest() throws Exception {
        String imagePath = null;
        String tag = null;
        api.v1GcpContainerImageValidate(imagePath, tag);

        // TODO: test validations
    }
    /**
     * Returns the Gcp image url for the specified image location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpImageUrlTest() throws Exception {
        String imageName = null;
        V1GcpImageUrlEntity response = api.v1GcpImageUrl(imageName);

        // TODO: test validations
    }
    /**
     * Retrieves a list of GCP instance types
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpInstanceTypesTest() throws Exception {
        String region = null;
        Double cpuGtEq = null;
        Double memoryGtEq = null;
        Double gpuGtEq = null;
        V1GcpInstanceTypes response = api.v1GcpInstanceTypes(region, cpuGtEq, memoryGtEq, gpuGtEq);

        // TODO: test validations
    }
    /**
     * Retrieves a list of GCP networks for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpNetworksTest() throws Exception {
        String cloudAccountUid = null;
        String region = null;
        String project = null;
        V1GcpNetworks response = api.v1GcpNetworks(cloudAccountUid, region, project);

        // TODO: test validations
    }
    /**
     * Retrieves a list of GCP projects for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpProjectsTest() throws Exception {
        String cloudAccountUid = null;
        V1GcpProjects response = api.v1GcpProjects(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of GCP regions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpRegionsTest() throws Exception {
        String cloudAccountUid = null;
        String project = null;
        V1GcpRegions response = api.v1GcpRegions(cloudAccountUid, project);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Gcp storage types
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpStorageTypesTest() throws Exception {
        String region = null;
        V1GcpStorageTypes response = api.v1GcpStorageTypes(region);

        // TODO: test validations
    }
    /**
     * Retrieves a list of GCP zones for the specified account and region
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1GcpZonesTest() throws Exception {
        String cloudAccountUid = null;
        String region = null;
        String project = null;
        V1GcpZones response = api.v1GcpZones(cloudAccountUid, region, project);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster host config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1HostClusterConfigUpdateTest() throws Exception {
        String uid = null;
        V1HostClusterConfigEntity body = null;
        api.v1HostClusterConfigUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Downloads the specified invoice report
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1InvoiceUidReportInvoicePdfTest() throws Exception {
        String tenantUid = null;
        String invoiceUid = null;
        File response = api.v1InvoiceUidReportInvoicePdf(tenantUid, invoiceUid);

        // TODO: test validations
    }
    /**
     * Downloads the specified monthly invoice report
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1InvoiceUidReportPdfTest() throws Exception {
        String tenantUid = null;
        String invoiceUid = null;
        File response = api.v1InvoiceUidReportPdf(tenantUid, invoiceUid);

        // TODO: test validations
    }
    /**
     * Downloads the specified tenant usage
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1InvoiceUidReportUsagePdfTest() throws Exception {
        String tenantUid = null;
        String invoiceUid = null;
        File response = api.v1InvoiceUidReportUsagePdf(tenantUid, invoiceUid);

        // TODO: test validations
    }
    /**
     * Returns a specified invoice
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1InvoicesUidGetTest() throws Exception {
        String tenantUid = null;
        String invoiceUid = null;
        V1Invoice response = api.v1InvoicesUidGet(tenantUid, invoiceUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of edge hosts of the libvirt cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1LibvirtClustersHostsListTest() throws Exception {
        String uid = null;
        V1EdgeHostDevices response = api.v1LibvirtClustersHostsList(uid);

        // TODO: test validations
    }
    /**
     * Check if Maas account is valid
     *
     * Returns no contents if account is valid else error.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MaasAccountValidateTest() throws Exception {
        V1MaasCloudAccount body = null;
        api.v1MaasAccountValidate(body);

        // TODO: test validations
    }
    /**
     * Get the maas azs for a given account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MaasAccountsUidAzsTest() throws Exception {
        String uid = null;
        V1MaasZones response = api.v1MaasAccountsUidAzs(uid);

        // TODO: test validations
    }
    /**
     * Get the maas domains for a given account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MaasAccountsUidDomainsTest() throws Exception {
        String uid = null;
        V1MaasDomains response = api.v1MaasAccountsUidDomains(uid);

        // TODO: test validations
    }
    /**
     * Get the maas pools for a given account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MaasAccountsUidPoolsTest() throws Exception {
        String uid = null;
        V1MaasPools response = api.v1MaasAccountsUidPools(uid);

        // TODO: test validations
    }
    /**
     * Get the maas subnets for a given account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MaasAccountsUidSubnetsTest() throws Exception {
        String uid = null;
        V1MaasSubnets response = api.v1MaasAccountsUidSubnets(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Maas domains
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MaasDomainsGetTest() throws Exception {
        String cloudAccountUid = null;
        V1MaasDomains response = api.v1MaasDomainsGet(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Maas pools for a particular account uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MaasPoolsGetTest() throws Exception {
        String cloudAccountUid = null;
        V1MaasPools response = api.v1MaasPoolsGet(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Maas subnets for a particular account uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MaasSubnetsGetTest() throws Exception {
        String cloudAccountUid = null;
        V1MaasSubnets response = api.v1MaasSubnetsGet(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Maas zones for a particular account uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MaasZonesGetTest() throws Exception {
        String cloudAccountUid = null;
        V1MaasZones response = api.v1MaasZonesGet(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of macros
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MacrosListTest() throws Exception {
        V1Macros response = api.v1MacrosList();

        // TODO: test validations
    }
    /**
     * Retrieves the list of metrics for a specified resource kind
     *
     * Returns all the metrics for a given resource kind
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MetricsListTest() throws Exception {
        String resourceKind = null;
        String metricKind = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer period = null;
        Boolean includeMasterMachines = null;
        Boolean discrete = null;
        String spectroClusterUid = null;
        V1MetricTimeSeriesList response = api.v1MetricsList(resourceKind, metricKind, startTime, endTime, period, includeMasterMachines, discrete, spectroClusterUid);

        // TODO: test validations
    }
    /**
     * Deletes the metrics of the specified resource
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MetricsUidDeleteTest() throws Exception {
        String resourceKind = null;
        String resourceUid = null;
        api.v1MetricsUidDelete(resourceKind, resourceUid);

        // TODO: test validations
    }
    /**
     * Returns the metrics for a specified resource uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1MetricsUidListTest() throws Exception {
        String resourceKind = null;
        String resourceUid = null;
        String metricKind = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer period = null;
        Boolean includeMasterMachines = null;
        Boolean discrete = null;
        V1MetricTimeSeries response = api.v1MetricsUidList(resourceKind, resourceUid, metricKind, startTime, endTime, period, includeMasterMachines, discrete);

        // TODO: test validations
    }
    /**
     * Creates a notification event
     *
     * Creates a notification event
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1NotificationsEventCreateTest() throws Exception {
        V1NotificationEvent body = null;
        V1Uid response = api.v1NotificationsEventCreate(body);

        // TODO: test validations
    }
    /**
     * Returns a paginated list of notifications based on request parameters
     *
     * Returns a paginated list of notifications based on request parameters
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1NotificationsListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1Notifications response = api.v1NotificationsList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Returns a list of notifications for the specified related object
     *
     * Returns a list of notifications for the specified related object
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1NotificationsObjTypeUidListTest() throws Exception {
        String objectKind = null;
        String objectUid = null;
        String isDone = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1Notifications response = api.v1NotificationsObjTypeUidList(objectKind, objectUid, isDone, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Updates the specified notification for the acknowledgment
     *
     * Updates the specified notification for the acknowledgment
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1NotificationsUidAckTest() throws Exception {
        String uid = null;
        api.v1NotificationsUidAck(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified notification action as done
     *
     * Updates the specified notification action as done
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1NotificationsUidDoneTest() throws Exception {
        String uid = null;
        api.v1NotificationsUidDone(uid);

        // TODO: test validations
    }
    /**
     * Returns the information of specified oci registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OciRegistriesGetTest() throws Exception {
        String uid = null;
        String clusterUid = null;
        V1OciRegistryEntity response = api.v1OciRegistriesGet(uid, clusterUid);

        // TODO: test validations
    }
    /**
     * Retrieves a oci registries summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OciRegistriesSummaryTest() throws Exception {
        V1OciRegistries response = api.v1OciRegistriesSummary();

        // TODO: test validations
    }
    /**
     * Idp authorization code callback
     *
     * Returns the Authorization token for the palette. This is called by the IDP as a callback url after IDP authenticates the user with its server.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OidcCallbackTest() throws Exception {
        String org = null;
        String code = null;
        String state = null;
        String error = null;
        String errorDescription = null;
        V1UserToken response = api.v1OidcCallback(org, code, state, error, errorDescription);

        // TODO: test validations
    }
    /**
     * Identity provider logout url for the Oidc
     *
     * Returns No Content. Works as a callback url after the IDP logout from their server.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OidcLogoutTest() throws Exception {
        String org = null;
        String state = null;
        api.v1OidcLogout(org, state);

        // TODO: test validations
    }
    /**
     * Check if OpenStack account is valid
     *
     * Returns no contents if account is valid else error.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenStackAccountValidateTest() throws Exception {
        V1OpenStackCloudAccount body = null;
        api.v1OpenStackAccountValidate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of OpenStack azs for a particular account uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenStackAzsGetTest() throws Exception {
        String cloudAccountUid = null;
        String project = null;
        String region = null;
        String domain = null;
        V1OpenStackAzs response = api.v1OpenStackAzsGet(cloudAccountUid, project, region, domain);

        // TODO: test validations
    }
    /**
     * Returns the OpenStack flavors
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenStackFlavorsGetTest() throws Exception {
        String cloudAccountUid = null;
        String project = null;
        String region = null;
        String domain = null;
        V1OpenStackFlavors response = api.v1OpenStackFlavorsGet(cloudAccountUid, project, region, domain);

        // TODO: test validations
    }
    /**
     * Returns the OpenStack keypair
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenStackKeypairsGetTest() throws Exception {
        String cloudAccountUid = null;
        String project = null;
        String region = null;
        String domain = null;
        V1OpenStackKeypairs response = api.v1OpenStackKeypairsGet(cloudAccountUid, project, region, domain);

        // TODO: test validations
    }
    /**
     * Returns the OpenStack networks
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenStackNetworksGetTest() throws Exception {
        String cloudAccountUid = null;
        String project = null;
        String region = null;
        String domain = null;
        V1OpenStackNetworks response = api.v1OpenStackNetworksGet(cloudAccountUid, project, region, domain);

        // TODO: test validations
    }
    /**
     * Returns the OpenStack projects
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenStackProjectsGetTest() throws Exception {
        String cloudAccountUid = null;
        V1OpenStackProjects response = api.v1OpenStackProjectsGet(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Returns the OpenStack regions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenStackRegionsGetTest() throws Exception {
        String cloudAccountUid = null;
        V1OpenStackRegions response = api.v1OpenStackRegionsGet(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Get the openstack azs for a given account and region
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenstackAccountsUidAzsTest() throws Exception {
        String uid = null;
        String region = null;
        String project = null;
        String domain = null;
        V1OpenStackAzs response = api.v1OpenstackAccountsUidAzs(uid, region, project, domain);

        // TODO: test validations
    }
    /**
     * Get the openstack keypairs for a given account and scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenstackAccountsUidFlavorsTest() throws Exception {
        String uid = null;
        String project = null;
        String region = null;
        String domain = null;
        V1OpenStackFlavors response = api.v1OpenstackAccountsUidFlavors(uid, project, region, domain);

        // TODO: test validations
    }
    /**
     * Get the openstack keypairs for a given account and scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenstackAccountsUidKeypairsTest() throws Exception {
        String uid = null;
        String project = null;
        String region = null;
        String domain = null;
        V1OpenStackKeypairs response = api.v1OpenstackAccountsUidKeypairs(uid, project, region, domain);

        // TODO: test validations
    }
    /**
     * Get the openstack networks for a given account and scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenstackAccountsUidNetworksTest() throws Exception {
        String uid = null;
        String project = null;
        String region = null;
        String domain = null;
        V1OpenStackNetworks response = api.v1OpenstackAccountsUidNetworks(uid, project, region, domain);

        // TODO: test validations
    }
    /**
     * Get the openstack projects for a given account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenstackAccountsUidProjectsTest() throws Exception {
        String uid = null;
        V1OpenStackProjects response = api.v1OpenstackAccountsUidProjects(uid);

        // TODO: test validations
    }
    /**
     * Get the openstack regions for a given account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OpenstackAccountsUidRegionsTest() throws Exception {
        String uid = null;
        V1OpenStackRegions response = api.v1OpenstackAccountsUidRegions(uid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of overlords owned by the tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsListTest() throws Exception {
        String name = null;
        V1Overlords response = api.v1OverlordsList(name);

        // TODO: test validations
    }
    /**
     * Returns the manifests required for the private gateway installation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsMaasManifestTest() throws Exception {
        String pairingCode = null;
        V1OverlordManifest response = api.v1OverlordsMaasManifest(pairingCode);

        // TODO: test validations
    }
    /**
     * migrate all the clusters from source overlord to target overlord
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsMigrateTest() throws Exception {
        V1OverlordMigrateEntity body = null;
        api.v1OverlordsMigrate(body);

        // TODO: test validations
    }
    /**
     * Returns the manifests required for the private gateway installation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsOpenStackManifestTest() throws Exception {
        String pairingCode = null;
        V1OverlordManifest response = api.v1OverlordsOpenStackManifest(pairingCode);

        // TODO: test validations
    }
    /**
     * Returns the pairing code for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsPairingCodeTest() throws Exception {
        String cloudType = null;
        V1PairingCode response = api.v1OverlordsPairingCode(cloudType);

        // TODO: test validations
    }
    /**
     * delete the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidDeleteTest() throws Exception {
        String uid = null;
        V1DeletedMsg response = api.v1OverlordsUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified private gateway&#x27;s for the given uid
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidGetTest() throws Exception {
        String uid = null;
        V1Overlord response = api.v1OverlordsUidGet(uid);

        // TODO: test validations
    }
    /**
     * create the maas cloudaccount for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidMaasAccountCreateTest() throws Exception {
        String uid = null;
        V1OverlordMaasAccountCreate body = null;
        V1Uid response = api.v1OverlordsUidMaasAccountCreate(uid, body);

        // TODO: test validations
    }
    /**
     * update the maas cloudaccount for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidMaasAccountUpdateTest() throws Exception {
        String uid = null;
        V1OverlordMaasAccountEntity body = null;
        api.v1OverlordsUidMaasAccountUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * validate the maas cloudaccount for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidMaasAccountValidateTest() throws Exception {
        String uid = null;
        AccountValidateBody body = null;
        api.v1OverlordsUidMaasAccountValidate(uid, body);

        // TODO: test validations
    }
    /**
     * create the maas cloud config for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidMaasCloudConfigCreateTest() throws Exception {
        String uid = null;
        V1OverlordMaasCloudConfig body = null;
        V1Uid response = api.v1OverlordsUidMaasCloudConfigCreate(uid, body);

        // TODO: test validations
    }
    /**
     * update the maas cloud config for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidMaasCloudConfigUpdateTest() throws Exception {
        String uid = null;
        V1OverlordMaasCloudConfig body = null;
        api.v1OverlordsUidMaasCloudConfigUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * update the private gateway&#x27;s metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidMetadataUpdateTest() throws Exception {
        String uid = null;
        V1ObjectMetaInputEntitySchema body = null;
        api.v1OverlordsUidMetadataUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * create the OpenStack cloudaccount for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidOpenStackAccountCreateTest() throws Exception {
        String uid = null;
        V1OverlordOpenStackAccountCreate body = null;
        V1Uid response = api.v1OverlordsUidOpenStackAccountCreate(uid, body);

        // TODO: test validations
    }
    /**
     * update the OpenStack cloudaccount for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidOpenStackAccountUpdateTest() throws Exception {
        String uid = null;
        V1OverlordOpenStackAccountEntity body = null;
        api.v1OverlordsUidOpenStackAccountUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * validate the OpenStack cloudaccount for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidOpenStackAccountValidateTest() throws Exception {
        String uid = null;
        AccountValidateBody1 body = null;
        api.v1OverlordsUidOpenStackAccountValidate(uid, body);

        // TODO: test validations
    }
    /**
     * create the OpenStack cloud config for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidOpenStackCloudConfigCreateTest() throws Exception {
        String uid = null;
        V1OverlordOpenStackCloudConfig body = null;
        V1Uid response = api.v1OverlordsUidOpenStackCloudConfigCreate(uid, body);

        // TODO: test validations
    }
    /**
     * update the OpenStack cloud config for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidOpenStackCloudConfigUpdateTest() throws Exception {
        String uid = null;
        V1OverlordOpenStackCloudConfig body = null;
        api.v1OverlordsUidOpenStackCloudConfigUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates an IP pool defintion for the sepcified private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidPoolCreateTest() throws Exception {
        String uid = null;
        V1IpPoolInputEntity body = null;
        V1Uid response = api.v1OverlordsUidPoolCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Deletes the private gateways&#x27;s specified IP Pool data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidPoolDeleteTest() throws Exception {
        String uid = null;
        String poolUid = null;
        api.v1OverlordsUidPoolDelete(uid, poolUid);

        // TODO: test validations
    }
    /**
     * Updates the private gateways&#x27;s specified IP Pool data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidPoolUpdateTest() throws Exception {
        String uid = null;
        String poolUid = null;
        V1IpPoolInputEntity body = null;
        api.v1OverlordsUidPoolUpdate(uid, poolUid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of IP Pools for the specified private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidPoolsListTest() throws Exception {
        String uid = null;
        V1IpPools response = api.v1OverlordsUidPoolsList(uid);

        // TODO: test validations
    }
    /**
     * reset the private gateway by disaaociating the private gateway&#x27;s resources
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidResetTest() throws Exception {
        String uid = null;
        V1UpdatedMsg response = api.v1OverlordsUidReset(uid);

        // TODO: test validations
    }
    /**
     * create the vSphere cloudaccount for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidVsphereAccountCreateTest() throws Exception {
        String uid = null;
        V1OverlordVsphereAccountCreate body = null;
        V1Uid response = api.v1OverlordsUidVsphereAccountCreate(uid, body);

        // TODO: test validations
    }
    /**
     * update the vSphere cloudaccount for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidVsphereAccountUpdateTest() throws Exception {
        String uid = null;
        V1OverlordVsphereAccountEntity body = null;
        api.v1OverlordsUidVsphereAccountUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * validate the vSphere cloudaccount for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidVsphereAccountValidateTest() throws Exception {
        String uid = null;
        AccountValidateBody2 body = null;
        api.v1OverlordsUidVsphereAccountValidate(uid, body);

        // TODO: test validations
    }
    /**
     * create the vSphere cloud config for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidVsphereCloudConfigCreateTest() throws Exception {
        String uid = null;
        V1OverlordVsphereCloudConfig body = null;
        V1Uid response = api.v1OverlordsUidVsphereCloudConfigCreate(uid, body);

        // TODO: test validations
    }
    /**
     * update the vSphere cloud config for the private gateway
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidVsphereCloudConfigUpdateTest() throws Exception {
        String uid = null;
        V1OverlordVsphereCloudConfig body = null;
        api.v1OverlordsUidVsphereCloudConfigUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves the vSphere computecluster resources for the specified private gateway&#x27;s account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidVsphereComputeclusterResTest() throws Exception {
        String uid = null;
        String datacenter = null;
        String computecluster = null;
        Boolean useQualifiedNetworkName = null;
        V1VsphereComputeClusterResources response = api.v1OverlordsUidVsphereComputeclusterRes(uid, datacenter, computecluster, useQualifiedNetworkName);

        // TODO: test validations
    }
    /**
     * Retrieves the vSphere datacenters &amp; datacluster for the specified private gateway&#x27;s account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsUidVsphereDatacentersTest() throws Exception {
        String uid = null;
        V1VsphereDatacenters response = api.v1OverlordsUidVsphereDatacenters(uid);

        // TODO: test validations
    }
    /**
     * Returns the manifests required for the private gateway installation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsVsphereManifestTest() throws Exception {
        String pairingCode = null;
        V1OverlordManifest response = api.v1OverlordsVsphereManifest(pairingCode);

        // TODO: test validations
    }
    /**
     * Returns overlord&#x27;s ova information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1OverlordsVsphereOvaGetTest() throws Exception {
        V1OverloadVsphereOva response = api.v1OverlordsVsphereOvaGet();

        // TODO: test validations
    }
    /**
     * Retrieves a list of packs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PacksNameRegistryUidListTest() throws Exception {
        String registryUid = null;
        String packName = null;
        String cloudType = null;
        String layer = null;
        V1PackTagEntity response = api.v1PacksNameRegistryUidList(registryUid, packName, cloudType, layer);

        // TODO: test validations
    }
    /**
     * Retrieves a list of packs based on filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PacksSearchTest() throws Exception {
        V1PacksFilterSpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1PackMetadataList response = api.v1PacksSearch(body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the packs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PacksSummaryDeleteTest() throws Exception {
        String filters = null;
        V1DeleteMeta response = api.v1PacksSummaryDelete(filters);

        // TODO: test validations
    }
    /**
     * Retrieves a list of packs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PacksSummaryListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1PackSummaries response = api.v1PacksSummaryList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Returns the specified pack
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PacksUidTest() throws Exception {
        String uid = null;
        V1PackTagEntity response = api.v1PacksUid(uid);

        // TODO: test validations
    }
    /**
     * Updates and Activates the specified user password using the password token
     *
     * Updates and Activates user password with the help of password token
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PasswordActivateTest() throws Exception {
        PasswordTokenActivateBody body = null;
        String passwordToken = null;
        api.v1PasswordActivate(body, passwordToken);

        // TODO: test validations
    }
    /**
     * Resets the user password using the password token
     *
     * Updates the new user password with the help of password token
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PasswordResetTest() throws Exception {
        PasswordTokenResetBody body = null;
        String passwordToken = null;
        api.v1PasswordReset(body, passwordToken);

        // TODO: test validations
    }
    /**
     * Creates request to reset password via email
     *
     * Creates request to reset password via email. Password reset email will be sent to the user. Sends 204 No Content.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PasswordResetRequestTest() throws Exception {
        PasswordResetBody body = null;
        api.v1PasswordResetRequest(body);

        // TODO: test validations
    }
    /**
     * Update tenant address
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PatchTenantAddressTest() throws Exception {
        String tenantUid = null;
        V1TenantAddressPatch body = null;
        api.v1PatchTenantAddress(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Update tenant emailId
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PatchTenantEmailIdTest() throws Exception {
        String tenantUid = null;
        V1TenantEmailPatch body = null;
        api.v1PatchTenantEmailId(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Returns the private gateway manifest link
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PcgSelfHostedTest() throws Exception {
        V1PcgSelfHostedParams body = null;
        V1PcgServiceKubectlCommands response = api.v1PcgSelfHosted(body);

        // TODO: test validations
    }
    /**
     * Returns the pcg ally manifest
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PcgUidAllyManifestGetTest() throws Exception {
        String uid = null;
        File response = api.v1PcgUidAllyManifestGet(uid);

        // TODO: test validations
    }
    /**
     * Returns the pcg jet manifest
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PcgUidJetManifestGetTest() throws Exception {
        String uid = null;
        File response = api.v1PcgUidJetManifestGet(uid);

        // TODO: test validations
    }
    /**
     * Registers the pcg
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PcgUidRegisterTest() throws Exception {
        String uid = null;
        V1PairingCode body = null;
        api.v1PcgUidRegister(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of permissions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1PermissionsListTest() throws Exception {
        String scope = null;
        V1Permissions response = api.v1PermissionsList(scope);

        // TODO: test validations
    }
    /**
     * Update project clusters fips setting
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectClusterFipsSettingUpdateTest() throws Exception {
        String uid = null;
        V1FipsConfig body = null;
        api.v1ProjectClusterFipsSettingUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Get project cluster settings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectClusterSettingsGetTest() throws Exception {
        String uid = null;
        V1ProjectClusterSettings response = api.v1ProjectClusterSettingsGet(uid);

        // TODO: test validations
    }
    /**
     * Update project clusters nodes auto remediation setting
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectClustersNodesAutoRemediationSettingUpdateTest() throws Exception {
        String uid = null;
        V1NodesAutoRemediationSettings body = null;
        api.v1ProjectClustersNodesAutoRemediationSettingUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of supported alerts for a project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsAlertsTest() throws Exception {
        V1ProjectAlertComponents response = api.v1ProjectsAlerts();

        // TODO: test validations
    }
    /**
     * Creates a project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsCreateTest() throws Exception {
        V1ProjectEntity body = null;
        V1Uid response = api.v1ProjectsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsFilterSummaryTest() throws Exception {
        V1ProjectsFilterSpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1ProjectsSummary response = api.v1ProjectsFilterSummary(body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves a list of projects metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsMetadataTest() throws Exception {
        String name = null;
        V1ProjectsMetadata response = api.v1ProjectsMetadata(name);

        // TODO: test validations
    }
    /**
     * Create the specified alert to the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidAlertCreateTest() throws Exception {
        String uid = null;
        String component = null;
        V1Channel body = null;
        V1Uid response = api.v1ProjectsUidAlertCreate(uid, component, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified alert to the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidAlertDeleteTest() throws Exception {
        String uid = null;
        String component = null;
        api.v1ProjectsUidAlertDelete(uid, component);

        // TODO: test validations
    }
    /**
     * Upsert the specified alert to the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidAlertUpdateTest() throws Exception {
        String uid = null;
        String component = null;
        V1AlertEntity body = null;
        api.v1ProjectsUidAlertUpdate(uid, component, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified alert of the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidAlertsUidDeleteTest() throws Exception {
        String uid = null;
        String component = null;
        String alertUid = null;
        api.v1ProjectsUidAlertsUidDelete(uid, component, alertUid);

        // TODO: test validations
    }
    /**
     * Get the specified alert of the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidAlertsUidGetTest() throws Exception {
        String uid = null;
        String component = null;
        String alertUid = null;
        V1Channel response = api.v1ProjectsUidAlertsUidGet(uid, component, alertUid);

        // TODO: test validations
    }
    /**
     * Update the specified alert of the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidAlertsUidUpdateTest() throws Exception {
        String uid = null;
        String component = null;
        String alertUid = null;
        V1Channel body = null;
        api.v1ProjectsUidAlertsUidUpdate(uid, component, alertUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidDeleteTest() throws Exception {
        String uid = null;
        V1ProjectCleanup body = null;
        Boolean cleanupProjectResources = null;
        api.v1ProjectsUidDelete(uid, body, cleanupProjectResources);

        // TODO: test validations
    }
    /**
     * Returns the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidGetTest() throws Exception {
        String uid = null;
        V1Project response = api.v1ProjectsUidGet(uid);

        // TODO: test validations
    }
    /**
     * Create or add new macros for the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidMacrosCreateTest() throws Exception {
        String uid = null;
        V1Macros body = null;
        api.v1ProjectsUidMacrosCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Delete the macros for the specified project by macro name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidMacrosDeleteByMacroNameTest() throws Exception {
        String uid = null;
        V1Macros body = null;
        api.v1ProjectsUidMacrosDeleteByMacroName(uid, body);

        // TODO: test validations
    }
    /**
     * List the macros of the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidMacrosListTest() throws Exception {
        String uid = null;
        V1Macros response = api.v1ProjectsUidMacrosList(uid);

        // TODO: test validations
    }
    /**
     * Update the macros of the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidMacrosUpdateTest() throws Exception {
        String uid = null;
        V1Macros body = null;
        api.v1ProjectsUidMacrosUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the macros for the specified project by macro name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidMacrosUpdateByMacroNameTest() throws Exception {
        String uid = null;
        V1Macros body = null;
        api.v1ProjectsUidMacrosUpdateByMacroName(uid, body);

        // TODO: test validations
    }
    /**
     * Update the metadata of the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidMetaUpdateTest() throws Exception {
        String uid = null;
        V1ObjectMeta body = null;
        api.v1ProjectsUidMetaUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the teams association to the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidTeamsUpdateTest() throws Exception {
        String uid = null;
        V1ProjectTeamsEntity body = null;
        api.v1ProjectsUidTeamsUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Updates the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidUpdateTest() throws Exception {
        String uid = null;
        V1ProjectEntity body = null;
        api.v1ProjectsUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the users association to the specified project
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidUsersUpdateTest() throws Exception {
        String uid = null;
        V1ProjectUsersEntity body = null;
        api.v1ProjectsUidUsersUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Validate and returns active resource of project before delete
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ProjectsUidValidateTest() throws Exception {
        String uid = null;
        V1ProjectActiveResources response = api.v1ProjectsUidValidate(uid);

        // TODO: test validations
    }
    /**
     * Get all rate config for public and private cloud
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RateConfigGetTest() throws Exception {
        String tenantUid = null;
        V1RateConfig response = api.v1RateConfigGet(tenantUid);

        // TODO: test validations
    }
    /**
     * updates the rate config for public and private cloud
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RateConfigUpdateTest() throws Exception {
        String tenantUid = null;
        V1RateConfig body = null;
        api.v1RateConfigUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Creates a helm registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesHelmCreateTest() throws Exception {
        V1HelmRegistryEntity body = null;
        String scope = null;
        V1Uid response = api.v1RegistriesHelmCreate(body, scope);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Helm registries
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesHelmListTest() throws Exception {
        String scope = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1HelmRegistries response = api.v1RegistriesHelmList(scope, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves a list of helm registries as summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesHelmSummaryListTest() throws Exception {
        String scope = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1HelmRegistriesSummary response = api.v1RegistriesHelmSummaryList(scope, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified helm registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesHelmUidDeleteTest() throws Exception {
        String uid = null;
        api.v1RegistriesHelmUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified Helm registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesHelmUidGetTest() throws Exception {
        String uid = null;
        V1HelmRegistry response = api.v1RegistriesHelmUidGet(uid);

        // TODO: test validations
    }
    /**
     * Sync Helm registry
     *
     * Sync all the helm charts from the registry
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesHelmUidSyncTest() throws Exception {
        String uid = null;
        api.v1RegistriesHelmUidSync(uid);

        // TODO: test validations
    }
    /**
     * Get helm registry sync status
     *
     * Get the sync status for the specified helm registry
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesHelmUidSyncStatusTest() throws Exception {
        String uid = null;
        V1RegistrySyncStatus response = api.v1RegistriesHelmUidSyncStatus(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified helm registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesHelmUidUpdateTest() throws Exception {
        String uid = null;
        V1HelmRegistry body = null;
        api.v1RegistriesHelmUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Check if helm registry is valid
     *
     * Returns no contents if helm registry is valid else error.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesHelmValidateTest() throws Exception {
        V1HelmRegistrySpec body = null;
        api.v1RegistriesHelmValidate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of registries metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesMetadataTest() throws Exception {
        String scope = null;
        V1RegistriesMetadata response = api.v1RegistriesMetadata(scope);

        // TODO: test validations
    }
    /**
     * Returns the specified system scope registry configuration
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesNameConfigGetTest() throws Exception {
        String registryName = null;
        V1RegistryConfigEntity response = api.v1RegistriesNameConfigGet(registryName);

        // TODO: test validations
    }
    /**
     * Creates a pack registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesPackCreateTest() throws Exception {
        V1PackRegistry body = null;
        String scope = null;
        Boolean skipPackSync = null;
        V1Uid response = api.v1RegistriesPackCreate(body, scope, skipPackSync);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Pack registries
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesPackListTest() throws Exception {
        String scope = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1PackRegistries response = api.v1RegistriesPackList(scope, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves a list of pack registries as summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesPackSummaryListTest() throws Exception {
        String scope = null;
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1PackRegistriesSummary response = api.v1RegistriesPackSummaryList(scope, fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified pack registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesPackUidDeleteTest() throws Exception {
        String uid = null;
        api.v1RegistriesPackUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified Pack registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesPackUidGetTest() throws Exception {
        String uid = null;
        V1PackRegistry response = api.v1RegistriesPackUidGet(uid);

        // TODO: test validations
    }
    /**
     * Sync Pack registry
     *
     * Sync all the packs from the registry
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesPackUidSyncTest() throws Exception {
        String uid = null;
        api.v1RegistriesPackUidSync(uid);

        // TODO: test validations
    }
    /**
     * Get pack registry sync status
     *
     * Get sync status for the pack specified registry
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesPackUidSyncStatusTest() throws Exception {
        String uid = null;
        V1RegistrySyncStatus response = api.v1RegistriesPackUidSyncStatus(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified pack registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesPackUidUpdateTest() throws Exception {
        String uid = null;
        V1PackRegistry body = null;
        api.v1RegistriesPackUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Check if pack registry is valid
     *
     * Returns no contents if pack registry is valid else error.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesPackValidateTest() throws Exception {
        V1PackRegistrySpec body = null;
        api.v1RegistriesPackValidate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified registry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RegistriesUidDeleteTest() throws Exception {
        String uid = null;
        api.v1RegistriesUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Clone the role
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RolesCloneTest() throws Exception {
        String uid = null;
        V1RoleClone body = null;
        V1Uid response = api.v1RolesClone(uid, body);

        // TODO: test validations
    }
    /**
     * Creates a role with specified permissions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RolesCreateTest() throws Exception {
        V1Role body = null;
        V1Uid response = api.v1RolesCreate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of roles
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RolesListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1Roles response = api.v1RolesList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Deletes the specified role
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RolesUidDeleteTest() throws Exception {
        String uid = null;
        api.v1RolesUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified role
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RolesUidGetTest() throws Exception {
        String uid = null;
        V1Role response = api.v1RolesUidGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified role
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1RolesUidUpdateTest() throws Exception {
        String uid = null;
        V1Role body = null;
        api.v1RolesUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Identity provider callback url for the SMAL authentication
     *
     * Returns the Authorization token for the palette. This is called by the SAML based IDP as a callback url after IDP authenticates the user with its server.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SamlCallbackTest() throws Exception {
        String org = null;
        String saMLResponse = null;
        String relayState = null;
        String authToken = null;
        V1UserToken response = api.v1SamlCallback(org, saMLResponse, relayState, authToken);

        // TODO: test validations
    }
    /**
     * Identity provider logout url for the SMAL
     *
     * Returns No Content. Works as a callback url after the IDP logout from their server.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SamlLogoutTest() throws Exception {
        String org = null;
        String saMLResponse = null;
        String authToken = null;
        api.v1SamlLogout(org, saMLResponse, authToken);

        // TODO: test validations
    }
    /**
     * Returns a service manifest for a given service name and version
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ServiceManifestGetTest() throws Exception {
        String serviceName = null;
        String version = null;
        String action = null;
        String resourceFilename = null;
        String clusterUid = null;
        String edgeHostUid = null;
        V1ServiceManifest response = api.v1ServiceManifestGet(serviceName, version, action, resourceFilename, clusterUid, edgeHostUid);

        // TODO: test validations
    }
    /**
     * Returns a latest version for a given service name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1ServiceVersionGetTest() throws Exception {
        String serviceName = null;
        String clusterUid = null;
        String edgeHostUid = null;
        V1ServiceVersion response = api.v1ServiceVersionGet(serviceName, clusterUid, edgeHostUid);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAgentsNotifyTest() throws Exception {
        String messageKey = null;
        V1SpectroClustersAgentsNotifyEntity body = null;
        api.v1SpectroClustersAgentsNotify(messageKey, body);

        // TODO: test validations
    }
    /**
     * Creates an AKS cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAksCreateTest() throws Exception {
        V1SpectroAzureClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersAksCreate(body);

        // TODO: test validations
    }
    /**
     * Get AKS cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAksRateTest() throws Exception {
        V1SpectroAzureClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersAksRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates AKS cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAksValidateTest() throws Exception {
        V1SpectroAzureClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersAksValidate(body);

        // TODO: test validations
    }
    /**
     * Creates an AWS cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAwsCreateTest() throws Exception {
        V1SpectroAwsClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersAwsCreate(body);

        // TODO: test validations
    }
    /**
     * Imports an AWS cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAwsImportTest() throws Exception {
        V1SpectroAwsClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersAwsImport(body);

        // TODO: test validations
    }
    /**
     * Get AWS cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAwsRateTest() throws Exception {
        V1SpectroAwsClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersAwsRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates AWS cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAwsValidateTest() throws Exception {
        V1SpectroAwsClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersAwsValidate(body);

        // TODO: test validations
    }
    /**
     * Creates an Azure cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAzureCreateTest() throws Exception {
        V1SpectroAzureClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersAzureCreate(body);

        // TODO: test validations
    }
    /**
     * Imports an Azure cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAzureImportTest() throws Exception {
        V1SpectroAzureClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersAzureImport(body);

        // TODO: test validations
    }
    /**
     * Get Azure cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAzureRateTest() throws Exception {
        V1SpectroAzureClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersAzureRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates Azure cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersAzureValidateTest() throws Exception {
        V1SpectroAzureClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersAzureValidate(body);

        // TODO: test validations
    }
    /**
     * Sets the cluster master nodes Kubernetes certificates for renewal
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersCertificatesRenewTest() throws Exception {
        String uid = null;
        api.v1SpectroClustersCertificatesRenew(uid);

        // TODO: test validations
    }
    /**
     * Deprecated. Get the cluster RBAC information associated with a cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersClusterRbacTest() throws Exception {
        String uid = null;
        V1ClusterRbacs response = api.v1SpectroClustersClusterRbac(uid);

        // TODO: test validations
    }
    /**
     * Cluster configuration for the edge installer
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersConfigEdgeInstallerTest() throws Exception {
        V1ClusterEdgeInstallerConfig response = api.v1SpectroClustersConfigEdgeInstaller();

        // TODO: test validations
    }
    /**
     * Creates a CoxEdge cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersCoxEdgeCreateTest() throws Exception {
        V1SpectroCoxEdgeClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersCoxEdgeCreate(body);

        // TODO: test validations
    }
    /**
     * Get Cox Edge cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersCoxEdgeRateTest() throws Exception {
        V1SpectroCoxEdgeClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersCoxEdgeRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates Cox Edge cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersCoxEdgeValidateTest() throws Exception {
        V1SpectroCoxEdgeClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersCoxEdgeValidate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersDeleteTest() throws Exception {
        String uid = null;
        Boolean forceDelete = null;
        api.v1SpectroClustersDelete(uid, forceDelete);

        // TODO: test validations
    }
    /**
     * Remove cluster profiles from the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersDeleteProfilesTest() throws Exception {
        String uid = null;
        V1SpectroClusterProfilesDeleteEntity body = null;
        api.v1SpectroClustersDeleteProfiles(uid, body);

        // TODO: test validations
    }
    /**
     * Creates a Edge cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEdgeCreateTest() throws Exception {
        V1SpectroEdgeClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersEdgeCreate(body);

        // TODO: test validations
    }
    /**
     * Imports an Edge cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEdgeImportTest() throws Exception {
        V1SpectroEdgeClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersEdgeImport(body);

        // TODO: test validations
    }
    /**
     * Creates an EdgeNative cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEdgeNativeCreateTest() throws Exception {
        V1SpectroEdgeNativeClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersEdgeNativeCreate(body);

        // TODO: test validations
    }
    /**
     * Imports an EdgeNative cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEdgeNativeImportTest() throws Exception {
        V1SpectroEdgeNativeClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersEdgeNativeImport(body);

        // TODO: test validations
    }
    /**
     * Get edge-native cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEdgeNativeRateTest() throws Exception {
        V1SpectroEdgeNativeClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersEdgeNativeRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates edge-native cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEdgeNativeValidateTest() throws Exception {
        V1SpectroEdgeNativeClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersEdgeNativeValidate(body);

        // TODO: test validations
    }
    /**
     * Get edge cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEdgeRateTest() throws Exception {
        V1SpectroEdgeClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersEdgeRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates edge cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEdgeValidateTest() throws Exception {
        V1SpectroEdgeClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersEdgeValidate(body);

        // TODO: test validations
    }
    /**
     * Creates an EKS cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEksCreateTest() throws Exception {
        V1SpectroEksClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersEksCreate(body);

        // TODO: test validations
    }
    /**
     * Get EKS cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEksRateTest() throws Exception {
        V1SpectroEksClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersEksRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates EKS cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersEksValidateTest() throws Exception {
        V1SpectroEksClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersEksValidate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of running, non rbac configured clusters in a workspace
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersFiltersWorkspaceTest() throws Exception {
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1SpectroClustersSummary response = api.v1SpectroClustersFiltersWorkspace(limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Creates a GCP cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGcpCreateTest() throws Exception {
        V1SpectroGcpClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersGcpCreate(body);

        // TODO: test validations
    }
    /**
     * Imports a GCP cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGcpImportTest() throws Exception {
        V1SpectroGcpClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersGcpImport(body);

        // TODO: test validations
    }
    /**
     * Get GCP cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGcpRateTest() throws Exception {
        V1SpectroGcpClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersGcpRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates GCP cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGcpValidateTest() throws Exception {
        V1SpectroGcpClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersGcpValidate(body);

        // TODO: test validations
    }
    /**
     * Imports a cluster of any cloud type in generic way
     *
     * The machines information will be captured, whereas the cloud specific configuration info will not be retrieved
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGenericImportTest() throws Exception {
        V1SpectroGenericClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersGenericImport(body);

        // TODO: test validations
    }
    /**
     * Get generic cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGenericRateTest() throws Exception {
        V1SpectroGenericClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersGenericRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGetTest() throws Exception {
        String uid = null;
        String includeTags = null;
        Boolean resolvePackValues = null;
        String includePackMeta = null;
        String profileType = null;
        Boolean includeNonSpectroLabels = null;
        V1SpectroCluster response = api.v1SpectroClustersGet(uid, includeTags, resolvePackValues, includePackMeta, profileType, includeNonSpectroLabels);

        // TODO: test validations
    }
    /**
     * Returns the profile updates of a specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGetProfileUpdatesTest() throws Exception {
        String uid = null;
        V1SpectroClusterProfileUpdates response = api.v1SpectroClustersGetProfileUpdates(uid);

        // TODO: test validations
    }
    /**
     * Returns the associated profiles of a specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGetProfilesTest() throws Exception {
        String uid = null;
        String includePackMeta = null;
        V1SpectroClusterProfileList response = api.v1SpectroClustersGetProfiles(uid, includePackMeta);

        // TODO: test validations
    }
    /**
     * Returns the associated profile&#x27;s pack manifests of a specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGetProfilesPacksManifestsTest() throws Exception {
        String uid = null;
        String includePackMeta = null;
        Boolean resolveMacros = null;
        V1SpectroClusterProfilesPacksManifests response = api.v1SpectroClustersGetProfilesPacksManifests(uid, includePackMeta, resolveMacros);

        // TODO: test validations
    }
    /**
     * Creates an GKE cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGkeCreateTest() throws Exception {
        V1SpectroGcpClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersGkeCreate(body);

        // TODO: test validations
    }
    /**
     * Get GKE cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGkeRateTest() throws Exception {
        V1SpectroGcpClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersGkeRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates GKE cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersGkeValidateTest() throws Exception {
        V1SpectroGcpClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersGkeValidate(body);

        // TODO: test validations
    }
    /**
     * Get K8Certificate for spectro cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersK8CertificateTest() throws Exception {
        String uid = null;
        V1MachineCertificates response = api.v1SpectroClustersK8Certificate(uid);

        // TODO: test validations
    }
    /**
     * Creates a Libvirt cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersLibvirtCreateTest() throws Exception {
        V1SpectroLibvirtClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersLibvirtCreate(body);

        // TODO: test validations
    }
    /**
     * Imports a libvirt cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersLibvirtImportTest() throws Exception {
        V1SpectroLibvirtClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersLibvirtImport(body);

        // TODO: test validations
    }
    /**
     * Get libvirt cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersLibvirtRateTest() throws Exception {
        V1SpectroLibvirtClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersLibvirtRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates libvirt cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersLibvirtValidateTest() throws Exception {
        V1SpectroLibvirtClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersLibvirtValidate(body);

        // TODO: test validations
    }
    /**
     * Creates a MAAS cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersMaasCreateTest() throws Exception {
        V1SpectroMaasClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersMaasCreate(body);

        // TODO: test validations
    }
    /**
     * Imports a Maas cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersMaasImportTest() throws Exception {
        V1SpectroMaasClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersMaasImport(body);

        // TODO: test validations
    }
    /**
     * Get maas cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersMaasRateTest() throws Exception {
        V1SpectroMaasClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersMaasRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates MAAS cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersMaasValidateTest() throws Exception {
        V1SpectroMaasClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersMaasValidate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersMetadataTest() throws Exception {
        V1SpectroClusterMetadataSpec body = null;
        V1SpectroClustersMetadata response = api.v1SpectroClustersMetadata(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster summary metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersMetadataGetTest() throws Exception {
        String quickFilter = null;
        V1SpectroClustersMetadata response = api.v1SpectroClustersMetadataGet(quickFilter);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster metadata with provided search filter spec Supported sort fields - [\&quot;environment\&quot;, \&quot;clusterName\&quot;, \&quot;clusterState\&quot;, \&quot;creationTimestamp\&quot;, \&quot;lastModifiedTimestamp\&quot;]
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersMetadataSearchTest() throws Exception {
        V1SearchFilterSummarySpec body = null;
        V1SpectroClustersMetadataSearch response = api.v1SpectroClustersMetadataSearch(body);

        // TODO: test validations
    }
    /**
     * Retrieves a schema for the cluster metadata search filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersMetadataSearchSchemaTest() throws Exception {
        V1SearchFilterSchemaSpec response = api.v1SpectroClustersMetadataSearchSchema();

        // TODO: test validations
    }
    /**
     * Creates a OpenStack cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersOpenStackCreateTest() throws Exception {
        V1SpectroOpenStackClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersOpenStackCreate(body);

        // TODO: test validations
    }
    /**
     * Imports an OpenStack cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersOpenStackImportTest() throws Exception {
        V1SpectroOpenStackClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersOpenStackImport(body);

        // TODO: test validations
    }
    /**
     * Get openstack cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersOpenStackRateTest() throws Exception {
        V1SpectroOpenStackClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersOpenStackRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates OpenStack cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersOpenStackValidateTest() throws Exception {
        V1SpectroOpenStackClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersOpenStackValidate(body);

        // TODO: test validations
    }
    /**
     * Updates the cluster&#x27;s pack references
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersPacksRefUpdateTest() throws Exception {
        String uid = null;
        V1ClusterNotificationUpdateEntity body = null;
        String notify = null;
        api.v1SpectroClustersPacksRefUpdate(uid, body, notify);

        // TODO: test validations
    }
    /**
     * Replaces the specified cluster profile for the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersPatchProfileTest() throws Exception {
        String uid = null;
        api.v1SpectroClustersPatchProfile(uid);

        // TODO: test validations
    }
    /**
     * Patch cluster profiles to the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersPatchProfilesTest() throws Exception {
        String uid = null;
        V1SpectroClusterProfiles body = null;
        Boolean resolveNotification = null;
        api.v1SpectroClustersPatchProfiles(uid, body, resolveNotification);

        // TODO: test validations
    }
    /**
     * Returns the associated profiles pack manifests of the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersProfilesUidPackManifestsGetTest() throws Exception {
        String uid = null;
        String profileUid = null;
        String packName = null;
        V1PackManifests response = api.v1SpectroClustersProfilesUidPackManifestsGet(uid, profileUid, packName);

        // TODO: test validations
    }
    /**
     * Updates cluster profiles pack manifests to the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersProfilesUidPackManifestsUpdateTest() throws Exception {
        String uid = null;
        String profileUid = null;
        String packName = null;
        V1ManifestRefInputEntities body = null;
        api.v1SpectroClustersProfilesUidPackManifestsUpdate(uid, profileUid, packName, body);

        // TODO: test validations
    }
    /**
     * Retrieves spectro clusters resource consumption
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersResourcesConsumptionTest() throws Exception {
        V1ResourceConsumptionSpec body = null;
        V1ResourcesConsumption response = api.v1SpectroClustersResourcesConsumption(body);

        // TODO: test validations
    }
    /**
     * Retrieves spectro clusters resources cost summary information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersResourcesCostSummaryTest() throws Exception {
        V1ResourceCostSummarySpec body = null;
        V1ResourcesCostSummary response = api.v1SpectroClustersResourcesCostSummary(body);

        // TODO: test validations
    }
    /**
     * Retrieves spectro clusters resources usage summary information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersResourcesUsageSummaryTest() throws Exception {
        V1ResourceUsageSummarySpec body = null;
        V1ResourcesUsageSummary response = api.v1SpectroClustersResourcesUsageSummary(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of cluster summary with provided search filter spec Supported sort fields - [\&quot;environment\&quot;, \&quot;clusterName\&quot;, \&quot;memoryUsage\&quot;, \&quot;healthState\&quot;, \&quot;creationTimestamp\&quot;, \&quot;lastModifiedTimestamp\&quot;]
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersSearchFilterSummaryTest() throws Exception {
        V1SearchFilterSummarySpec body = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1SpectroClustersSummary response = api.v1SpectroClustersSearchFilterSummary(body, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves a schema for the cluster search filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersSearchSchemaTest() throws Exception {
        V1SearchFilterSchemaSpec response = api.v1SpectroClustersSearchSchema();

        // TODO: test validations
    }
    /**
     * Returns the specified cluster summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersSummaryUidTest() throws Exception {
        String uid = null;
        V1SpectroClusterUidSummary response = api.v1SpectroClustersSummaryUid(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster summary overview
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersSummaryUidOverviewTest() throws Exception {
        String uid = null;
        V1SpectroClusterUidSummary response = api.v1SpectroClustersSummaryUidOverview(uid);

        // TODO: test validations
    }
    /**
     * Creates a Tke cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersTkeCreateTest() throws Exception {
        V1SpectroTencentClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersTkeCreate(body);

        // TODO: test validations
    }
    /**
     * Get TKE cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersTkeRateTest() throws Exception {
        V1SpectroTencentClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersTkeRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates TKE cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersTkeValidateTest() throws Exception {
        V1SpectroTencentClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersTkeValidate(body);

        // TODO: test validations
    }
    /**
     * Associate the assets for the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidAssetsTest() throws Exception {
        String uid = null;
        V1SpectroClusterAssetEntity body = null;
        api.v1SpectroClustersUidAssets(uid, body);

        // TODO: test validations
    }
    /**
     * Get the cluster asset doc
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidAssetsGetTest() throws Exception {
        String uid = null;
        V1SpectroClusterAssetEntity response = api.v1SpectroClustersUidAssetsGet(uid);

        // TODO: test validations
    }
    /**
     * Deprecated. Updates the specified cluster&#x27;s Cluster Role bindings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidClusterRbacUpdateTest() throws Exception {
        String uid = null;
        V1ClusterRbacEntity body = null;
        api.v1SpectroClustersUidClusterRbacUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves namespaces for the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidConfigNamespacesGetTest() throws Exception {
        String uid = null;
        V1ClusterNamespaceResources response = api.v1SpectroClustersUidConfigNamespacesGet(uid);

        // TODO: test validations
    }
    /**
     * Retrieves the specified namespace of the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidConfigNamespacesUidGetTest() throws Exception {
        String uid = null;
        String namespaceUid = null;
        V1ClusterNamespaceResource response = api.v1SpectroClustersUidConfigNamespacesUidGet(uid, namespaceUid);

        // TODO: test validations
    }
    /**
     * Updates the specified namespace of the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidConfigNamespacesUidUpdateTest() throws Exception {
        String uid = null;
        String namespaceUid = null;
        V1ClusterNamespaceResourceInputEntity body = null;
        api.v1SpectroClustersUidConfigNamespacesUidUpdate(uid, namespaceUid, body);

        // TODO: test validations
    }
    /**
     * Updates namespaces for the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidConfigNamespacesUpdateTest() throws Exception {
        String uid = null;
        V1ClusterNamespaceResourcesUpdateEntity body = null;
        api.v1SpectroClustersUidConfigNamespacesUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves RBAC information for the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidConfigRbacsGetTest() throws Exception {
        String uid = null;
        V1ClusterRbacs response = api.v1SpectroClustersUidConfigRbacsGet(uid);

        // TODO: test validations
    }
    /**
     * Retrieves the specified RBAC of the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidConfigRbacsUidGetTest() throws Exception {
        String uid = null;
        String rbacUid = null;
        V1ClusterRbac response = api.v1SpectroClustersUidConfigRbacsUidGet(uid, rbacUid);

        // TODO: test validations
    }
    /**
     * Updates the specified RBAC of the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidConfigRbacsUidUpdateTest() throws Exception {
        String uid = null;
        String rbacUid = null;
        V1ClusterRbacInputEntity body = null;
        api.v1SpectroClustersUidConfigRbacsUidUpdate(uid, rbacUid, body);

        // TODO: test validations
    }
    /**
     * Updates RBAC information for the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidConfigRbacsUpdateTest() throws Exception {
        String uid = null;
        V1ClusterRbacResourcesUpdateEntity body = null;
        api.v1SpectroClustersUidConfigRbacsUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves the specified cluster cost summary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidCostSummaryTest() throws Exception {
        String uid = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer period = null;
        V1SpectroClusterCostSummary response = api.v1SpectroClustersUidCostSummary(uid, startTime, endTime, period);

        // TODO: test validations
    }
    /**
     * Download the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidDownloadTest() throws Exception {
        String uid = null;
        File response = api.v1SpectroClustersUidDownload(uid);

        // TODO: test validations
    }
    /**
     * Deletes the cluster&#x27;s frp kube config client data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidFrpKubeConfigDeleteTest() throws Exception {
        String uid = null;
        api.v1SpectroClustersUidFrpKubeConfigDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster&#x27;s frp kube config file
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidFrpKubeConfigGetTest() throws Exception {
        String uid = null;
        File response = api.v1SpectroClustersUidFrpKubeConfigGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the cluster&#x27;s frp kube config data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidFrpKubeConfigUpdateTest() throws Exception {
        String uid = null;
        V1SpectroClusterAssetFrpKubeConfig body = null;
        api.v1SpectroClustersUidFrpKubeConfigUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster&#x27;s import manifest file
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidImportManifestTest() throws Exception {
        String uid = null;
        File response = api.v1SpectroClustersUidImportManifest(uid);

        // TODO: test validations
    }
    /**
     * Upgrade the specified imported read only cluster with full permissions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidImportUpgradePatchTest() throws Exception {
        String uid = null;
        api.v1SpectroClustersUidImportUpgradePatch(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster&#x27;s kube config file
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidKubeConfigTest() throws Exception {
        String uid = null;
        Boolean frp = null;
        File response = api.v1SpectroClustersUidKubeConfig(uid, frp);

        // TODO: test validations
    }
    /**
     * Deletes the cluster&#x27;s kube config client data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidKubeConfigClientDeleteTest() throws Exception {
        String uid = null;
        api.v1SpectroClustersUidKubeConfigClientDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster&#x27;s kube config client file
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidKubeConfigClientGetTest() throws Exception {
        String uid = null;
        File response = api.v1SpectroClustersUidKubeConfigClientGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the cluster&#x27;s kube config client data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidKubeConfigClientUpdateTest() throws Exception {
        String uid = null;
        V1SpectroClusterAssetKubeConfigClient body = null;
        api.v1SpectroClustersUidKubeConfigClientUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster&#x27;s manifest data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidKubeConfigUpdateTest() throws Exception {
        String uid = null;
        V1SpectroClusterAssetKubeConfig body = null;
        api.v1SpectroClustersUidKubeConfigUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster&#x27;s kube config file
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidKubeCtlRedirectTest() throws Exception {
        String uid = null;
        V1SpectroClusterKubeCtlRedirect response = api.v1SpectroClustersUidKubeCtlRedirect(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster Life cycle configuration
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidLifecycleConfigUpdateTest() throws Exception {
        String uid = null;
        V1LifecycleConfigEntity body = null;
        api.v1SpectroClustersUidLifecycleConfigUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Associate the assets for the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidLocationPutTest() throws Exception {
        String uid = null;
        V1SpectroClusterLocationInputEntity body = null;
        api.v1SpectroClustersUidLocationPut(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster&#x27;s manifest data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidManifestGetTest() throws Exception {
        String uid = null;
        String response = api.v1SpectroClustersUidManifestGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster&#x27;s manifest data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidManifestUpdateTest() throws Exception {
        String uid = null;
        V1SpectroClusterAssetManifest body = null;
        api.v1SpectroClustersUidManifestUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the specified spectro cluster metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidMetadataUpdateTest() throws Exception {
        String uid = null;
        V1ObjectMetaInputEntitySchema body = null;
        api.v1SpectroClustersUidMetadataUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns k8s spectrocluster oidc
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidOIDCTest() throws Exception {
        String uid = null;
        V1SpectroClusterOidcSpec response = api.v1SpectroClustersUidOIDC(uid);

        // TODO: test validations
    }
    /**
     * Returns k8s dashboard url
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidOIDCDashboardUrlTest() throws Exception {
        String uid = null;
        V1SectroClusterK8sDashboardUrl response = api.v1SpectroClustersUidOIDCDashboardUrl(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster OS patch configuration
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidOsPatchUpdateTest() throws Exception {
        String uid = null;
        V1OsPatchEntity body = null;
        api.v1SpectroClustersUidOsPatchUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster&#x27;s manifest
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidPackManifestsUidGetTest() throws Exception {
        String uid = null;
        String manifestUid = null;
        Boolean resolveManifestValues = null;
        V1Manifest response = api.v1SpectroClustersUidPackManifestsUidGet(uid, manifestUid, resolveManifestValues);

        // TODO: test validations
    }
    /**
     * Get specified cluster pack properties
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidPackPropertiesTest() throws Exception {
        String uid = null;
        String layer = null;
        String fieldPath = null;
        String name = null;
        Boolean resolveMacros = null;
        V1SpectroClusterPackProperties response = api.v1SpectroClustersUidPackProperties(uid, layer, fieldPath, name, resolveMacros);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster&#x27;s packs resolved values
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidPacksResolvedValuesGetTest() throws Exception {
        String uid = null;
        V1SpectroClusterProfilesParamReferenceEntity body = null;
        V1SpectroClusterProfilesResolvedValues response = api.v1SpectroClustersUidPacksResolvedValuesGet(uid, body);

        // TODO: test validations
    }
    /**
     * Patch update specified cluster&#x27;s packs status
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidPacksStatusPatchTest() throws Exception {
        String uid = null;
        V1SpectroClusterPacksStatusEntity body = null;
        api.v1SpectroClustersUidPacksStatusPatch(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified cluster&#x27;s profile pack configuration
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidProfilesUidPacksConfigGetTest() throws Exception {
        String uid = null;
        String profileUid = null;
        String packName = null;
        V1SpectroClusterPackConfigList response = api.v1SpectroClustersUidProfilesUidPacksConfigGet(uid, profileUid, packName);

        // TODO: test validations
    }
    /**
     * Returns the estimated rate of the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidRateTest() throws Exception {
        String uid = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersUidRate(uid, periodType);

        // TODO: test validations
    }
    /**
     * reset the cluster s by deleting machine pools and condtions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidResetTest() throws Exception {
        String uid = null;
        api.v1SpectroClustersUidReset(uid);

        // TODO: test validations
    }
    /**
     * Retrieves specified spectro cluster resource consumption
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidResourcesConsumptionTest() throws Exception {
        String uid = null;
        V1ResourceConsumptionSpec body = null;
        V1ResourcesConsumption response = api.v1SpectroClustersUidResourcesConsumption(uid, body);

        // TODO: test validations
    }
    /**
     * Set the CanBeApplied to true on the spcApply status. CanBeApplied indicates the agent to orchestrate the spc changes
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidStatusSpcApplyTest() throws Exception {
        String uid = null;
        api.v1SpectroClustersUidStatusSpcApply(uid);

        // TODO: test validations
    }
    /**
     * Returns the SPC apply information for the agent
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidStatusSpcApplyGetTest() throws Exception {
        String uid = null;
        V1SpcApply response = api.v1SpectroClustersUidStatusSpcApplyGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the agent patch time for the SPC changes
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidStatusSpcPatchTimeTest() throws Exception {
        String uid = null;
        V1SpcPatchTimeEntity body = null;
        api.v1SpectroClustersUidStatusSpcPatchTime(uid, body);

        // TODO: test validations
    }
    /**
     * Updates the cluster&#x27;s upgrade status
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidUpgradesPutTest() throws Exception {
        String uid = null;
        V1SpectroClusterUidUpgrades body = null;
        api.v1SpectroClustersUidUpgradesPut(uid, body);

        // TODO: test validations
    }
    /**
     * Validates cluster packs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidValidatePacksTest() throws Exception {
        String uid = null;
        V1SpectroClusterPacksEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersUidValidatePacks(uid, body);

        // TODO: test validations
    }
    /**
     * Sync specified cluster workload
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidWorkloadsKindSyncTest() throws Exception {
        String uid = null;
        String workloadKind = null;
        api.v1SpectroClustersUidWorkloadsKindSync(uid, workloadKind);

        // TODO: test validations
    }
    /**
     * Sync specified cluster workload
     *
     * Sync specified cluster workload
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUidWorkloadsSyncTest() throws Exception {
        String uid = null;
        api.v1SpectroClustersUidWorkloadsSync(uid);

        // TODO: test validations
    }
    /**
     * Associate cluster profiles to the specified cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUpdateProfilesTest() throws Exception {
        String uid = null;
        V1SpectroClusterProfiles body = null;
        Boolean resolveNotification = null;
        api.v1SpectroClustersUpdateProfiles(uid, body, resolveNotification);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster status condition
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUpdateStatusConditionTest() throws Exception {
        String uid = null;
        V1ClusterCondition body = null;
        api.v1SpectroClustersUpdateStatusCondition(uid, body);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster status conditions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUpdateStatusConditionsTest() throws Exception {
        String uid = null;
        List<V1ClusterCondition> body = null;
        api.v1SpectroClustersUpdateStatusConditions(uid, body);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster&#x27;s service endpoints information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUpdateStatusEndpointsTest() throws Exception {
        String uid = null;
        List<V1APIEndpoint> body = null;
        api.v1SpectroClustersUpdateStatusEndpoints(uid, body);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster status as imported
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUpdateStatusImportedTest() throws Exception {
        String uid = null;
        api.v1SpectroClustersUpdateStatusImported(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified cluster&#x27;s services information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUpdateStatusServicesTest() throws Exception {
        String uid = null;
        List<V1LoadBalancerService> body = null;
        api.v1SpectroClustersUpdateStatusServices(uid, body);

        // TODO: test validations
    }
    /**
     * Get cluster settings by context
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersUpgradeSettingsGetTest() throws Exception {
        V1ClusterUpgradeSettingsEntity response = api.v1SpectroClustersUpgradeSettingsGet();

        // TODO: test validations
    }
    /**
     * Add volume to the virtual machine instance
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMAddVolumeTest() throws Exception {
        String namespace = null;
        String uid = null;
        String vmName = null;
        V1VMAddVolumeEntity body = null;
        api.v1SpectroClustersVMAddVolume(namespace, uid, vmName, body);

        // TODO: test validations
    }
    /**
     * Clone virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMCloneTest() throws Exception {
        String namespace = null;
        String uid = null;
        String vmName = null;
        V1SpectroClusterVMCloneEntity body = null;
        V1ClusterVirtualMachine response = api.v1SpectroClustersVMClone(namespace, uid, vmName, body);

        // TODO: test validations
    }
    /**
     * Create virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMCreateTest() throws Exception {
        String namespace = null;
        String uid = null;
        V1ClusterVirtualMachine body = null;
        V1ClusterVirtualMachine response = api.v1SpectroClustersVMCreate(namespace, uid, body);

        // TODO: test validations
    }
    /**
     * Deletes the virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMDeleteTest() throws Exception {
        String uid = null;
        String vmName = null;
        String namespace = null;
        api.v1SpectroClustersVMDelete(uid, vmName, namespace);

        // TODO: test validations
    }
    /**
     * Get virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMGetTest() throws Exception {
        String uid = null;
        String vmName = null;
        String namespace = null;
        V1ClusterVirtualMachine response = api.v1SpectroClustersVMGet(uid, vmName, namespace);

        // TODO: test validations
    }
    /**
     * Returns the list of virtual machines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMListTest() throws Exception {
        String uid = null;
        List<String> namespace = null;
        Long limit = null;
        String _continue = null;
        V1ClusterVirtualMachineList response = api.v1SpectroClustersVMList(uid, namespace, limit, _continue);

        // TODO: test validations
    }
    /**
     * Migrate the virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMMigrateTest() throws Exception {
        String uid = null;
        String vmName = null;
        String namespace = null;
        api.v1SpectroClustersVMMigrate(uid, vmName, namespace);

        // TODO: test validations
    }
    /**
     * Pause the virtual machine instance
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMPauseTest() throws Exception {
        String uid = null;
        String vmName = null;
        String namespace = null;
        api.v1SpectroClustersVMPause(uid, vmName, namespace);

        // TODO: test validations
    }
    /**
     * Remove volume from the virtual machine instance
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMRemoveVolumeTest() throws Exception {
        String namespace = null;
        String uid = null;
        String vmName = null;
        V1VMRemoveVolumeEntity body = null;
        api.v1SpectroClustersVMRemoveVolume(namespace, uid, vmName, body);

        // TODO: test validations
    }
    /**
     * Restart the virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMRestartTest() throws Exception {
        String uid = null;
        String vmName = null;
        String namespace = null;
        api.v1SpectroClustersVMRestart(uid, vmName, namespace);

        // TODO: test validations
    }
    /**
     * Resume the virtual machine instance
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMResumeTest() throws Exception {
        String uid = null;
        String vmName = null;
        String namespace = null;
        api.v1SpectroClustersVMResume(uid, vmName, namespace);

        // TODO: test validations
    }
    /**
     * Start the virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMStartTest() throws Exception {
        String uid = null;
        String vmName = null;
        String namespace = null;
        api.v1SpectroClustersVMStart(uid, vmName, namespace);

        // TODO: test validations
    }
    /**
     * Stop the virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMStopTest() throws Exception {
        String uid = null;
        String vmName = null;
        String namespace = null;
        api.v1SpectroClustersVMStop(uid, vmName, namespace);

        // TODO: test validations
    }
    /**
     * Updates the specified virtual machine of the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVMUpdateTest() throws Exception {
        String namespace = null;
        String uid = null;
        String vmName = null;
        V1ClusterVirtualMachine body = null;
        V1ClusterVirtualMachine response = api.v1SpectroClustersVMUpdate(namespace, uid, vmName, body);

        // TODO: test validations
    }
    /**
     * Validates the cluster name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersValidateNameTest() throws Exception {
        String name = null;
        api.v1SpectroClustersValidateName(name);

        // TODO: test validations
    }
    /**
     * Validates spectro cluster packs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersValidatePacksTest() throws Exception {
        V1SpectroClusterPacksEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersValidatePacks(body);

        // TODO: test validations
    }
    /**
     * Creates a virtual cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVirtualCreateTest() throws Exception {
        V1SpectroVirtualClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersVirtualCreate(body);

        // TODO: test validations
    }
    /**
     * Validates virtual cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVirtualValidateTest() throws Exception {
        V1SpectroVirtualClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersVirtualValidate(body);

        // TODO: test validations
    }
    /**
     * Get the default values yaml
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVirtualValuesTest() throws Exception {
        String response = api.v1SpectroClustersVirtualValues();

        // TODO: test validations
    }
    /**
     * Creates a vSphere cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVsphereCreateTest() throws Exception {
        V1SpectroVsphereClusterEntity body = null;
        V1Uid response = api.v1SpectroClustersVsphereCreate(body);

        // TODO: test validations
    }
    /**
     * Imports a vSphere cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVsphereImportTest() throws Exception {
        V1SpectroVsphereClusterImportEntity body = null;
        V1Uid response = api.v1SpectroClustersVsphereImport(body);

        // TODO: test validations
    }
    /**
     * Get vSphere cluster estimated rate information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVsphereRateTest() throws Exception {
        V1SpectroVsphereClusterRateEntity body = null;
        String periodType = null;
        V1SpectroClusterRate response = api.v1SpectroClustersVsphereRate(body, periodType);

        // TODO: test validations
    }
    /**
     * Validates vSphere cluster create operation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SpectroClustersVsphereValidateTest() throws Exception {
        V1SpectroVsphereClusterEntity body = null;
        V1SpectroClusterValidatorResponse response = api.v1SpectroClustersVsphereValidate(body);

        // TODO: test validations
    }
    /**
     * Returns Authorization token. Works as a callback url for the system defined sso apps
     *
     * Returns Authorization token. Works as a callback url for the system defined sso apps
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SsoCallbackTest() throws Exception {
        String ssoApp = null;
        String code = null;
        String state = null;
        String error = null;
        String errorDescription = null;
        V1UserToken response = api.v1SsoCallback(ssoApp, code, state, error, errorDescription);

        // TODO: test validations
    }
    /**
     * Returns a list of predefined Identity Provider (IDP)
     *
     * Returns a list of predefined Identity Provider (IDP)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SsoIdpsTest() throws Exception {
        V1IdentityProviders response = api.v1SsoIdps();

        // TODO: test validations
    }
    /**
     * Returns a list of supported sso logins
     *
     * Returns a list of supported sso logins and their authentication mechanism
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SsoLoginsTest() throws Exception {
        String org = null;
        V1SsoLogins response = api.v1SsoLogins(org);

        // TODO: test validations
    }
    /**
     * Returns the image sbom of syft scan log of cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1SyftScanLogImageSBOMGetTest() throws Exception {
        String uid = null;
        String logUid = null;
        String image = null;
        File response = api.v1SyftScanLogImageSBOMGet(uid, logUid, image);

        // TODO: test validations
    }
    /**
     * Delete the specified Filter object
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TagFilterUidDeleteTest() throws Exception {
        String uid = null;
        api.v1TagFilterUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified Filter object
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TagFilterUidGetTest() throws Exception {
        String uid = null;
        V1TagFilterSummary response = api.v1TagFilterUidGet(uid);

        // TODO: test validations
    }
    /**
     * Updates a Tag filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TagFilterUidUpdateTest() throws Exception {
        String uid = null;
        V1TagFilter body = null;
        api.v1TagFilterUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Creates a Tag filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TagFiltersCreateTest() throws Exception {
        V1TagFilter body = null;
        V1Uid response = api.v1TagFiltersCreate(body);

        // TODO: test validations
    }
    /**
     * Creates a team with the specified users and roles
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsCreateTest() throws Exception {
        V1Team body = null;
        V1Uid response = api.v1TeamsCreate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of teams
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1Teams response = api.v1TeamsList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Returns the specified team&#x27;s project and roles data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsProjectRolesTest() throws Exception {
        String uid = null;
        V1ProjectRolesEntity response = api.v1TeamsProjectRoles(uid);

        // TODO: test validations
    }
    /**
     * Updates the projects and roles for the specified team
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsProjectRolesPutTest() throws Exception {
        V1ProjectRolesPatch body = null;
        String uid = null;
        api.v1TeamsProjectRolesPut(body, uid);

        // TODO: test validations
    }
    /**
     * Updates the resource roles for team
     *
     * Specific resource roles fo team is updated
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsResourceRolesUidUpdateTest() throws Exception {
        V1ResourceRolesUpdateEntity body = null;
        String uid = null;
        String resourceRoleUid = null;
        api.v1TeamsResourceRolesUidUpdate(body, uid, resourceRoleUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of teams summary with provided filter spec
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsSummaryGetTest() throws Exception {
        V1TeamsSummarySpec body = null;
        V1TeamsSummaryList response = api.v1TeamsSummaryGet(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified team
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsUidDeleteTest() throws Exception {
        String uid = null;
        api.v1TeamsUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the sepcified team
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsUidGetTest() throws Exception {
        String uid = null;
        V1Team response = api.v1TeamsUidGet(uid);

        // TODO: test validations
    }
    /**
     * Patches the specified team
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsUidPatchTest() throws Exception {
        List<V1HttpPatch> body = null;
        String uid = null;
        api.v1TeamsUidPatch(body, uid);

        // TODO: test validations
    }
    /**
     * Returns the specified individual and resource roles for a team
     *
     * Returns resource roles for team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsUidResourceRolesTest() throws Exception {
        String uid = null;
        V1ResourceRoles response = api.v1TeamsUidResourceRoles(uid);

        // TODO: test validations
    }
    /**
     * Add resource roles for team
     *
     * Resource roles added to specific team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsUidResourceRolesCreateTest() throws Exception {
        V1ResourceRolesUpdateEntity body = null;
        String uid = null;
        api.v1TeamsUidResourceRolesCreate(body, uid);

        // TODO: test validations
    }
    /**
     * Deleted the resource roles from team
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsUidResourceRolesUidDeleteTest() throws Exception {
        String uid = null;
        String resourceRoleUid = null;
        api.v1TeamsUidResourceRolesUidDelete(uid, resourceRoleUid);

        // TODO: test validations
    }
    /**
     * Returns the specified team&#x27;s tenant roles
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsUidTenantRolesGetTest() throws Exception {
        String uid = null;
        V1TeamTenantRolesEntity response = api.v1TeamsUidTenantRolesGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the tenant roles of the specified team
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsUidTenantRolesUpdateTest() throws Exception {
        V1TeamTenantRolesUpdate body = null;
        String uid = null;
        api.v1TeamsUidTenantRolesUpdate(body, uid);

        // TODO: test validations
    }
    /**
     * Updates the sepcified team
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsUidUpdateTest() throws Exception {
        String uid = null;
        V1Team body = null;
        api.v1TeamsUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified team&#x27;s workspaces and roles data
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsWorkspaceGetRolesTest() throws Exception {
        String teamUid = null;
        V1WorkspaceScopeRoles response = api.v1TeamsWorkspaceGetRoles(teamUid);

        // TODO: test validations
    }
    /**
     * Updates the workspace roles for the specified team
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TeamsWorkspaceRolesPutTest() throws Exception {
        V1WorkspacesRolesPatch body = null;
        String teamUid = null;
        api.v1TeamsWorkspaceRolesPut(body, teamUid);

        // TODO: test validations
    }
    /**
     * Update tenant clusters fips setting
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantClusterFipsSettingUpdateTest() throws Exception {
        String tenantUid = null;
        V1FipsConfig body = null;
        api.v1TenantClusterFipsSettingUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Get tenant cluster settings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantClusterSettingsGetTest() throws Exception {
        String tenantUid = null;
        V1TenantClusterSettings response = api.v1TenantClusterSettingsGet(tenantUid);

        // TODO: test validations
    }
    /**
     * Update tenant clusters nodes auto remediation setting
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantClustersNodesAutoRemediationSettingUpdateTest() throws Exception {
        String tenantUid = null;
        V1NodesAutoRemediationSettings body = null;
        api.v1TenantClustersNodesAutoRemediationSettingUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Get developer credit enabled for a specific tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantDeveloperCreditGetTest() throws Exception {
        String tenantUid = null;
        V1DeveloperCredit response = api.v1TenantDeveloperCreditGet(tenantUid);

        // TODO: test validations
    }
    /**
     * update developer credit for a specific tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantDeveloperCreditUpdateTest() throws Exception {
        String tenantUid = null;
        V1DeveloperCredit body = null;
        api.v1TenantDeveloperCreditUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Get tenant level freemium configuration
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantFreemiumGetTest() throws Exception {
        String tenantUid = null;
        V1TenantFreemium response = api.v1TenantFreemiumGet(tenantUid);

        // TODO: test validations
    }
    /**
     * Update tenant freemium configuration
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantFreemiumUpdateTest() throws Exception {
        String tenantUid = null;
        V1TenantFreemium body = null;
        api.v1TenantFreemiumUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Get tenant freemium usage
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantFreemiumUsageGetTest() throws Exception {
        String tenantUid = null;
        V1TenantFreemiumUsage response = api.v1TenantFreemiumUsageGet(tenantUid);

        // TODO: test validations
    }
    /**
     * Get is cluster group enabled for a specific tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantPrefClusterGroupGetTest() throws Exception {
        String tenantUid = null;
        V1TenantEnableClusterGroup response = api.v1TenantPrefClusterGroupGet(tenantUid);

        // TODO: test validations
    }
    /**
     * Enable or Disable cluster group for a specific tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantPrefClusterGroupUpdateTest() throws Exception {
        String tenantUid = null;
        V1TenantEnableClusterGroup body = null;
        api.v1TenantPrefClusterGroupUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Get tenant level resource limits configuration
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantResourceLimitsGetTest() throws Exception {
        String tenantUid = null;
        V1TenantResourceLimits response = api.v1TenantResourceLimitsGet(tenantUid);

        // TODO: test validations
    }
    /**
     * Update tenant resource limits configuration
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantResourceLimitsUpdateTest() throws Exception {
        String tenantUid = null;
        V1TenantResourceLimitsEntity body = null;
        api.v1TenantResourceLimitsUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * lists the certificates for the tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUIdAssetsCertsListTest() throws Exception {
        String tenantUid = null;
        V1TenantAssetCerts response = api.v1TenantUIdAssetsCertsList(tenantUid);

        // TODO: test validations
    }
    /**
     * create the tenant certificate
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidAssetsCertsCreateTest() throws Exception {
        String tenantUid = null;
        V1TenantAssetCert body = null;
        V1Uid response = api.v1TenantUidAssetsCertsCreate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * deletes the tenant certificate
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidAssetsCertsUidDeleteTest() throws Exception {
        String tenantUid = null;
        String certificateUid = null;
        api.v1TenantUidAssetsCertsUidDelete(tenantUid, certificateUid);

        // TODO: test validations
    }
    /**
     * Returns the ca certificate for the tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidAssetsCertsUidGetTest() throws Exception {
        String tenantUid = null;
        String certificateUid = null;
        V1TenantAssetCert response = api.v1TenantUidAssetsCertsUidGet(tenantUid, certificateUid);

        // TODO: test validations
    }
    /**
     * updates the tenant certificate
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidAssetsCertsUidUpdateTest() throws Exception {
        String tenantUid = null;
        String certificateUid = null;
        V1TenantAssetCert body = null;
        api.v1TenantUidAssetsCertsUidUpdate(tenantUid, certificateUid, body);

        // TODO: test validations
    }
    /**
     * create data sink config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidAssetsDataSinksCreateTest() throws Exception {
        String tenantUid = null;
        V1DataSinkConfig body = null;
        V1Uid response = api.v1TenantUidAssetsDataSinksCreate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * deletes the tenant data sink config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidAssetsDataSinksDeleteTest() throws Exception {
        String tenantUid = null;
        api.v1TenantUidAssetsDataSinksDelete(tenantUid);

        // TODO: test validations
    }
    /**
     * Returns data sink config of tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidAssetsDataSinksGetTest() throws Exception {
        String tenantUid = null;
        V1DataSinkConfig response = api.v1TenantUidAssetsDataSinksGet(tenantUid);

        // TODO: test validations
    }
    /**
     * updates the tenant data sink config
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidAssetsDataSinksUpdateTest() throws Exception {
        String tenantUid = null;
        V1DataSinkConfig body = null;
        api.v1TenantUidAssetsDataSinksUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * retrieves the domains for tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidDomainsGetTest() throws Exception {
        String tenantUid = null;
        V1TenantDomains response = api.v1TenantUidDomainsGet(tenantUid);

        // TODO: test validations
    }
    /**
     * creates or updates domains for tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidDomainsUpdateTest() throws Exception {
        String tenantUid = null;
        V1TenantDomains body = null;
        api.v1TenantUidDomainsUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Returns the oidc Spec for tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidOidcConfigGetTest() throws Exception {
        String tenantUid = null;
        V1TenantOidcClientSpec response = api.v1TenantUidOidcConfigGet(tenantUid);

        // TODO: test validations
    }
    /**
     * Associates the  oidc Spec for the tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidOidcConfigUpdateTest() throws Exception {
        String tenantUid = null;
        V1TenantOidcClientSpec body = null;
        api.v1TenantUidOidcConfigUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * creates or updates a password policy for tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidPasswordPolicyUpdateTest() throws Exception {
        String tenantUid = null;
        V1TenantPasswordPolicyEntity body = null;
        api.v1TenantUidPasswordPolicyUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified service provider metadata and Saml Spec for tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidSamlConfigSpecGetTest() throws Exception {
        String tenantUid = null;
        V1TenantSamlSpec response = api.v1TenantUidSamlConfigSpecGet(tenantUid);

        // TODO: test validations
    }
    /**
     * Associates the specified federation metadata for the tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidSamlConfigUpdateTest() throws Exception {
        String tenantUid = null;
        V1TenantSamlRequestSpec body = null;
        api.v1TenantUidSamlConfigUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * get sso logins for the tenants
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidSsoAuthProvidersGetTest() throws Exception {
        String tenantUid = null;
        V1TenantSsoAuthProvidersEntity response = api.v1TenantUidSsoAuthProvidersGet(tenantUid);

        // TODO: test validations
    }
    /**
     * enable sso logins for the tenants
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantUidSsoAuthProvidersUpdateTest() throws Exception {
        String tenantUid = null;
        V1TenantSsoAuthProvidersEntity body = null;
        api.v1TenantUidSsoAuthProvidersUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the aws credit account for tenants
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantsCreditAccountDeleteTest() throws Exception {
        String tenantUid = null;
        Boolean forceDelete = null;
        api.v1TenantsCreditAccountDelete(tenantUid, forceDelete);

        // TODO: test validations
    }
    /**
     * Get the credit accounts for the tenants with free tier access
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantsCreditAccountGetTest() throws Exception {
        String tenantUid = null;
        V1AwsCreditAccountEntity response = api.v1TenantsCreditAccountGet(tenantUid);

        // TODO: test validations
    }
    /**
     * Tenant to accept the contract agreement
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantsUidContractAcceptTest() throws Exception {
        String tenantUid = null;
        api.v1TenantsUidContractAccept(tenantUid);

        // TODO: test validations
    }
    /**
     * Create or add new macros for the specified tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantsUidMacrosCreateTest() throws Exception {
        String tenantUid = null;
        V1Macros body = null;
        api.v1TenantsUidMacrosCreate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Delete the macros for the specified tenant by given macro name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantsUidMacrosDeleteByMacroNameTest() throws Exception {
        String tenantUid = null;
        V1Macros body = null;
        api.v1TenantsUidMacrosDeleteByMacroName(tenantUid, body);

        // TODO: test validations
    }
    /**
     * List the macros of the specified tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantsUidMacrosListTest() throws Exception {
        String tenantUid = null;
        V1Macros response = api.v1TenantsUidMacrosList(tenantUid);

        // TODO: test validations
    }
    /**
     * Update the macros of the specified tenant
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantsUidMacrosUpdateTest() throws Exception {
        String tenantUid = null;
        V1Macros body = null;
        api.v1TenantsUidMacrosUpdate(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Update the macros for the specified tenant by given macro name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TenantsUidMacrosUpdateByMacroNameTest() throws Exception {
        String tenantUid = null;
        V1Macros body = null;
        api.v1TenantsUidMacrosUpdateByMacroName(tenantUid, body);

        // TODO: test validations
    }
    /**
     * Validate the specified Tencent account credentials
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TencentAccountValidateTest() throws Exception {
        V1TencentCloudAccount body = null;
        api.v1TencentAccountValidate(body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Tencent instance types
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TencentInstanceTypesTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        Double cpuGtEq = null;
        Double memoryGtEq = null;
        Double gpuGtEq = null;
        V1TencentInstanceTypes response = api.v1TencentInstanceTypes(region, cloudAccountUid, cpuGtEq, memoryGtEq, gpuGtEq);

        // TODO: test validations
    }
    /**
     * Retrieves a list of keypairs for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TencentKeypairsTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        V1TencentKeypairs response = api.v1TencentKeypairs(region, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Tencent regions for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TencentRegionsTest() throws Exception {
        String cloudAccountUid = null;
        V1TencentRegions response = api.v1TencentRegions(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of secutity groups for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TencentSecurityGroupsTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        V1TencentSecurityGroups response = api.v1TencentSecurityGroups(region, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Tencent storage types
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TencentStorageTypesTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        String zone = null;
        V1TencentStorageTypes response = api.v1TencentStorageTypes(region, cloudAccountUid, zone);

        // TODO: test validations
    }
    /**
     * Retrieves a list of VPCs for the specified account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TencentVpcsTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        V1TencentVpcs response = api.v1TencentVpcs(region, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Retrieves a list of Tencent availability zones for the specified region
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1TencentZonesTest() throws Exception {
        String region = null;
        String cloudAccountUid = null;
        V1TencentAvailabilityZones response = api.v1TencentZones(region, cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Creates a SSH key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UserAssetsSshCreateTest() throws Exception {
        V1UserAssetSshEntity body = null;
        V1Uid response = api.v1UserAssetsSshCreate(body);

        // TODO: test validations
    }
    /**
     * Returns the specified user ssh key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetSshDeleteTest() throws Exception {
        String uid = null;
        api.v1UsersAssetSshDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified user ssh key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetSshGetTest() throws Exception {
        String uid = null;
        V1UserAssetSsh response = api.v1UsersAssetSshGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified user ssh key
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetSshUpdateTest() throws Exception {
        String uid = null;
        V1UserAssetSsh body = null;
        api.v1UsersAssetSshUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Create a Azure location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationAzureCreateTest() throws Exception {
        V1UserAssetsLocationAzure body = null;
        V1Uid response = api.v1UsersAssetsLocationAzureCreate(body);

        // TODO: test validations
    }
    /**
     * Returns the specified Azure location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationAzureGetTest() throws Exception {
        String uid = null;
        V1UserAssetsLocationAzure response = api.v1UsersAssetsLocationAzureGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified Azure location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationAzureUpdateTest() throws Exception {
        String uid = null;
        V1UserAssetsLocationAzure body = null;
        api.v1UsersAssetsLocationAzureUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Update the default backup location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationDefaultUpdateTest() throws Exception {
        String uid = null;
        String type = null;
        api.v1UsersAssetsLocationDefaultUpdate(uid, type);

        // TODO: test validations
    }
    /**
     * Deletes the specified location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationDeleteTest() throws Exception {
        String uid = null;
        api.v1UsersAssetsLocationDelete(uid);

        // TODO: test validations
    }
    /**
     * Create a GCP location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationGcpCreateTest() throws Exception {
        V1UserAssetsLocationGcp body = null;
        V1Uid response = api.v1UsersAssetsLocationGcpCreate(body);

        // TODO: test validations
    }
    /**
     * Returns the specified GCP location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationGcpGetTest() throws Exception {
        String uid = null;
        V1UserAssetsLocationGcp response = api.v1UsersAssetsLocationGcpGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified GCP location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationGcpUpdateTest() throws Exception {
        String uid = null;
        V1UserAssetsLocationGcp body = null;
        api.v1UsersAssetsLocationGcpUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified users location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationGetTest() throws Exception {
        String filters = null;
        String orderBy = null;
        V1UserAssetsLocations response = api.v1UsersAssetsLocationGet(filters, orderBy);

        // TODO: test validations
    }
    /**
     * Create a MinIO location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationMinioCreateTest() throws Exception {
        V1UserAssetsLocationS3 body = null;
        V1Uid response = api.v1UsersAssetsLocationMinioCreate(body);

        // TODO: test validations
    }
    /**
     * Returns the specified MinIO location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationMinioGetTest() throws Exception {
        String uid = null;
        V1UserAssetsLocationS3 response = api.v1UsersAssetsLocationMinioGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified MinIO location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationMinioUpdateTest() throws Exception {
        String uid = null;
        V1UserAssetsLocationS3 body = null;
        api.v1UsersAssetsLocationMinioUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Create a S3 location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationS3CreateTest() throws Exception {
        V1UserAssetsLocationS3 body = null;
        V1Uid response = api.v1UsersAssetsLocationS3Create(body);

        // TODO: test validations
    }
    /**
     * Returns the specified S3 location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationS3DeleteTest() throws Exception {
        String uid = null;
        api.v1UsersAssetsLocationS3Delete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified S3 location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationS3GetTest() throws Exception {
        String uid = null;
        V1UserAssetsLocationS3 response = api.v1UsersAssetsLocationS3Get(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified S3 location
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsLocationS3UpdateTest() throws Exception {
        String uid = null;
        V1UserAssetsLocationS3 body = null;
        api.v1UsersAssetsLocationS3Update(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the SSH keys
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersAssetsSshGetTest() throws Exception {
        String filters = null;
        String orderBy = null;
        V1UserAssetsSsh response = api.v1UsersAssetsSshGet(filters, orderBy);

        // TODO: test validations
    }
    /**
     * Get the system Spectro repository. Restricted to edge services
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersConfigScarGetTest() throws Exception {
        Boolean fips = null;
        V1SystemScarSpec response = api.v1UsersConfigScarGet(fips);

        // TODO: test validations
    }
    /**
     * Create User
     *
     * A user is created for the given user context
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersCreateTest() throws Exception {
        V1UserEntity body = null;
        V1Uid response = api.v1UsersCreate(body);

        // TODO: test validations
    }
    /**
     * User password reset request using the email id
     *
     * User password request will be sent to the supplied emailId
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersEmailPasswordResetTest() throws Exception {
        PasswordResetBody1 body = null;
        api.v1UsersEmailPasswordReset(body);

        // TODO: test validations
    }
    /**
     * gets users kubectl session
     *
     * gets users kubectl session
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersKubectlSessionUidTest() throws Exception {
        String sessionUid = null;
        V1UserKubectlSession response = api.v1UsersKubectlSessionUid(sessionUid);

        // TODO: test validations
    }
    /**
     * Lists users
     *
     * Lists users the given user context
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersListTest() throws Exception {
        String fields = null;
        String filters = null;
        String orderBy = null;
        Long limit = null;
        Long offset = null;
        String _continue = null;
        V1Users response = api.v1UsersList(fields, filters, orderBy, limit, offset, _continue);

        // TODO: test validations
    }
    /**
     * Retrieves a list of users metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersMetadataTest() throws Exception {
        V1UsersMetadata response = api.v1UsersMetadata();

        // TODO: test validations
    }
    /**
     * User password change request using the user emailId
     *
     * User password change request via current password and emailId
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersPasswordChangeTest() throws Exception {
        PasswordChangeBody body = null;
        api.v1UsersPasswordChange(body);

        // TODO: test validations
    }
    /**
     * Returns the specified User Projects and Roles information
     *
     * Returns a User with projects and roles
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersProjectRolesTest() throws Exception {
        String uid = null;
        V1ProjectRolesEntity response = api.v1UsersProjectRoles(uid);

        // TODO: test validations
    }
    /**
     * Updates the projects and roles for user
     *
     * User is updated with projects and roles
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersProjectRolesPutTest() throws Exception {
        V1ProjectRolesPatch body = null;
        String uid = null;
        api.v1UsersProjectRolesPut(body, uid);

        // TODO: test validations
    }
    /**
     * Updates the resource roles for user
     *
     * Specific resource roles fo user is updated
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersResourceRolesUidUpdateTest() throws Exception {
        V1ResourceRolesUpdateEntity body = null;
        String uid = null;
        String resourceRoleUid = null;
        api.v1UsersResourceRolesUidUpdate(body, uid, resourceRoleUid);

        // TODO: test validations
    }
    /**
     * Users status login mode
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersStatusLoginModeTest() throws Exception {
        String uid = null;
        V1UserStatusLoginMode body = null;
        api.v1UsersStatusLoginMode(uid, body);

        // TODO: test validations
    }
    /**
     * Retrieves a list of users summary with provided filter spec
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersSummaryGetTest() throws Exception {
        V1UsersSummarySpec body = null;
        V1UsersSummaryList response = api.v1UsersSummaryGet(body);

        // TODO: test validations
    }
    /**
     * Create or add new macros for the system user
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersSystemMacrosCreateTest() throws Exception {
        V1Macros body = null;
        api.v1UsersSystemMacrosCreate(body);

        // TODO: test validations
    }
    /**
     * Delete the macros for the system user by macro name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersSystemMacrosDeleteByMacroNameTest() throws Exception {
        V1Macros body = null;
        api.v1UsersSystemMacrosDeleteByMacroName(body);

        // TODO: test validations
    }
    /**
     * List the macros of the system
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersSystemMacrosListTest() throws Exception {
        V1Macros response = api.v1UsersSystemMacrosList();

        // TODO: test validations
    }
    /**
     * Update the macros of the system
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersSystemMacrosUpdateTest() throws Exception {
        V1Macros body = null;
        api.v1UsersSystemMacrosUpdate(body);

        // TODO: test validations
    }
    /**
     * Update the macros for the system user by macro name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersSystemMacrosUpdateByMacroNameTest() throws Exception {
        V1Macros body = null;
        api.v1UsersSystemMacrosUpdateByMacroName(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified User
     *
     * Deletes the specified User for given uid
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidDeleteTest() throws Exception {
        String uid = null;
        api.v1UsersUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified User
     *
     * Returns a User for the specified uid.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidGetTest() throws Exception {
        String uid = null;
        V1User response = api.v1UsersUidGet(uid);

        // TODO: test validations
    }
    /**
     * User password change request using the user uid
     *
     * User password change request via current password
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidPasswordChangeTest() throws Exception {
        PasswordChangeBody1 body = null;
        String uid = null;
        api.v1UsersUidPasswordChange(body, uid);

        // TODO: test validations
    }
    /**
     * User password reset request using the user uid
     *
     * User password reset request, will send the password reset option through the emailId
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidPasswordResetTest() throws Exception {
        String uid = null;
        api.v1UsersUidPasswordReset(uid);

        // TODO: test validations
    }
    /**
     * Patches the specified User
     *
     * User is patched for the specified information
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidPatchTest() throws Exception {
        List<V1HttpPatch> body = null;
        String uid = null;
        api.v1UsersUidPatch(body, uid);

        // TODO: test validations
    }
    /**
     * Returns the specified individual and resource roles for a user
     *
     * Returns resource roles for user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidResourceRolesTest() throws Exception {
        String uid = null;
        V1ResourceRoles response = api.v1UsersUidResourceRoles(uid);

        // TODO: test validations
    }
    /**
     * Add resource roles for user
     *
     * Resource roles added to specific user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidResourceRolesCreateTest() throws Exception {
        V1ResourceRolesUpdateEntity body = null;
        String uid = null;
        api.v1UsersUidResourceRolesCreate(body, uid);

        // TODO: test validations
    }
    /**
     * Deleted the resource roles from user
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidResourceRolesUidDeleteTest() throws Exception {
        String uid = null;
        String resourceRoleUid = null;
        api.v1UsersUidResourceRolesUidDelete(uid, resourceRoleUid);

        // TODO: test validations
    }
    /**
     * Returns the specified individual and team roles for a user
     *
     * Returns roles clubbed from team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidRolesTest() throws Exception {
        String uid = null;
        V1UserRolesEntity response = api.v1UsersUidRoles(uid);

        // TODO: test validations
    }
    /**
     * Updates the roles for user
     *
     * User is updated with roles
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidRolesUpdateTest() throws Exception {
        V1UserRoleUIDs body = null;
        String uid = null;
        api.v1UsersUidRolesUpdate(body, uid);

        // TODO: test validations
    }
    /**
     * Update User
     *
     * A user is created for the given user context
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersUidUpdateTest() throws Exception {
        String uid = null;
        V1UserUpdateEntity body = null;
        api.v1UsersUidUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified User workspaces and Roles information
     *
     * Returns a User with workspaces and roles
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersWorkspaceGetRolesTest() throws Exception {
        String userUid = null;
        V1WorkspaceScopeRoles response = api.v1UsersWorkspaceGetRoles(userUid);

        // TODO: test validations
    }
    /**
     * Updates the workspace roles for user
     *
     * User is updated with workspace roles
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1UsersWorkspaceRolesPutTest() throws Exception {
        V1WorkspacesRolesPatch body = null;
        String userUid = null;
        api.v1UsersWorkspaceRolesPut(body, userUid);

        // TODO: test validations
    }
    /**
     * Create snapshot of virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VMSnapshotCreateTest() throws Exception {
        String namespace = null;
        String uid = null;
        String vmName = null;
        V1VirtualMachineSnapshot body = null;
        V1VirtualMachineSnapshot response = api.v1VMSnapshotCreate(namespace, uid, vmName, body);

        // TODO: test validations
    }
    /**
     * Delete the snapshot of virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VMSnapshotDeleteTest() throws Exception {
        String uid = null;
        String vmName = null;
        String snapshotName = null;
        String namespace = null;
        api.v1VMSnapshotDelete(uid, vmName, snapshotName, namespace);

        // TODO: test validations
    }
    /**
     * Get virtual machine snapshot
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VMSnapshotGetTest() throws Exception {
        String uid = null;
        String vmName = null;
        String snapshotName = null;
        String namespace = null;
        V1VirtualMachineSnapshot response = api.v1VMSnapshotGet(uid, vmName, snapshotName, namespace);

        // TODO: test validations
    }
    /**
     * Updates the specified snapshot of a virtual machine
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VMSnapshotUpdateTest() throws Exception {
        String namespace = null;
        String uid = null;
        String vmName = null;
        String snapshotName = null;
        V1VirtualMachineSnapshot body = null;
        V1VirtualMachineSnapshot response = api.v1VMSnapshotUpdate(namespace, uid, vmName, snapshotName, body);

        // TODO: test validations
    }
    /**
     * Check if Vsphere account is valid
     *
     * Returns no contents if account is valid else error.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereAccountValidateTest() throws Exception {
        V1VsphereCloudAccount body = null;
        api.v1VsphereAccountValidate(body);

        // TODO: test validations
    }
    /**
     * Get the vSphere computecluster resources for the given overlord account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereAccountsUidClusterResTest() throws Exception {
        String uid = null;
        String datacenter = null;
        String computecluster = null;
        Boolean useQualifiedNetworkName = null;
        V1VsphereComputeClusterResources response = api.v1VsphereAccountsUidClusterRes(uid, datacenter, computecluster, useQualifiedNetworkName);

        // TODO: test validations
    }
    /**
     * Get the vSphere datacenters &amp; datacluster for the given overlord account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereAccountsUidDatacentersTest() throws Exception {
        String uid = null;
        V1VsphereDatacenters response = api.v1VsphereAccountsUidDatacenters(uid);

        // TODO: test validations
    }
    /**
     * Returns the resources for vsphere compute cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereComputeClusterResourcesTest() throws Exception {
        String cloudAccountUid = null;
        String computecluster = null;
        String uid = null;
        V1VsphereComputeClusterResources response = api.v1VsphereComputeClusterResources(cloudAccountUid, computecluster, uid);

        // TODO: test validations
    }
    /**
     * Returns the vsphere data centers
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereDatacentersTest() throws Exception {
        String cloudAccountUid = null;
        V1VsphereDatacenters response = api.v1VsphereDatacenters(cloudAccountUid);

        // TODO: test validations
    }
    /**
     * Create a vSphere DNS mapping
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereDnsMappingCreateTest() throws Exception {
        V1VsphereDnsMapping body = null;
        V1Uid response = api.v1VsphereDnsMappingCreate(body);

        // TODO: test validations
    }
    /**
     * Deletes the specified vSphere DNS mapping
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereDnsMappingDeleteTest() throws Exception {
        String uid = null;
        api.v1VsphereDnsMappingDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified vSphere DNS mapping
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereDnsMappingGetTest() throws Exception {
        String uid = null;
        V1VsphereDnsMapping response = api.v1VsphereDnsMappingGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified vSphere DNS mapping
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereDnsMappingUpdateTest() throws Exception {
        String uid = null;
        V1VsphereDnsMapping body = null;
        api.v1VsphereDnsMappingUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the specified vSphere DNS mappings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereDnsMappingsGetTest() throws Exception {
        String filters = null;
        String orderBy = null;
        V1VsphereDnsMappings response = api.v1VsphereDnsMappingsGet(filters, orderBy);

        // TODO: test validations
    }
    /**
     * Retrieves vsphere env
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereEnvTest() throws Exception {
        V1VsphereCloudAccount body = null;
        V1VsphereEnv response = api.v1VsphereEnv(body);

        // TODO: test validations
    }
    /**
     * Returns the specified vSphere DNS mapping
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1VsphereMappingGetTest() throws Exception {
        String gatewayUid = null;
        String datacenter = null;
        String network = null;
        V1VsphereDnsMapping response = api.v1VsphereMappingGet(gatewayUid, datacenter, network);

        // TODO: test validations
    }
    /**
     * Create workspace backup settings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspaceOpsBackupCreateTest() throws Exception {
        String uid = null;
        V1WorkspaceBackupConfigEntity body = null;
        V1Uid response = api.v1WorkspaceOpsBackupCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Delete workspace backup
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspaceOpsBackupDeleteTest() throws Exception {
        String uid = null;
        V1WorkspaceBackupDeleteEntity body = null;
        api.v1WorkspaceOpsBackupDelete(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the  workspace backup result
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspaceOpsBackupGetTest() throws Exception {
        String uid = null;
        String backupRequestUid = null;
        V1WorkspaceBackup response = api.v1WorkspaceOpsBackupGet(uid, backupRequestUid);

        // TODO: test validations
    }
    /**
     * Create On demand Workspace Backup
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspaceOpsBackupOnDemandCreateTest() throws Exception {
        String uid = null;
        V1WorkspaceBackupConfigEntity body = null;
        V1Uid response = api.v1WorkspaceOpsBackupOnDemandCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Update workspace backup settings
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspaceOpsBackupUpdateTest() throws Exception {
        String uid = null;
        V1WorkspaceBackupConfigEntity body = null;
        api.v1WorkspaceOpsBackupUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Returns the  workspace restore result
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspaceOpsRestoreGetTest() throws Exception {
        String uid = null;
        String restoreRequestUid = null;
        V1WorkspaceRestore response = api.v1WorkspaceOpsRestoreGet(uid, restoreRequestUid);

        // TODO: test validations
    }
    /**
     * Create On demand Workspace Restore
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspaceOpsRestoreOnDemandCreateTest() throws Exception {
        String uid = null;
        V1WorkspaceRestoreConfigEntity body = null;
        V1Uid response = api.v1WorkspaceOpsRestoreOnDemandCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Create cluster rbac in workspace
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspacesClusterRbacCreateTest() throws Exception {
        String uid = null;
        V1ClusterRbac body = null;
        V1Uid response = api.v1WorkspacesClusterRbacCreate(uid, body);

        // TODO: test validations
    }
    /**
     * Create workspace
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspacesCreateTest() throws Exception {
        V1WorkspaceEntity body = null;
        V1Uid response = api.v1WorkspacesCreate(body);

        // TODO: test validations
    }
    /**
     * Updates the specified workspace namespaces
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspacesUidClusterNamespacesUpdateTest() throws Exception {
        String uid = null;
        V1WorkspaceClusterNamespacesEntity body = null;
        api.v1WorkspacesUidClusterNamespacesUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified workspace cluster rbac
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspacesUidClusterRbacDeleteTest() throws Exception {
        String uid = null;
        String clusterRbacUid = null;
        api.v1WorkspacesUidClusterRbacDelete(uid, clusterRbacUid);

        // TODO: test validations
    }
    /**
     * Updates the specified workspace cluster rbac
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspacesUidClusterRbacUpdateTest() throws Exception {
        String uid = null;
        String clusterRbacUid = null;
        V1ClusterRbac body = null;
        api.v1WorkspacesUidClusterRbacUpdate(uid, clusterRbacUid, body);

        // TODO: test validations
    }
    /**
     * Deletes the specified workspace
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspacesUidDeleteTest() throws Exception {
        String uid = null;
        api.v1WorkspacesUidDelete(uid);

        // TODO: test validations
    }
    /**
     * Returns the specified workspace
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspacesUidGetTest() throws Exception {
        String uid = null;
        V1Workspace response = api.v1WorkspacesUidGet(uid);

        // TODO: test validations
    }
    /**
     * Updates the specified workspace meta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspacesUidMetaUpdateTest() throws Exception {
        String uid = null;
        V1ObjectMeta body = null;
        api.v1WorkspacesUidMetaUpdate(uid, body);

        // TODO: test validations
    }
    /**
     * Validates the workspace name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void v1WorkspacesValidateNameTest() throws Exception {
        String name = null;
        api.v1WorkspacesValidateName(name);

        // TODO: test validations
    }
}
