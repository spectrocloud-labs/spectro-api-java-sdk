/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * V1VmResourceRequirements
 */



public class V1VmResourceRequirements {
  @SerializedName("limits")
  private Object limits = null;

  @SerializedName("overcommitGuestOverhead")
  private Boolean overcommitGuestOverhead = null;

  @SerializedName("requests")
  private Object requests = null;

  public V1VmResourceRequirements limits(Object limits) {
    this.limits = limits;
    return this;
  }

   /**
   * Limits describes the maximum amount of compute resources allowed. Valid resource keys are \&quot;memory\&quot; and \&quot;cpu\&quot;.
   * @return limits
  **/
  @Schema(description = "Limits describes the maximum amount of compute resources allowed. Valid resource keys are \"memory\" and \"cpu\".")
  public Object getLimits() {
    return limits;
  }

  public void setLimits(Object limits) {
    this.limits = limits;
  }

  public V1VmResourceRequirements overcommitGuestOverhead(Boolean overcommitGuestOverhead) {
    this.overcommitGuestOverhead = overcommitGuestOverhead;
    return this;
  }

   /**
   * Don&#x27;t ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container&#x27;s memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false.
   * @return overcommitGuestOverhead
  **/
  @Schema(description = "Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false.")
  public Boolean isOvercommitGuestOverhead() {
    return overcommitGuestOverhead;
  }

  public void setOvercommitGuestOverhead(Boolean overcommitGuestOverhead) {
    this.overcommitGuestOverhead = overcommitGuestOverhead;
  }

  public V1VmResourceRequirements requests(Object requests) {
    this.requests = requests;
    return this;
  }

   /**
   * Requests is a description of the initial vmi resources. Valid resource keys are \&quot;memory\&quot; and \&quot;cpu\&quot;.
   * @return requests
  **/
  @Schema(description = "Requests is a description of the initial vmi resources. Valid resource keys are \"memory\" and \"cpu\".")
  public Object getRequests() {
    return requests;
  }

  public void setRequests(Object requests) {
    this.requests = requests;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmResourceRequirements v1VmResourceRequirements = (V1VmResourceRequirements) o;
    return Objects.equals(this.limits, v1VmResourceRequirements.limits) &&
        Objects.equals(this.overcommitGuestOverhead, v1VmResourceRequirements.overcommitGuestOverhead) &&
        Objects.equals(this.requests, v1VmResourceRequirements.requests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limits, overcommitGuestOverhead, requests);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmResourceRequirements {\n");
    
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    overcommitGuestOverhead: ").append(toIndentedString(overcommitGuestOverhead)).append("\n");
    sb.append("    requests: ").append(toIndentedString(requests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
