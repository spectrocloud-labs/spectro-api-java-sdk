/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1ClusterProfileTemplate;
import com.spectrocloud.client.model.V1LibvirtDiskSpec;
import com.spectrocloud.client.model.V1LibvirtInstanceType;
import com.spectrocloud.client.model.V1LibvirtPlacementConfig;
import com.spectrocloud.client.model.V1ObjectReference;
import com.spectrocloud.client.model.V1Taint;
import com.spectrocloud.client.model.V1UpdateStrategy;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * V1LibvirtMachinePoolConfig
 */



public class V1LibvirtMachinePoolConfig {
  @SerializedName("additionalLabels")
  private Map<String, String> additionalLabels = null;

  @SerializedName("additionalTags")
  private Map<String, String> additionalTags = null;

  @SerializedName("infraProfileRef")
  private V1ObjectReference infraProfileRef = null;

  @SerializedName("infraProfileTemplate")
  private V1ClusterProfileTemplate infraProfileTemplate = null;

  @SerializedName("instanceType")
  private V1LibvirtInstanceType instanceType = null;

  @SerializedName("isControlPlane")
  private Boolean isControlPlane = null;

  @SerializedName("labels")
  private List<String> labels = null;

  @SerializedName("maxSize")
  private Integer maxSize = null;

  @SerializedName("minSize")
  private Integer minSize = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nonRootDisksInGB")
  private List<V1LibvirtDiskSpec> nonRootDisksInGB = null;

  @SerializedName("placements")
  private List<V1LibvirtPlacementConfig> placements = new ArrayList<V1LibvirtPlacementConfig>();

  @SerializedName("rootDiskInGB")
  private Integer rootDiskInGB = null;

  @SerializedName("size")
  private Integer size = null;

  @SerializedName("taints")
  private List<V1Taint> taints = null;

  @SerializedName("updateStrategy")
  private V1UpdateStrategy updateStrategy = null;

  @SerializedName("useControlPlaneAsWorker")
  private Boolean useControlPlaneAsWorker = null;

  public V1LibvirtMachinePoolConfig additionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
    return this;
  }

  public V1LibvirtMachinePoolConfig putAdditionalLabelsItem(String key, String additionalLabelsItem) {
    if (this.additionalLabels == null) {
      this.additionalLabels = new HashMap<String, String>();
    }
    this.additionalLabels.put(key, additionalLabelsItem);
    return this;
  }

   /**
   * additionalLabels
   * @return additionalLabels
  **/
  @Schema(description = "additionalLabels")
  public Map<String, String> getAdditionalLabels() {
    return additionalLabels;
  }

  public void setAdditionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
  }

  public V1LibvirtMachinePoolConfig additionalTags(Map<String, String> additionalTags) {
    this.additionalTags = additionalTags;
    return this;
  }

  public V1LibvirtMachinePoolConfig putAdditionalTagsItem(String key, String additionalTagsItem) {
    if (this.additionalTags == null) {
      this.additionalTags = new HashMap<String, String>();
    }
    this.additionalTags.put(key, additionalTagsItem);
    return this;
  }

   /**
   * AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole
   * @return additionalTags
  **/
  @Schema(description = "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole")
  public Map<String, String> getAdditionalTags() {
    return additionalTags;
  }

  public void setAdditionalTags(Map<String, String> additionalTags) {
    this.additionalTags = additionalTags;
  }

  public V1LibvirtMachinePoolConfig infraProfileRef(V1ObjectReference infraProfileRef) {
    this.infraProfileRef = infraProfileRef;
    return this;
  }

   /**
   * Get infraProfileRef
   * @return infraProfileRef
  **/
  @Schema(description = "")
  public V1ObjectReference getInfraProfileRef() {
    return infraProfileRef;
  }

  public void setInfraProfileRef(V1ObjectReference infraProfileRef) {
    this.infraProfileRef = infraProfileRef;
  }

  public V1LibvirtMachinePoolConfig infraProfileTemplate(V1ClusterProfileTemplate infraProfileTemplate) {
    this.infraProfileTemplate = infraProfileTemplate;
    return this;
  }

   /**
   * Get infraProfileTemplate
   * @return infraProfileTemplate
  **/
  @Schema(description = "")
  public V1ClusterProfileTemplate getInfraProfileTemplate() {
    return infraProfileTemplate;
  }

  public void setInfraProfileTemplate(V1ClusterProfileTemplate infraProfileTemplate) {
    this.infraProfileTemplate = infraProfileTemplate;
  }

  public V1LibvirtMachinePoolConfig instanceType(V1LibvirtInstanceType instanceType) {
    this.instanceType = instanceType;
    return this;
  }

   /**
   * Get instanceType
   * @return instanceType
  **/
  @Schema(required = true, description = "")
  public V1LibvirtInstanceType getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(V1LibvirtInstanceType instanceType) {
    this.instanceType = instanceType;
  }

  public V1LibvirtMachinePoolConfig isControlPlane(Boolean isControlPlane) {
    this.isControlPlane = isControlPlane;
    return this;
  }

   /**
   * whether this pool is for control plane
   * @return isControlPlane
  **/
  @Schema(description = "whether this pool is for control plane")
  public Boolean isIsControlPlane() {
    return isControlPlane;
  }

  public void setIsControlPlane(Boolean isControlPlane) {
    this.isControlPlane = isControlPlane;
  }

  public V1LibvirtMachinePoolConfig labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public V1LibvirtMachinePoolConfig addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * labels for this pool, example: master/worker, gpu, windows
   * @return labels
  **/
  @Schema(description = "labels for this pool, example: master/worker, gpu, windows")
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }

  public V1LibvirtMachinePoolConfig maxSize(Integer maxSize) {
    this.maxSize = maxSize;
    return this;
  }

   /**
   * max size of the pool, for scaling
   * @return maxSize
  **/
  @Schema(description = "max size of the pool, for scaling")
  public Integer getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(Integer maxSize) {
    this.maxSize = maxSize;
  }

  public V1LibvirtMachinePoolConfig minSize(Integer minSize) {
    this.minSize = minSize;
    return this;
  }

   /**
   * min size of the pool, for scaling
   * @return minSize
  **/
  @Schema(description = "min size of the pool, for scaling")
  public Integer getMinSize() {
    return minSize;
  }

  public void setMinSize(Integer minSize) {
    this.minSize = minSize;
  }

  public V1LibvirtMachinePoolConfig name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1LibvirtMachinePoolConfig nonRootDisksInGB(List<V1LibvirtDiskSpec> nonRootDisksInGB) {
    this.nonRootDisksInGB = nonRootDisksInGB;
    return this;
  }

  public V1LibvirtMachinePoolConfig addNonRootDisksInGBItem(V1LibvirtDiskSpec nonRootDisksInGBItem) {
    if (this.nonRootDisksInGB == null) {
      this.nonRootDisksInGB = new ArrayList<V1LibvirtDiskSpec>();
    }
    this.nonRootDisksInGB.add(nonRootDisksInGBItem);
    return this;
  }

   /**
   * NonRootDisksInGB is the list of additional disks, if required, in GB
   * @return nonRootDisksInGB
  **/
  @Schema(description = "NonRootDisksInGB is the list of additional disks, if required, in GB")
  public List<V1LibvirtDiskSpec> getNonRootDisksInGB() {
    return nonRootDisksInGB;
  }

  public void setNonRootDisksInGB(List<V1LibvirtDiskSpec> nonRootDisksInGB) {
    this.nonRootDisksInGB = nonRootDisksInGB;
  }

  public V1LibvirtMachinePoolConfig placements(List<V1LibvirtPlacementConfig> placements) {
    this.placements = placements;
    return this;
  }

  public V1LibvirtMachinePoolConfig addPlacementsItem(V1LibvirtPlacementConfig placementsItem) {
    this.placements.add(placementsItem);
    return this;
  }

   /**
   * Placements defines the configurations of the failureDomains(hosts) for the machine pool
   * @return placements
  **/
  @Schema(required = true, description = "Placements defines the configurations of the failureDomains(hosts) for the machine pool")
  public List<V1LibvirtPlacementConfig> getPlacements() {
    return placements;
  }

  public void setPlacements(List<V1LibvirtPlacementConfig> placements) {
    this.placements = placements;
  }

  public V1LibvirtMachinePoolConfig rootDiskInGB(Integer rootDiskInGB) {
    this.rootDiskInGB = rootDiskInGB;
    return this;
  }

   /**
   * RootDiskInGB is the size of a vm&#x27;s root disk, in GB
   * @return rootDiskInGB
  **/
  @Schema(required = true, description = "RootDiskInGB is the size of a vm's root disk, in GB")
  public Integer getRootDiskInGB() {
    return rootDiskInGB;
  }

  public void setRootDiskInGB(Integer rootDiskInGB) {
    this.rootDiskInGB = rootDiskInGB;
  }

  public V1LibvirtMachinePoolConfig size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * size of the pool, number of machines
   * @return size
  **/
  @Schema(description = "size of the pool, number of machines")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public V1LibvirtMachinePoolConfig taints(List<V1Taint> taints) {
    this.taints = taints;
    return this;
  }

  public V1LibvirtMachinePoolConfig addTaintsItem(V1Taint taintsItem) {
    if (this.taints == null) {
      this.taints = new ArrayList<V1Taint>();
    }
    this.taints.add(taintsItem);
    return this;
  }

   /**
   * master or worker taints
   * @return taints
  **/
  @Schema(description = "master or worker taints")
  public List<V1Taint> getTaints() {
    return taints;
  }

  public void setTaints(List<V1Taint> taints) {
    this.taints = taints;
  }

  public V1LibvirtMachinePoolConfig updateStrategy(V1UpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
    return this;
  }

   /**
   * Get updateStrategy
   * @return updateStrategy
  **/
  @Schema(description = "")
  public V1UpdateStrategy getUpdateStrategy() {
    return updateStrategy;
  }

  public void setUpdateStrategy(V1UpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
  }

  public V1LibvirtMachinePoolConfig useControlPlaneAsWorker(Boolean useControlPlaneAsWorker) {
    this.useControlPlaneAsWorker = useControlPlaneAsWorker;
    return this;
  }

   /**
   * if IsControlPlane&#x3D;&#x3D;true &amp;&amp; useControlPlaneAsWorker&#x3D;&#x3D;true, then will remove master taint this will not be used for worker pools
   * @return useControlPlaneAsWorker
  **/
  @Schema(description = "if IsControlPlane==true && useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools")
  public Boolean isUseControlPlaneAsWorker() {
    return useControlPlaneAsWorker;
  }

  public void setUseControlPlaneAsWorker(Boolean useControlPlaneAsWorker) {
    this.useControlPlaneAsWorker = useControlPlaneAsWorker;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1LibvirtMachinePoolConfig v1LibvirtMachinePoolConfig = (V1LibvirtMachinePoolConfig) o;
    return Objects.equals(this.additionalLabels, v1LibvirtMachinePoolConfig.additionalLabels) &&
        Objects.equals(this.additionalTags, v1LibvirtMachinePoolConfig.additionalTags) &&
        Objects.equals(this.infraProfileRef, v1LibvirtMachinePoolConfig.infraProfileRef) &&
        Objects.equals(this.infraProfileTemplate, v1LibvirtMachinePoolConfig.infraProfileTemplate) &&
        Objects.equals(this.instanceType, v1LibvirtMachinePoolConfig.instanceType) &&
        Objects.equals(this.isControlPlane, v1LibvirtMachinePoolConfig.isControlPlane) &&
        Objects.equals(this.labels, v1LibvirtMachinePoolConfig.labels) &&
        Objects.equals(this.maxSize, v1LibvirtMachinePoolConfig.maxSize) &&
        Objects.equals(this.minSize, v1LibvirtMachinePoolConfig.minSize) &&
        Objects.equals(this.name, v1LibvirtMachinePoolConfig.name) &&
        Objects.equals(this.nonRootDisksInGB, v1LibvirtMachinePoolConfig.nonRootDisksInGB) &&
        Objects.equals(this.placements, v1LibvirtMachinePoolConfig.placements) &&
        Objects.equals(this.rootDiskInGB, v1LibvirtMachinePoolConfig.rootDiskInGB) &&
        Objects.equals(this.size, v1LibvirtMachinePoolConfig.size) &&
        Objects.equals(this.taints, v1LibvirtMachinePoolConfig.taints) &&
        Objects.equals(this.updateStrategy, v1LibvirtMachinePoolConfig.updateStrategy) &&
        Objects.equals(this.useControlPlaneAsWorker, v1LibvirtMachinePoolConfig.useControlPlaneAsWorker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalLabels, additionalTags, infraProfileRef, infraProfileTemplate, instanceType, isControlPlane, labels, maxSize, minSize, name, nonRootDisksInGB, placements, rootDiskInGB, size, taints, updateStrategy, useControlPlaneAsWorker);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1LibvirtMachinePoolConfig {\n");
    
    sb.append("    additionalLabels: ").append(toIndentedString(additionalLabels)).append("\n");
    sb.append("    additionalTags: ").append(toIndentedString(additionalTags)).append("\n");
    sb.append("    infraProfileRef: ").append(toIndentedString(infraProfileRef)).append("\n");
    sb.append("    infraProfileTemplate: ").append(toIndentedString(infraProfileTemplate)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    isControlPlane: ").append(toIndentedString(isControlPlane)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    minSize: ").append(toIndentedString(minSize)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonRootDisksInGB: ").append(toIndentedString(nonRootDisksInGB)).append("\n");
    sb.append("    placements: ").append(toIndentedString(placements)).append("\n");
    sb.append("    rootDiskInGB: ").append(toIndentedString(rootDiskInGB)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    taints: ").append(toIndentedString(taints)).append("\n");
    sb.append("    updateStrategy: ").append(toIndentedString(updateStrategy)).append("\n");
    sb.append("    useControlPlaneAsWorker: ").append(toIndentedString(useControlPlaneAsWorker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
