/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmHttpHeader;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * HTTPGetAction describes an action based on HTTP Get requests.
 */
@Schema(description = "HTTPGetAction describes an action based on HTTP Get requests.")


public class V1VmHttpGetAction {
  @SerializedName("host")
  private String host = null;

  @SerializedName("httpHeaders")
  private List<V1VmHttpHeader> httpHeaders = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("scheme")
  private String scheme = null;

  public V1VmHttpGetAction host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Host name to connect to, defaults to the pod IP. You probably want to set \&quot;Host\&quot; in httpHeaders instead.
   * @return host
  **/
  @Schema(description = "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public V1VmHttpGetAction httpHeaders(List<V1VmHttpHeader> httpHeaders) {
    this.httpHeaders = httpHeaders;
    return this;
  }

  public V1VmHttpGetAction addHttpHeadersItem(V1VmHttpHeader httpHeadersItem) {
    if (this.httpHeaders == null) {
      this.httpHeaders = new ArrayList<V1VmHttpHeader>();
    }
    this.httpHeaders.add(httpHeadersItem);
    return this;
  }

   /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   * @return httpHeaders
  **/
  @Schema(description = "Custom headers to set in the request. HTTP allows repeated headers.")
  public List<V1VmHttpHeader> getHttpHeaders() {
    return httpHeaders;
  }

  public void setHttpHeaders(List<V1VmHttpHeader> httpHeaders) {
    this.httpHeaders = httpHeaders;
  }

  public V1VmHttpGetAction path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path to access on the HTTP server.
   * @return path
  **/
  @Schema(description = "Path to access on the HTTP server.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public V1VmHttpGetAction scheme(String scheme) {
    this.scheme = scheme;
    return this;
  }

   /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   * @return scheme
  **/
  @Schema(description = "Scheme to use for connecting to the host. Defaults to HTTP.")
  public String getScheme() {
    return scheme;
  }

  public void setScheme(String scheme) {
    this.scheme = scheme;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmHttpGetAction v1VmHttpGetAction = (V1VmHttpGetAction) o;
    return Objects.equals(this.host, v1VmHttpGetAction.host) &&
        Objects.equals(this.httpHeaders, v1VmHttpGetAction.httpHeaders) &&
        Objects.equals(this.path, v1VmHttpGetAction.path) &&
        Objects.equals(this.scheme, v1VmHttpGetAction.scheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, httpHeaders, path, scheme);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmHttpGetAction {\n");
    
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    httpHeaders: ").append(toIndentedString(httpHeaders)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
