/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmCloudInitConfigDriveSource;
import com.spectrocloud.client.model.V1VmCloudInitNoCloudSource;
import com.spectrocloud.client.model.V1VmConfigMapVolumeSource;
import com.spectrocloud.client.model.V1VmContainerDiskSource;
import com.spectrocloud.client.model.V1VmCoreDataVolumeSource;
import com.spectrocloud.client.model.V1VmDownwardApiVolumeSource;
import com.spectrocloud.client.model.V1VmDownwardMetricsVolumeSource;
import com.spectrocloud.client.model.V1VmEmptyDiskSource;
import com.spectrocloud.client.model.V1VmEphemeralVolumeSource;
import com.spectrocloud.client.model.V1VmHostDisk;
import com.spectrocloud.client.model.V1VmMemoryDumpVolumeSource;
import com.spectrocloud.client.model.V1VmPersistentVolumeClaimVolumeSource;
import com.spectrocloud.client.model.V1VmSecretVolumeSource;
import com.spectrocloud.client.model.V1VmServiceAccountVolumeSource;
import com.spectrocloud.client.model.V1VmSysprepSource;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Volume represents a named volume in a vmi.
 */
@Schema(description = "Volume represents a named volume in a vmi.")


public class V1VmVolume {
  @SerializedName("cloudInitConfigDrive")
  private V1VmCloudInitConfigDriveSource cloudInitConfigDrive = null;

  @SerializedName("cloudInitNoCloud")
  private V1VmCloudInitNoCloudSource cloudInitNoCloud = null;

  @SerializedName("configMap")
  private V1VmConfigMapVolumeSource configMap = null;

  @SerializedName("containerDisk")
  private V1VmContainerDiskSource containerDisk = null;

  @SerializedName("dataVolume")
  private V1VmCoreDataVolumeSource dataVolume = null;

  @SerializedName("downwardAPI")
  private V1VmDownwardApiVolumeSource downwardAPI = null;

  @SerializedName("downwardMetrics")
  private V1VmDownwardMetricsVolumeSource downwardMetrics = null;

  @SerializedName("emptyDisk")
  private V1VmEmptyDiskSource emptyDisk = null;

  @SerializedName("ephemeral")
  private V1VmEphemeralVolumeSource ephemeral = null;

  @SerializedName("hostDisk")
  private V1VmHostDisk hostDisk = null;

  @SerializedName("memoryDump")
  private V1VmMemoryDumpVolumeSource memoryDump = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("persistentVolumeClaim")
  private V1VmPersistentVolumeClaimVolumeSource persistentVolumeClaim = null;

  @SerializedName("secret")
  private V1VmSecretVolumeSource secret = null;

  @SerializedName("serviceAccount")
  private V1VmServiceAccountVolumeSource serviceAccount = null;

  @SerializedName("sysprep")
  private V1VmSysprepSource sysprep = null;

  public V1VmVolume cloudInitConfigDrive(V1VmCloudInitConfigDriveSource cloudInitConfigDrive) {
    this.cloudInitConfigDrive = cloudInitConfigDrive;
    return this;
  }

   /**
   * Get cloudInitConfigDrive
   * @return cloudInitConfigDrive
  **/
  @Schema(description = "")
  public V1VmCloudInitConfigDriveSource getCloudInitConfigDrive() {
    return cloudInitConfigDrive;
  }

  public void setCloudInitConfigDrive(V1VmCloudInitConfigDriveSource cloudInitConfigDrive) {
    this.cloudInitConfigDrive = cloudInitConfigDrive;
  }

  public V1VmVolume cloudInitNoCloud(V1VmCloudInitNoCloudSource cloudInitNoCloud) {
    this.cloudInitNoCloud = cloudInitNoCloud;
    return this;
  }

   /**
   * Get cloudInitNoCloud
   * @return cloudInitNoCloud
  **/
  @Schema(description = "")
  public V1VmCloudInitNoCloudSource getCloudInitNoCloud() {
    return cloudInitNoCloud;
  }

  public void setCloudInitNoCloud(V1VmCloudInitNoCloudSource cloudInitNoCloud) {
    this.cloudInitNoCloud = cloudInitNoCloud;
  }

  public V1VmVolume configMap(V1VmConfigMapVolumeSource configMap) {
    this.configMap = configMap;
    return this;
  }

   /**
   * Get configMap
   * @return configMap
  **/
  @Schema(description = "")
  public V1VmConfigMapVolumeSource getConfigMap() {
    return configMap;
  }

  public void setConfigMap(V1VmConfigMapVolumeSource configMap) {
    this.configMap = configMap;
  }

  public V1VmVolume containerDisk(V1VmContainerDiskSource containerDisk) {
    this.containerDisk = containerDisk;
    return this;
  }

   /**
   * Get containerDisk
   * @return containerDisk
  **/
  @Schema(description = "")
  public V1VmContainerDiskSource getContainerDisk() {
    return containerDisk;
  }

  public void setContainerDisk(V1VmContainerDiskSource containerDisk) {
    this.containerDisk = containerDisk;
  }

  public V1VmVolume dataVolume(V1VmCoreDataVolumeSource dataVolume) {
    this.dataVolume = dataVolume;
    return this;
  }

   /**
   * Get dataVolume
   * @return dataVolume
  **/
  @Schema(description = "")
  public V1VmCoreDataVolumeSource getDataVolume() {
    return dataVolume;
  }

  public void setDataVolume(V1VmCoreDataVolumeSource dataVolume) {
    this.dataVolume = dataVolume;
  }

  public V1VmVolume downwardAPI(V1VmDownwardApiVolumeSource downwardAPI) {
    this.downwardAPI = downwardAPI;
    return this;
  }

   /**
   * Get downwardAPI
   * @return downwardAPI
  **/
  @Schema(description = "")
  public V1VmDownwardApiVolumeSource getDownwardAPI() {
    return downwardAPI;
  }

  public void setDownwardAPI(V1VmDownwardApiVolumeSource downwardAPI) {
    this.downwardAPI = downwardAPI;
  }

  public V1VmVolume downwardMetrics(V1VmDownwardMetricsVolumeSource downwardMetrics) {
    this.downwardMetrics = downwardMetrics;
    return this;
  }

   /**
   * Get downwardMetrics
   * @return downwardMetrics
  **/
  @Schema(description = "")
  public V1VmDownwardMetricsVolumeSource getDownwardMetrics() {
    return downwardMetrics;
  }

  public void setDownwardMetrics(V1VmDownwardMetricsVolumeSource downwardMetrics) {
    this.downwardMetrics = downwardMetrics;
  }

  public V1VmVolume emptyDisk(V1VmEmptyDiskSource emptyDisk) {
    this.emptyDisk = emptyDisk;
    return this;
  }

   /**
   * Get emptyDisk
   * @return emptyDisk
  **/
  @Schema(description = "")
  public V1VmEmptyDiskSource getEmptyDisk() {
    return emptyDisk;
  }

  public void setEmptyDisk(V1VmEmptyDiskSource emptyDisk) {
    this.emptyDisk = emptyDisk;
  }

  public V1VmVolume ephemeral(V1VmEphemeralVolumeSource ephemeral) {
    this.ephemeral = ephemeral;
    return this;
  }

   /**
   * Get ephemeral
   * @return ephemeral
  **/
  @Schema(description = "")
  public V1VmEphemeralVolumeSource getEphemeral() {
    return ephemeral;
  }

  public void setEphemeral(V1VmEphemeralVolumeSource ephemeral) {
    this.ephemeral = ephemeral;
  }

  public V1VmVolume hostDisk(V1VmHostDisk hostDisk) {
    this.hostDisk = hostDisk;
    return this;
  }

   /**
   * Get hostDisk
   * @return hostDisk
  **/
  @Schema(description = "")
  public V1VmHostDisk getHostDisk() {
    return hostDisk;
  }

  public void setHostDisk(V1VmHostDisk hostDisk) {
    this.hostDisk = hostDisk;
  }

  public V1VmVolume memoryDump(V1VmMemoryDumpVolumeSource memoryDump) {
    this.memoryDump = memoryDump;
    return this;
  }

   /**
   * Get memoryDump
   * @return memoryDump
  **/
  @Schema(description = "")
  public V1VmMemoryDumpVolumeSource getMemoryDump() {
    return memoryDump;
  }

  public void setMemoryDump(V1VmMemoryDumpVolumeSource memoryDump) {
    this.memoryDump = memoryDump;
  }

  public V1VmVolume name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Volume&#x27;s name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * @return name
  **/
  @Schema(required = true, description = "Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1VmVolume persistentVolumeClaim(V1VmPersistentVolumeClaimVolumeSource persistentVolumeClaim) {
    this.persistentVolumeClaim = persistentVolumeClaim;
    return this;
  }

   /**
   * Get persistentVolumeClaim
   * @return persistentVolumeClaim
  **/
  @Schema(description = "")
  public V1VmPersistentVolumeClaimVolumeSource getPersistentVolumeClaim() {
    return persistentVolumeClaim;
  }

  public void setPersistentVolumeClaim(V1VmPersistentVolumeClaimVolumeSource persistentVolumeClaim) {
    this.persistentVolumeClaim = persistentVolumeClaim;
  }

  public V1VmVolume secret(V1VmSecretVolumeSource secret) {
    this.secret = secret;
    return this;
  }

   /**
   * Get secret
   * @return secret
  **/
  @Schema(description = "")
  public V1VmSecretVolumeSource getSecret() {
    return secret;
  }

  public void setSecret(V1VmSecretVolumeSource secret) {
    this.secret = secret;
  }

  public V1VmVolume serviceAccount(V1VmServiceAccountVolumeSource serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

   /**
   * Get serviceAccount
   * @return serviceAccount
  **/
  @Schema(description = "")
  public V1VmServiceAccountVolumeSource getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(V1VmServiceAccountVolumeSource serviceAccount) {
    this.serviceAccount = serviceAccount;
  }

  public V1VmVolume sysprep(V1VmSysprepSource sysprep) {
    this.sysprep = sysprep;
    return this;
  }

   /**
   * Get sysprep
   * @return sysprep
  **/
  @Schema(description = "")
  public V1VmSysprepSource getSysprep() {
    return sysprep;
  }

  public void setSysprep(V1VmSysprepSource sysprep) {
    this.sysprep = sysprep;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmVolume v1VmVolume = (V1VmVolume) o;
    return Objects.equals(this.cloudInitConfigDrive, v1VmVolume.cloudInitConfigDrive) &&
        Objects.equals(this.cloudInitNoCloud, v1VmVolume.cloudInitNoCloud) &&
        Objects.equals(this.configMap, v1VmVolume.configMap) &&
        Objects.equals(this.containerDisk, v1VmVolume.containerDisk) &&
        Objects.equals(this.dataVolume, v1VmVolume.dataVolume) &&
        Objects.equals(this.downwardAPI, v1VmVolume.downwardAPI) &&
        Objects.equals(this.downwardMetrics, v1VmVolume.downwardMetrics) &&
        Objects.equals(this.emptyDisk, v1VmVolume.emptyDisk) &&
        Objects.equals(this.ephemeral, v1VmVolume.ephemeral) &&
        Objects.equals(this.hostDisk, v1VmVolume.hostDisk) &&
        Objects.equals(this.memoryDump, v1VmVolume.memoryDump) &&
        Objects.equals(this.name, v1VmVolume.name) &&
        Objects.equals(this.persistentVolumeClaim, v1VmVolume.persistentVolumeClaim) &&
        Objects.equals(this.secret, v1VmVolume.secret) &&
        Objects.equals(this.serviceAccount, v1VmVolume.serviceAccount) &&
        Objects.equals(this.sysprep, v1VmVolume.sysprep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudInitConfigDrive, cloudInitNoCloud, configMap, containerDisk, dataVolume, downwardAPI, downwardMetrics, emptyDisk, ephemeral, hostDisk, memoryDump, name, persistentVolumeClaim, secret, serviceAccount, sysprep);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmVolume {\n");
    
    sb.append("    cloudInitConfigDrive: ").append(toIndentedString(cloudInitConfigDrive)).append("\n");
    sb.append("    cloudInitNoCloud: ").append(toIndentedString(cloudInitNoCloud)).append("\n");
    sb.append("    configMap: ").append(toIndentedString(configMap)).append("\n");
    sb.append("    containerDisk: ").append(toIndentedString(containerDisk)).append("\n");
    sb.append("    dataVolume: ").append(toIndentedString(dataVolume)).append("\n");
    sb.append("    downwardAPI: ").append(toIndentedString(downwardAPI)).append("\n");
    sb.append("    downwardMetrics: ").append(toIndentedString(downwardMetrics)).append("\n");
    sb.append("    emptyDisk: ").append(toIndentedString(emptyDisk)).append("\n");
    sb.append("    ephemeral: ").append(toIndentedString(ephemeral)).append("\n");
    sb.append("    hostDisk: ").append(toIndentedString(hostDisk)).append("\n");
    sb.append("    memoryDump: ").append(toIndentedString(memoryDump)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    persistentVolumeClaim: ").append(toIndentedString(persistentVolumeClaim)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    sysprep: ").append(toIndentedString(sysprep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
