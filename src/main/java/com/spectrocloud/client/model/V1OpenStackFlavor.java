/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * OpenStack flavor entity. Flavor represent (virtual) hardware configurations for server resources
 */
@Schema(description = "OpenStack flavor entity. Flavor represent (virtual) hardware configurations for server resources")


public class V1OpenStackFlavor {
  @SerializedName("disk")
  private Integer disk = null;

  @SerializedName("ephemeral")
  private Integer ephemeral = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("memory")
  private Integer memory = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("vcpus")
  private Integer vcpus = null;

  public V1OpenStackFlavor disk(Integer disk) {
    this.disk = disk;
    return this;
  }

   /**
   * Disk is the amount of root disk, measured in GB
   * @return disk
  **/
  @Schema(description = "Disk is the amount of root disk, measured in GB")
  public Integer getDisk() {
    return disk;
  }

  public void setDisk(Integer disk) {
    this.disk = disk;
  }

  public V1OpenStackFlavor ephemeral(Integer ephemeral) {
    this.ephemeral = ephemeral;
    return this;
  }

   /**
   * Ephemeral is the amount of ephemeral disk space, measured in GB
   * @return ephemeral
  **/
  @Schema(description = "Ephemeral is the amount of ephemeral disk space, measured in GB")
  public Integer getEphemeral() {
    return ephemeral;
  }

  public void setEphemeral(Integer ephemeral) {
    this.ephemeral = ephemeral;
  }

  public V1OpenStackFlavor id(String id) {
    this.id = id;
    return this;
  }

   /**
   * ID is the flavor&#x27;s unique ID
   * @return id
  **/
  @Schema(description = "ID is the flavor's unique ID")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public V1OpenStackFlavor memory(Integer memory) {
    this.memory = memory;
    return this;
  }

   /**
   * Amount of memory, measured in MB
   * @return memory
  **/
  @Schema(description = "Amount of memory, measured in MB")
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }

  public V1OpenStackFlavor name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name is the name of the flavor
   * @return name
  **/
  @Schema(description = "Name is the name of the flavor")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1OpenStackFlavor vcpus(Integer vcpus) {
    this.vcpus = vcpus;
    return this;
  }

   /**
   * VCPUs indicates how many (virtual) CPUs are available for this flavor
   * @return vcpus
  **/
  @Schema(description = "VCPUs indicates how many (virtual) CPUs are available for this flavor")
  public Integer getVcpus() {
    return vcpus;
  }

  public void setVcpus(Integer vcpus) {
    this.vcpus = vcpus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1OpenStackFlavor v1OpenStackFlavor = (V1OpenStackFlavor) o;
    return Objects.equals(this.disk, v1OpenStackFlavor.disk) &&
        Objects.equals(this.ephemeral, v1OpenStackFlavor.ephemeral) &&
        Objects.equals(this.id, v1OpenStackFlavor.id) &&
        Objects.equals(this.memory, v1OpenStackFlavor.memory) &&
        Objects.equals(this.name, v1OpenStackFlavor.name) &&
        Objects.equals(this.vcpus, v1OpenStackFlavor.vcpus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disk, ephemeral, id, memory, name, vcpus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1OpenStackFlavor {\n");
    
    sb.append("    disk: ").append(toIndentedString(disk)).append("\n");
    sb.append("    ephemeral: ").append(toIndentedString(ephemeral)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    vcpus: ").append(toIndentedString(vcpus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
