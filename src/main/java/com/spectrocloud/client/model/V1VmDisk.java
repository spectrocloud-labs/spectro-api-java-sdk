/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmBlockSize;
import com.spectrocloud.client.model.V1VmCDRomTarget;
import com.spectrocloud.client.model.V1VmDiskTarget;
import com.spectrocloud.client.model.V1VmLunTarget;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * V1VmDisk
 */



public class V1VmDisk {
  @SerializedName("blockSize")
  private V1VmBlockSize blockSize = null;

  @SerializedName("bootOrder")
  private Integer bootOrder = null;

  @SerializedName("cache")
  private String cache = null;

  @SerializedName("cdrom")
  private V1VmCDRomTarget cdrom = null;

  @SerializedName("dedicatedIOThread")
  private Boolean dedicatedIOThread = null;

  @SerializedName("disk")
  private V1VmDiskTarget disk = null;

  @SerializedName("io")
  private String io = null;

  @SerializedName("lun")
  private V1VmLunTarget lun = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("serial")
  private String serial = null;

  @SerializedName("shareable")
  private Boolean shareable = null;

  @SerializedName("tag")
  private String tag = null;

  public V1VmDisk blockSize(V1VmBlockSize blockSize) {
    this.blockSize = blockSize;
    return this;
  }

   /**
   * Get blockSize
   * @return blockSize
  **/
  @Schema(description = "")
  public V1VmBlockSize getBlockSize() {
    return blockSize;
  }

  public void setBlockSize(V1VmBlockSize blockSize) {
    this.blockSize = blockSize;
  }

  public V1VmDisk bootOrder(Integer bootOrder) {
    this.bootOrder = bootOrder;
    return this;
  }

   /**
   * BootOrder is an integer value &gt; 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.
   * @return bootOrder
  **/
  @Schema(description = "BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.")
  public Integer getBootOrder() {
    return bootOrder;
  }

  public void setBootOrder(Integer bootOrder) {
    this.bootOrder = bootOrder;
  }

  public V1VmDisk cache(String cache) {
    this.cache = cache;
    return this;
  }

   /**
   * Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.
   * @return cache
  **/
  @Schema(description = "Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.")
  public String getCache() {
    return cache;
  }

  public void setCache(String cache) {
    this.cache = cache;
  }

  public V1VmDisk cdrom(V1VmCDRomTarget cdrom) {
    this.cdrom = cdrom;
    return this;
  }

   /**
   * Get cdrom
   * @return cdrom
  **/
  @Schema(description = "")
  public V1VmCDRomTarget getCdrom() {
    return cdrom;
  }

  public void setCdrom(V1VmCDRomTarget cdrom) {
    this.cdrom = cdrom;
  }

  public V1VmDisk dedicatedIOThread(Boolean dedicatedIOThread) {
    this.dedicatedIOThread = dedicatedIOThread;
    return this;
  }

   /**
   * dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads &#x3D; true. Defaults to false.
   * @return dedicatedIOThread
  **/
  @Schema(description = "dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.")
  public Boolean isDedicatedIOThread() {
    return dedicatedIOThread;
  }

  public void setDedicatedIOThread(Boolean dedicatedIOThread) {
    this.dedicatedIOThread = dedicatedIOThread;
  }

  public V1VmDisk disk(V1VmDiskTarget disk) {
    this.disk = disk;
    return this;
  }

   /**
   * Get disk
   * @return disk
  **/
  @Schema(description = "")
  public V1VmDiskTarget getDisk() {
    return disk;
  }

  public void setDisk(V1VmDiskTarget disk) {
    this.disk = disk;
  }

  public V1VmDisk io(String io) {
    this.io = io;
    return this;
  }

   /**
   * IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.
   * @return io
  **/
  @Schema(description = "IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.")
  public String getIo() {
    return io;
  }

  public void setIo(String io) {
    this.io = io;
  }

  public V1VmDisk lun(V1VmLunTarget lun) {
    this.lun = lun;
    return this;
  }

   /**
   * Get lun
   * @return lun
  **/
  @Schema(description = "")
  public V1VmLunTarget getLun() {
    return lun;
  }

  public void setLun(V1VmLunTarget lun) {
    this.lun = lun;
  }

  public V1VmDisk name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name is the device name
   * @return name
  **/
  @Schema(required = true, description = "Name is the device name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1VmDisk serial(String serial) {
    this.serial = serial;
    return this;
  }

   /**
   * Serial provides the ability to specify a serial number for the disk device.
   * @return serial
  **/
  @Schema(description = "Serial provides the ability to specify a serial number for the disk device.")
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }

  public V1VmDisk shareable(Boolean shareable) {
    this.shareable = shareable;
    return this;
  }

   /**
   * If specified the disk is made sharable and multiple write from different VMs are permitted
   * @return shareable
  **/
  @Schema(description = "If specified the disk is made sharable and multiple write from different VMs are permitted")
  public Boolean isShareable() {
    return shareable;
  }

  public void setShareable(Boolean shareable) {
    this.shareable = shareable;
  }

  public V1VmDisk tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * If specified, disk address and its tag will be provided to the guest via config drive metadata
   * @return tag
  **/
  @Schema(description = "If specified, disk address and its tag will be provided to the guest via config drive metadata")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmDisk v1VmDisk = (V1VmDisk) o;
    return Objects.equals(this.blockSize, v1VmDisk.blockSize) &&
        Objects.equals(this.bootOrder, v1VmDisk.bootOrder) &&
        Objects.equals(this.cache, v1VmDisk.cache) &&
        Objects.equals(this.cdrom, v1VmDisk.cdrom) &&
        Objects.equals(this.dedicatedIOThread, v1VmDisk.dedicatedIOThread) &&
        Objects.equals(this.disk, v1VmDisk.disk) &&
        Objects.equals(this.io, v1VmDisk.io) &&
        Objects.equals(this.lun, v1VmDisk.lun) &&
        Objects.equals(this.name, v1VmDisk.name) &&
        Objects.equals(this.serial, v1VmDisk.serial) &&
        Objects.equals(this.shareable, v1VmDisk.shareable) &&
        Objects.equals(this.tag, v1VmDisk.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockSize, bootOrder, cache, cdrom, dedicatedIOThread, disk, io, lun, name, serial, shareable, tag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmDisk {\n");
    
    sb.append("    blockSize: ").append(toIndentedString(blockSize)).append("\n");
    sb.append("    bootOrder: ").append(toIndentedString(bootOrder)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    cdrom: ").append(toIndentedString(cdrom)).append("\n");
    sb.append("    dedicatedIOThread: ").append(toIndentedString(dedicatedIOThread)).append("\n");
    sb.append("    disk: ").append(toIndentedString(disk)).append("\n");
    sb.append("    io: ").append(toIndentedString(io)).append("\n");
    sb.append("    lun: ").append(toIndentedString(lun)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    shareable: ").append(toIndentedString(shareable)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
