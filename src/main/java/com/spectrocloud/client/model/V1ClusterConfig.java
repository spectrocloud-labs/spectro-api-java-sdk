/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1ClusterResources;
import com.spectrocloud.client.model.V1FipsConfig;
import com.spectrocloud.client.model.V1HostClusterConfig;
import com.spectrocloud.client.model.V1LifecycleConfig;
import com.spectrocloud.client.model.V1MachineHealthCheckConfig;
import com.spectrocloud.client.model.V1MachineManagementConfig;
import com.spectrocloud.client.model.V1ResourceReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * V1ClusterConfig
 */



public class V1ClusterConfig {
  @SerializedName("clusterRbac")
  private List<V1ResourceReference> clusterRbac = null;

  @SerializedName("clusterResources")
  private V1ClusterResources clusterResources = null;

  @SerializedName("controlPlaneHealthCheckTimeout")
  private String controlPlaneHealthCheckTimeout = null;

  @SerializedName("fips")
  private V1FipsConfig fips = null;

  @SerializedName("hostClusterConfig")
  private V1HostClusterConfig hostClusterConfig = null;

  @SerializedName("lifecycleConfig")
  private V1LifecycleConfig lifecycleConfig = null;

  @SerializedName("machineHealthConfig")
  private V1MachineHealthCheckConfig machineHealthConfig = null;

  @SerializedName("machineManagementConfig")
  private V1MachineManagementConfig machineManagementConfig = null;

  @SerializedName("updateWorkerPoolsInParallel")
  private Boolean updateWorkerPoolsInParallel = null;

  public V1ClusterConfig clusterRbac(List<V1ResourceReference> clusterRbac) {
    this.clusterRbac = clusterRbac;
    return this;
  }

  public V1ClusterConfig addClusterRbacItem(V1ResourceReference clusterRbacItem) {
    if (this.clusterRbac == null) {
      this.clusterRbac = new ArrayList<V1ResourceReference>();
    }
    this.clusterRbac.add(clusterRbacItem);
    return this;
  }

   /**
   * Deprecated. Use clusterResources
   * @return clusterRbac
  **/
  @Schema(description = "Deprecated. Use clusterResources")
  public List<V1ResourceReference> getClusterRbac() {
    return clusterRbac;
  }

  public void setClusterRbac(List<V1ResourceReference> clusterRbac) {
    this.clusterRbac = clusterRbac;
  }

  public V1ClusterConfig clusterResources(V1ClusterResources clusterResources) {
    this.clusterResources = clusterResources;
    return this;
  }

   /**
   * Get clusterResources
   * @return clusterResources
  **/
  @Schema(description = "")
  public V1ClusterResources getClusterResources() {
    return clusterResources;
  }

  public void setClusterResources(V1ClusterResources clusterResources) {
    this.clusterResources = clusterResources;
  }

  public V1ClusterConfig controlPlaneHealthCheckTimeout(String controlPlaneHealthCheckTimeout) {
    this.controlPlaneHealthCheckTimeout = controlPlaneHealthCheckTimeout;
    return this;
  }

   /**
   * ControlPlaneHealthCheckTimeout is the timeout to check for ready state of the control plane nodes. If the node is not ready within the time out set, the node will be deleted and a new node will be launched.
   * @return controlPlaneHealthCheckTimeout
  **/
  @Schema(description = "ControlPlaneHealthCheckTimeout is the timeout to check for ready state of the control plane nodes. If the node is not ready within the time out set, the node will be deleted and a new node will be launched.")
  public String getControlPlaneHealthCheckTimeout() {
    return controlPlaneHealthCheckTimeout;
  }

  public void setControlPlaneHealthCheckTimeout(String controlPlaneHealthCheckTimeout) {
    this.controlPlaneHealthCheckTimeout = controlPlaneHealthCheckTimeout;
  }

  public V1ClusterConfig fips(V1FipsConfig fips) {
    this.fips = fips;
    return this;
  }

   /**
   * Get fips
   * @return fips
  **/
  @Schema(description = "")
  public V1FipsConfig getFips() {
    return fips;
  }

  public void setFips(V1FipsConfig fips) {
    this.fips = fips;
  }

  public V1ClusterConfig hostClusterConfig(V1HostClusterConfig hostClusterConfig) {
    this.hostClusterConfig = hostClusterConfig;
    return this;
  }

   /**
   * Get hostClusterConfig
   * @return hostClusterConfig
  **/
  @Schema(description = "")
  public V1HostClusterConfig getHostClusterConfig() {
    return hostClusterConfig;
  }

  public void setHostClusterConfig(V1HostClusterConfig hostClusterConfig) {
    this.hostClusterConfig = hostClusterConfig;
  }

  public V1ClusterConfig lifecycleConfig(V1LifecycleConfig lifecycleConfig) {
    this.lifecycleConfig = lifecycleConfig;
    return this;
  }

   /**
   * Get lifecycleConfig
   * @return lifecycleConfig
  **/
  @Schema(description = "")
  public V1LifecycleConfig getLifecycleConfig() {
    return lifecycleConfig;
  }

  public void setLifecycleConfig(V1LifecycleConfig lifecycleConfig) {
    this.lifecycleConfig = lifecycleConfig;
  }

  public V1ClusterConfig machineHealthConfig(V1MachineHealthCheckConfig machineHealthConfig) {
    this.machineHealthConfig = machineHealthConfig;
    return this;
  }

   /**
   * Get machineHealthConfig
   * @return machineHealthConfig
  **/
  @Schema(description = "")
  public V1MachineHealthCheckConfig getMachineHealthConfig() {
    return machineHealthConfig;
  }

  public void setMachineHealthConfig(V1MachineHealthCheckConfig machineHealthConfig) {
    this.machineHealthConfig = machineHealthConfig;
  }

  public V1ClusterConfig machineManagementConfig(V1MachineManagementConfig machineManagementConfig) {
    this.machineManagementConfig = machineManagementConfig;
    return this;
  }

   /**
   * Get machineManagementConfig
   * @return machineManagementConfig
  **/
  @Schema(description = "")
  public V1MachineManagementConfig getMachineManagementConfig() {
    return machineManagementConfig;
  }

  public void setMachineManagementConfig(V1MachineManagementConfig machineManagementConfig) {
    this.machineManagementConfig = machineManagementConfig;
  }

  public V1ClusterConfig updateWorkerPoolsInParallel(Boolean updateWorkerPoolsInParallel) {
    this.updateWorkerPoolsInParallel = updateWorkerPoolsInParallel;
    return this;
  }

   /**
   * UpdateWorkerPoolsInParallel is used to decide if the update of workerpools happen in parallel. When this flag is false, the workerpools are updated sequentially.
   * @return updateWorkerPoolsInParallel
  **/
  @Schema(description = "UpdateWorkerPoolsInParallel is used to decide if the update of workerpools happen in parallel. When this flag is false, the workerpools are updated sequentially.")
  public Boolean isUpdateWorkerPoolsInParallel() {
    return updateWorkerPoolsInParallel;
  }

  public void setUpdateWorkerPoolsInParallel(Boolean updateWorkerPoolsInParallel) {
    this.updateWorkerPoolsInParallel = updateWorkerPoolsInParallel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ClusterConfig v1ClusterConfig = (V1ClusterConfig) o;
    return Objects.equals(this.clusterRbac, v1ClusterConfig.clusterRbac) &&
        Objects.equals(this.clusterResources, v1ClusterConfig.clusterResources) &&
        Objects.equals(this.controlPlaneHealthCheckTimeout, v1ClusterConfig.controlPlaneHealthCheckTimeout) &&
        Objects.equals(this.fips, v1ClusterConfig.fips) &&
        Objects.equals(this.hostClusterConfig, v1ClusterConfig.hostClusterConfig) &&
        Objects.equals(this.lifecycleConfig, v1ClusterConfig.lifecycleConfig) &&
        Objects.equals(this.machineHealthConfig, v1ClusterConfig.machineHealthConfig) &&
        Objects.equals(this.machineManagementConfig, v1ClusterConfig.machineManagementConfig) &&
        Objects.equals(this.updateWorkerPoolsInParallel, v1ClusterConfig.updateWorkerPoolsInParallel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterRbac, clusterResources, controlPlaneHealthCheckTimeout, fips, hostClusterConfig, lifecycleConfig, machineHealthConfig, machineManagementConfig, updateWorkerPoolsInParallel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ClusterConfig {\n");
    
    sb.append("    clusterRbac: ").append(toIndentedString(clusterRbac)).append("\n");
    sb.append("    clusterResources: ").append(toIndentedString(clusterResources)).append("\n");
    sb.append("    controlPlaneHealthCheckTimeout: ").append(toIndentedString(controlPlaneHealthCheckTimeout)).append("\n");
    sb.append("    fips: ").append(toIndentedString(fips)).append("\n");
    sb.append("    hostClusterConfig: ").append(toIndentedString(hostClusterConfig)).append("\n");
    sb.append("    lifecycleConfig: ").append(toIndentedString(lifecycleConfig)).append("\n");
    sb.append("    machineHealthConfig: ").append(toIndentedString(machineHealthConfig)).append("\n");
    sb.append("    machineManagementConfig: ").append(toIndentedString(machineManagementConfig)).append("\n");
    sb.append("    updateWorkerPoolsInParallel: ").append(toIndentedString(updateWorkerPoolsInParallel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
