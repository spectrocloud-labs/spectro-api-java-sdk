/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1CloudType;
import com.spectrocloud.client.model.V1ObjectReference;
import com.spectrocloud.client.model.V1PackLayer;
import com.spectrocloud.client.model.V1PackPreset;
import com.spectrocloud.client.model.V1PackSchema;
import com.spectrocloud.client.model.V1PackTemplate;
import com.spectrocloud.client.model.V1PackType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Pack object
 */
@Schema(description = "Pack object")


public class V1PackSummarySpec {
  @SerializedName("addonSubType")
  private String addonSubType = null;

  @SerializedName("addonType")
  private String addonType = null;

  @SerializedName("annotations")
  private Map<String, String> annotations = null;

  @SerializedName("cloudTypes")
  private List<V1CloudType> cloudTypes = null;

  @SerializedName("digest")
  private String digest = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("eol")
  private String eol = null;

  @SerializedName("group")
  private String group = null;

  @SerializedName("layer")
  private V1PackLayer layer = null;

  @SerializedName("logoUrl")
  private String logoUrl = null;

  @SerializedName("manifests")
  private List<V1ObjectReference> manifests = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("presets")
  private List<V1PackPreset> presets = null;

  @SerializedName("registryUid")
  private String registryUid = null;

  @SerializedName("schema")
  private List<V1PackSchema> schema = null;

  @SerializedName("template")
  private V1PackTemplate template = null;

  @SerializedName("type")
  private V1PackType type = null;

  @SerializedName("values")
  private String values = null;

  @SerializedName("version")
  private String version = null;

  public V1PackSummarySpec addonSubType(String addonSubType) {
    this.addonSubType = addonSubType;
    return this;
  }

   /**
   * Pack add-on sub type such as monitoring, db etc
   * @return addonSubType
  **/
  @Schema(description = "Pack add-on sub type such as monitoring, db etc")
  public String getAddonSubType() {
    return addonSubType;
  }

  public void setAddonSubType(String addonSubType) {
    this.addonSubType = addonSubType;
  }

  public V1PackSummarySpec addonType(String addonType) {
    this.addonType = addonType;
    return this;
  }

   /**
   * Pack add-on type such as logging, monitoring, security etc
   * @return addonType
  **/
  @Schema(description = "Pack add-on type such as logging, monitoring, security etc")
  public String getAddonType() {
    return addonType;
  }

  public void setAddonType(String addonType) {
    this.addonType = addonType;
  }

  public V1PackSummarySpec annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public V1PackSummarySpec putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<String, String>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * Pack annotations is used to allow pack to add more arbitrary configurations
   * @return annotations
  **/
  @Schema(description = "Pack annotations is used to allow pack to add more arbitrary configurations")
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }

  public V1PackSummarySpec cloudTypes(List<V1CloudType> cloudTypes) {
    this.cloudTypes = cloudTypes;
    return this;
  }

  public V1PackSummarySpec addCloudTypesItem(V1CloudType cloudTypesItem) {
    if (this.cloudTypes == null) {
      this.cloudTypes = new ArrayList<V1CloudType>();
    }
    this.cloudTypes.add(cloudTypesItem);
    return this;
  }

   /**
   * Pack supported cloud types
   * @return cloudTypes
  **/
  @Schema(description = "Pack supported cloud types")
  public List<V1CloudType> getCloudTypes() {
    return cloudTypes;
  }

  public void setCloudTypes(List<V1CloudType> cloudTypes) {
    this.cloudTypes = cloudTypes;
  }

  public V1PackSummarySpec digest(String digest) {
    this.digest = digest;
    return this;
  }

   /**
   * Pack digest
   * @return digest
  **/
  @Schema(description = "Pack digest")
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }

  public V1PackSummarySpec displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Pack display name
   * @return displayName
  **/
  @Schema(description = "Pack display name")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public V1PackSummarySpec eol(String eol) {
    this.eol = eol;
    return this;
  }

   /**
   * Pack end of life, date format: yyyy-MM-dd
   * @return eol
  **/
  @Schema(description = "Pack end of life, date format: yyyy-MM-dd")
  public String getEol() {
    return eol;
  }

  public void setEol(String eol) {
    this.eol = eol;
  }

  public V1PackSummarySpec group(String group) {
    this.group = group;
    return this;
  }

   /**
   * Pack group
   * @return group
  **/
  @Schema(description = "Pack group")
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public V1PackSummarySpec layer(V1PackLayer layer) {
    this.layer = layer;
    return this;
  }

   /**
   * Get layer
   * @return layer
  **/
  @Schema(description = "")
  public V1PackLayer getLayer() {
    return layer;
  }

  public void setLayer(V1PackLayer layer) {
    this.layer = layer;
  }

  public V1PackSummarySpec logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * Pack logo url
   * @return logoUrl
  **/
  @Schema(description = "Pack logo url")
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public V1PackSummarySpec manifests(List<V1ObjectReference> manifests) {
    this.manifests = manifests;
    return this;
  }

  public V1PackSummarySpec addManifestsItem(V1ObjectReference manifestsItem) {
    if (this.manifests == null) {
      this.manifests = new ArrayList<V1ObjectReference>();
    }
    this.manifests.add(manifestsItem);
    return this;
  }

   /**
   * Pack manifests are additional content as part of the cluster profile
   * @return manifests
  **/
  @Schema(description = "Pack manifests are additional content as part of the cluster profile")
  public List<V1ObjectReference> getManifests() {
    return manifests;
  }

  public void setManifests(List<V1ObjectReference> manifests) {
    this.manifests = manifests;
  }

  public V1PackSummarySpec name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Pack name
   * @return name
  **/
  @Schema(description = "Pack name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1PackSummarySpec presets(List<V1PackPreset> presets) {
    this.presets = presets;
    return this;
  }

  public V1PackSummarySpec addPresetsItem(V1PackPreset presetsItem) {
    if (this.presets == null) {
      this.presets = new ArrayList<V1PackPreset>();
    }
    this.presets.add(presetsItem);
    return this;
  }

   /**
   * Pack presets are the set of configurations applied on user selection of presets
   * @return presets
  **/
  @Schema(description = "Pack presets are the set of configurations applied on user selection of presets")
  public List<V1PackPreset> getPresets() {
    return presets;
  }

  public void setPresets(List<V1PackPreset> presets) {
    this.presets = presets;
  }

  public V1PackSummarySpec registryUid(String registryUid) {
    this.registryUid = registryUid;
    return this;
  }

   /**
   * Pack registry uid
   * @return registryUid
  **/
  @Schema(description = "Pack registry uid")
  public String getRegistryUid() {
    return registryUid;
  }

  public void setRegistryUid(String registryUid) {
    this.registryUid = registryUid;
  }

  public V1PackSummarySpec schema(List<V1PackSchema> schema) {
    this.schema = schema;
    return this;
  }

  public V1PackSummarySpec addSchemaItem(V1PackSchema schemaItem) {
    if (this.schema == null) {
      this.schema = new ArrayList<V1PackSchema>();
    }
    this.schema.add(schemaItem);
    return this;
  }

   /**
   * Pack schema contains constraints such as data type, format, hints for the pack values
   * @return schema
  **/
  @Schema(description = "Pack schema contains constraints such as data type, format, hints for the pack values")
  public List<V1PackSchema> getSchema() {
    return schema;
  }

  public void setSchema(List<V1PackSchema> schema) {
    this.schema = schema;
  }

  public V1PackSummarySpec template(V1PackTemplate template) {
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @Schema(description = "")
  public V1PackTemplate getTemplate() {
    return template;
  }

  public void setTemplate(V1PackTemplate template) {
    this.template = template;
  }

  public V1PackSummarySpec type(V1PackType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public V1PackType getType() {
    return type;
  }

  public void setType(V1PackType type) {
    this.type = type;
  }

  public V1PackSummarySpec values(String values) {
    this.values = values;
    return this;
  }

   /**
   * Pack values
   * @return values
  **/
  @Schema(description = "Pack values")
  public String getValues() {
    return values;
  }

  public void setValues(String values) {
    this.values = values;
  }

  public V1PackSummarySpec version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Pack version
   * @return version
  **/
  @Schema(description = "Pack version")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PackSummarySpec v1PackSummarySpec = (V1PackSummarySpec) o;
    return Objects.equals(this.addonSubType, v1PackSummarySpec.addonSubType) &&
        Objects.equals(this.addonType, v1PackSummarySpec.addonType) &&
        Objects.equals(this.annotations, v1PackSummarySpec.annotations) &&
        Objects.equals(this.cloudTypes, v1PackSummarySpec.cloudTypes) &&
        Objects.equals(this.digest, v1PackSummarySpec.digest) &&
        Objects.equals(this.displayName, v1PackSummarySpec.displayName) &&
        Objects.equals(this.eol, v1PackSummarySpec.eol) &&
        Objects.equals(this.group, v1PackSummarySpec.group) &&
        Objects.equals(this.layer, v1PackSummarySpec.layer) &&
        Objects.equals(this.logoUrl, v1PackSummarySpec.logoUrl) &&
        Objects.equals(this.manifests, v1PackSummarySpec.manifests) &&
        Objects.equals(this.name, v1PackSummarySpec.name) &&
        Objects.equals(this.presets, v1PackSummarySpec.presets) &&
        Objects.equals(this.registryUid, v1PackSummarySpec.registryUid) &&
        Objects.equals(this.schema, v1PackSummarySpec.schema) &&
        Objects.equals(this.template, v1PackSummarySpec.template) &&
        Objects.equals(this.type, v1PackSummarySpec.type) &&
        Objects.equals(this.values, v1PackSummarySpec.values) &&
        Objects.equals(this.version, v1PackSummarySpec.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addonSubType, addonType, annotations, cloudTypes, digest, displayName, eol, group, layer, logoUrl, manifests, name, presets, registryUid, schema, template, type, values, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PackSummarySpec {\n");
    
    sb.append("    addonSubType: ").append(toIndentedString(addonSubType)).append("\n");
    sb.append("    addonType: ").append(toIndentedString(addonType)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    cloudTypes: ").append(toIndentedString(cloudTypes)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    eol: ").append(toIndentedString(eol)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    manifests: ").append(toIndentedString(manifests)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    presets: ").append(toIndentedString(presets)).append("\n");
    sb.append("    registryUid: ").append(toIndentedString(registryUid)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
