/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1ClusterProfileTemplate;
import com.spectrocloud.client.model.V1ClusterProfileVersion;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ClusterProfileTemplate can be in draft mode, or published mode User only see the latest published template, and (or) the draft template User can apply either the draft version or the latest published version to a cluster when user create a draft version, just copy the Published template, increment the version, and keep changing the draft template without increment the draft version when user publish a draft, the version is fixed, and won&#x27;t be able to make any modification on published template For each clusterprofile that has a published version, there will be a ClusterProfileArchive automatically created when user publish a draft, the published version will also be copied over to the corresponding ClusterProfileArchive it is just in case in the future for whatever reason we may want to expose earlier versions
 */
@Schema(description = "ClusterProfileTemplate can be in draft mode, or published mode User only see the latest published template, and (or) the draft template User can apply either the draft version or the latest published version to a cluster when user create a draft version, just copy the Published template, increment the version, and keep changing the draft template without increment the draft version when user publish a draft, the version is fixed, and won't be able to make any modification on published template For each clusterprofile that has a published version, there will be a ClusterProfileArchive automatically created when user publish a draft, the published version will also be copied over to the corresponding ClusterProfileArchive it is just in case in the future for whatever reason we may want to expose earlier versions")


public class V1ClusterProfileSpec {
  @SerializedName("draft")
  private V1ClusterProfileTemplate draft = null;

  @SerializedName("published")
  private V1ClusterProfileTemplate published = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("versions")
  private List<V1ClusterProfileVersion> versions = null;

  public V1ClusterProfileSpec draft(V1ClusterProfileTemplate draft) {
    this.draft = draft;
    return this;
  }

   /**
   * Get draft
   * @return draft
  **/
  @Schema(description = "")
  public V1ClusterProfileTemplate getDraft() {
    return draft;
  }

  public void setDraft(V1ClusterProfileTemplate draft) {
    this.draft = draft;
  }

  public V1ClusterProfileSpec published(V1ClusterProfileTemplate published) {
    this.published = published;
    return this;
  }

   /**
   * Get published
   * @return published
  **/
  @Schema(description = "")
  public V1ClusterProfileTemplate getPublished() {
    return published;
  }

  public void setPublished(V1ClusterProfileTemplate published) {
    this.published = published;
  }

  public V1ClusterProfileSpec version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public V1ClusterProfileSpec versions(List<V1ClusterProfileVersion> versions) {
    this.versions = versions;
    return this;
  }

  public V1ClusterProfileSpec addVersionsItem(V1ClusterProfileVersion versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<V1ClusterProfileVersion>();
    }
    this.versions.add(versionsItem);
    return this;
  }

   /**
   * Cluster profile&#x27;s list of all the versions
   * @return versions
  **/
  @Schema(description = "Cluster profile's list of all the versions")
  public List<V1ClusterProfileVersion> getVersions() {
    return versions;
  }

  public void setVersions(List<V1ClusterProfileVersion> versions) {
    this.versions = versions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ClusterProfileSpec v1ClusterProfileSpec = (V1ClusterProfileSpec) o;
    return Objects.equals(this.draft, v1ClusterProfileSpec.draft) &&
        Objects.equals(this.published, v1ClusterProfileSpec.published) &&
        Objects.equals(this.version, v1ClusterProfileSpec.version) &&
        Objects.equals(this.versions, v1ClusterProfileSpec.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(draft, published, version, versions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ClusterProfileSpec {\n");
    
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
