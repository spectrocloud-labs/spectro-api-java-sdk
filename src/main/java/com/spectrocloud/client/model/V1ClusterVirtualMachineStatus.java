/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmVirtualMachineCondition;
import com.spectrocloud.client.model.V1VmVirtualMachineMemoryDumpRequest;
import com.spectrocloud.client.model.V1VmVirtualMachineStartFailure;
import com.spectrocloud.client.model.V1VmVirtualMachineStateChangeRequest;
import com.spectrocloud.client.model.V1VmVirtualMachineVolumeRequest;
import com.spectrocloud.client.model.V1VmVolumeSnapshotStatus;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing
 */
@Schema(description = "VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing")


public class V1ClusterVirtualMachineStatus {
  @SerializedName("conditions")
  private List<V1VmVirtualMachineCondition> conditions = null;

  @SerializedName("created")
  private Boolean created = null;

  @SerializedName("memoryDumpRequest")
  private V1VmVirtualMachineMemoryDumpRequest memoryDumpRequest = null;

  @SerializedName("printableStatus")
  private String printableStatus = null;

  @SerializedName("ready")
  private Boolean ready = null;

  @SerializedName("restoreInProgress")
  private String restoreInProgress = null;

  @SerializedName("snapshotInProgress")
  private String snapshotInProgress = null;

  @SerializedName("startFailure")
  private V1VmVirtualMachineStartFailure startFailure = null;

  @SerializedName("stateChangeRequests")
  private List<V1VmVirtualMachineStateChangeRequest> stateChangeRequests = null;

  @SerializedName("volumeRequests")
  private List<V1VmVirtualMachineVolumeRequest> volumeRequests = null;

  @SerializedName("volumeSnapshotStatuses")
  private List<V1VmVolumeSnapshotStatus> volumeSnapshotStatuses = null;

  public V1ClusterVirtualMachineStatus conditions(List<V1VmVirtualMachineCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public V1ClusterVirtualMachineStatus addConditionsItem(V1VmVirtualMachineCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<V1VmVirtualMachineCondition>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Hold the state information of the VirtualMachine and its VirtualMachineInstance
   * @return conditions
  **/
  @Schema(description = "Hold the state information of the VirtualMachine and its VirtualMachineInstance")
  public List<V1VmVirtualMachineCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<V1VmVirtualMachineCondition> conditions) {
    this.conditions = conditions;
  }

  public V1ClusterVirtualMachineStatus created(Boolean created) {
    this.created = created;
    return this;
  }

   /**
   * Created indicates if the virtual machine is created in the cluster
   * @return created
  **/
  @Schema(description = "Created indicates if the virtual machine is created in the cluster")
  public Boolean isCreated() {
    return created;
  }

  public void setCreated(Boolean created) {
    this.created = created;
  }

  public V1ClusterVirtualMachineStatus memoryDumpRequest(V1VmVirtualMachineMemoryDumpRequest memoryDumpRequest) {
    this.memoryDumpRequest = memoryDumpRequest;
    return this;
  }

   /**
   * Get memoryDumpRequest
   * @return memoryDumpRequest
  **/
  @Schema(description = "")
  public V1VmVirtualMachineMemoryDumpRequest getMemoryDumpRequest() {
    return memoryDumpRequest;
  }

  public void setMemoryDumpRequest(V1VmVirtualMachineMemoryDumpRequest memoryDumpRequest) {
    this.memoryDumpRequest = memoryDumpRequest;
  }

  public V1ClusterVirtualMachineStatus printableStatus(String printableStatus) {
    this.printableStatus = printableStatus;
    return this;
  }

   /**
   * PrintableStatus is a human readable, high-level representation of the status of the virtual machine
   * @return printableStatus
  **/
  @Schema(description = "PrintableStatus is a human readable, high-level representation of the status of the virtual machine")
  public String getPrintableStatus() {
    return printableStatus;
  }

  public void setPrintableStatus(String printableStatus) {
    this.printableStatus = printableStatus;
  }

  public V1ClusterVirtualMachineStatus ready(Boolean ready) {
    this.ready = ready;
    return this;
  }

   /**
   * Ready indicates if the virtual machine is running and ready
   * @return ready
  **/
  @Schema(description = "Ready indicates if the virtual machine is running and ready")
  public Boolean isReady() {
    return ready;
  }

  public void setReady(Boolean ready) {
    this.ready = ready;
  }

  public V1ClusterVirtualMachineStatus restoreInProgress(String restoreInProgress) {
    this.restoreInProgress = restoreInProgress;
    return this;
  }

   /**
   * RestoreInProgress is the name of the VirtualMachineRestore currently executing
   * @return restoreInProgress
  **/
  @Schema(description = "RestoreInProgress is the name of the VirtualMachineRestore currently executing")
  public String getRestoreInProgress() {
    return restoreInProgress;
  }

  public void setRestoreInProgress(String restoreInProgress) {
    this.restoreInProgress = restoreInProgress;
  }

  public V1ClusterVirtualMachineStatus snapshotInProgress(String snapshotInProgress) {
    this.snapshotInProgress = snapshotInProgress;
    return this;
  }

   /**
   * SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing
   * @return snapshotInProgress
  **/
  @Schema(description = "SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing")
  public String getSnapshotInProgress() {
    return snapshotInProgress;
  }

  public void setSnapshotInProgress(String snapshotInProgress) {
    this.snapshotInProgress = snapshotInProgress;
  }

  public V1ClusterVirtualMachineStatus startFailure(V1VmVirtualMachineStartFailure startFailure) {
    this.startFailure = startFailure;
    return this;
  }

   /**
   * Get startFailure
   * @return startFailure
  **/
  @Schema(description = "")
  public V1VmVirtualMachineStartFailure getStartFailure() {
    return startFailure;
  }

  public void setStartFailure(V1VmVirtualMachineStartFailure startFailure) {
    this.startFailure = startFailure;
  }

  public V1ClusterVirtualMachineStatus stateChangeRequests(List<V1VmVirtualMachineStateChangeRequest> stateChangeRequests) {
    this.stateChangeRequests = stateChangeRequests;
    return this;
  }

  public V1ClusterVirtualMachineStatus addStateChangeRequestsItem(V1VmVirtualMachineStateChangeRequest stateChangeRequestsItem) {
    if (this.stateChangeRequests == null) {
      this.stateChangeRequests = new ArrayList<V1VmVirtualMachineStateChangeRequest>();
    }
    this.stateChangeRequests.add(stateChangeRequestsItem);
    return this;
  }

   /**
   * StateChangeRequests indicates a list of actions that should be taken on a VMI e.g. stop a specific VMI then start a new one.
   * @return stateChangeRequests
  **/
  @Schema(description = "StateChangeRequests indicates a list of actions that should be taken on a VMI e.g. stop a specific VMI then start a new one.")
  public List<V1VmVirtualMachineStateChangeRequest> getStateChangeRequests() {
    return stateChangeRequests;
  }

  public void setStateChangeRequests(List<V1VmVirtualMachineStateChangeRequest> stateChangeRequests) {
    this.stateChangeRequests = stateChangeRequests;
  }

  public V1ClusterVirtualMachineStatus volumeRequests(List<V1VmVirtualMachineVolumeRequest> volumeRequests) {
    this.volumeRequests = volumeRequests;
    return this;
  }

  public V1ClusterVirtualMachineStatus addVolumeRequestsItem(V1VmVirtualMachineVolumeRequest volumeRequestsItem) {
    if (this.volumeRequests == null) {
      this.volumeRequests = new ArrayList<V1VmVirtualMachineVolumeRequest>();
    }
    this.volumeRequests.add(volumeRequestsItem);
    return this;
  }

   /**
   * VolumeRequests indicates a list of volumes add or remove from the VMI template and hotplug on an active running VMI.
   * @return volumeRequests
  **/
  @Schema(description = "VolumeRequests indicates a list of volumes add or remove from the VMI template and hotplug on an active running VMI.")
  public List<V1VmVirtualMachineVolumeRequest> getVolumeRequests() {
    return volumeRequests;
  }

  public void setVolumeRequests(List<V1VmVirtualMachineVolumeRequest> volumeRequests) {
    this.volumeRequests = volumeRequests;
  }

  public V1ClusterVirtualMachineStatus volumeSnapshotStatuses(List<V1VmVolumeSnapshotStatus> volumeSnapshotStatuses) {
    this.volumeSnapshotStatuses = volumeSnapshotStatuses;
    return this;
  }

  public V1ClusterVirtualMachineStatus addVolumeSnapshotStatusesItem(V1VmVolumeSnapshotStatus volumeSnapshotStatusesItem) {
    if (this.volumeSnapshotStatuses == null) {
      this.volumeSnapshotStatuses = new ArrayList<V1VmVolumeSnapshotStatus>();
    }
    this.volumeSnapshotStatuses.add(volumeSnapshotStatusesItem);
    return this;
  }

   /**
   * VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is supported by each volume.
   * @return volumeSnapshotStatuses
  **/
  @Schema(description = "VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is supported by each volume.")
  public List<V1VmVolumeSnapshotStatus> getVolumeSnapshotStatuses() {
    return volumeSnapshotStatuses;
  }

  public void setVolumeSnapshotStatuses(List<V1VmVolumeSnapshotStatus> volumeSnapshotStatuses) {
    this.volumeSnapshotStatuses = volumeSnapshotStatuses;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ClusterVirtualMachineStatus v1ClusterVirtualMachineStatus = (V1ClusterVirtualMachineStatus) o;
    return Objects.equals(this.conditions, v1ClusterVirtualMachineStatus.conditions) &&
        Objects.equals(this.created, v1ClusterVirtualMachineStatus.created) &&
        Objects.equals(this.memoryDumpRequest, v1ClusterVirtualMachineStatus.memoryDumpRequest) &&
        Objects.equals(this.printableStatus, v1ClusterVirtualMachineStatus.printableStatus) &&
        Objects.equals(this.ready, v1ClusterVirtualMachineStatus.ready) &&
        Objects.equals(this.restoreInProgress, v1ClusterVirtualMachineStatus.restoreInProgress) &&
        Objects.equals(this.snapshotInProgress, v1ClusterVirtualMachineStatus.snapshotInProgress) &&
        Objects.equals(this.startFailure, v1ClusterVirtualMachineStatus.startFailure) &&
        Objects.equals(this.stateChangeRequests, v1ClusterVirtualMachineStatus.stateChangeRequests) &&
        Objects.equals(this.volumeRequests, v1ClusterVirtualMachineStatus.volumeRequests) &&
        Objects.equals(this.volumeSnapshotStatuses, v1ClusterVirtualMachineStatus.volumeSnapshotStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, created, memoryDumpRequest, printableStatus, ready, restoreInProgress, snapshotInProgress, startFailure, stateChangeRequests, volumeRequests, volumeSnapshotStatuses);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ClusterVirtualMachineStatus {\n");
    
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    memoryDumpRequest: ").append(toIndentedString(memoryDumpRequest)).append("\n");
    sb.append("    printableStatus: ").append(toIndentedString(printableStatus)).append("\n");
    sb.append("    ready: ").append(toIndentedString(ready)).append("\n");
    sb.append("    restoreInProgress: ").append(toIndentedString(restoreInProgress)).append("\n");
    sb.append("    snapshotInProgress: ").append(toIndentedString(snapshotInProgress)).append("\n");
    sb.append("    startFailure: ").append(toIndentedString(startFailure)).append("\n");
    sb.append("    stateChangeRequests: ").append(toIndentedString(stateChangeRequests)).append("\n");
    sb.append("    volumeRequests: ").append(toIndentedString(volumeRequests)).append("\n");
    sb.append("    volumeSnapshotStatuses: ").append(toIndentedString(volumeSnapshotStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
