/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1ObjectEntity;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Cluster compliance scan specification
 */
@Schema(description = "Cluster compliance scan specification")


public class V1ClusterComplianceScanSyftDriverConfig {
  /**
   * Gets or Sets format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    CYCLONEDX_JSON("cyclonedx-json"),
    GITHUB_JSON("github-json"),
    SPDX_JSON("spdx-json"),
    SYFT_JSON("syft-json");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FormatEnum fromValue(String input) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FormatEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("format")
  private FormatEnum format = null;

  @SerializedName("labelSelector")
  private String labelSelector = null;

  @SerializedName("location")
  private V1ObjectEntity location = null;

  @SerializedName("namespace")
  private String namespace = null;

  @SerializedName("podName")
  private String podName = null;

  /**
   * Gets or Sets scope
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    CLUSTER("cluster"),
    NAMESPACE("namespace"),
    LABEL_SELECTOR("label-selector"),
    POD("pod");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScopeEnum fromValue(String input) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScopeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scope")
  private ScopeEnum scope = null;

  public V1ClusterComplianceScanSyftDriverConfig format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @Schema(description = "")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public V1ClusterComplianceScanSyftDriverConfig labelSelector(String labelSelector) {
    this.labelSelector = labelSelector;
    return this;
  }

   /**
   * Get labelSelector
   * @return labelSelector
  **/
  @Schema(description = "")
  public String getLabelSelector() {
    return labelSelector;
  }

  public void setLabelSelector(String labelSelector) {
    this.labelSelector = labelSelector;
  }

  public V1ClusterComplianceScanSyftDriverConfig location(V1ObjectEntity location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @Schema(description = "")
  public V1ObjectEntity getLocation() {
    return location;
  }

  public void setLocation(V1ObjectEntity location) {
    this.location = location;
  }

  public V1ClusterComplianceScanSyftDriverConfig namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @Schema(description = "")
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public V1ClusterComplianceScanSyftDriverConfig podName(String podName) {
    this.podName = podName;
    return this;
  }

   /**
   * Get podName
   * @return podName
  **/
  @Schema(description = "")
  public String getPodName() {
    return podName;
  }

  public void setPodName(String podName) {
    this.podName = podName;
  }

  public V1ClusterComplianceScanSyftDriverConfig scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @Schema(description = "")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ClusterComplianceScanSyftDriverConfig v1ClusterComplianceScanSyftDriverConfig = (V1ClusterComplianceScanSyftDriverConfig) o;
    return Objects.equals(this.format, v1ClusterComplianceScanSyftDriverConfig.format) &&
        Objects.equals(this.labelSelector, v1ClusterComplianceScanSyftDriverConfig.labelSelector) &&
        Objects.equals(this.location, v1ClusterComplianceScanSyftDriverConfig.location) &&
        Objects.equals(this.namespace, v1ClusterComplianceScanSyftDriverConfig.namespace) &&
        Objects.equals(this.podName, v1ClusterComplianceScanSyftDriverConfig.podName) &&
        Objects.equals(this.scope, v1ClusterComplianceScanSyftDriverConfig.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, labelSelector, location, namespace, podName, scope);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ClusterComplianceScanSyftDriverConfig {\n");
    
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    labelSelector: ").append(toIndentedString(labelSelector)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    podName: ").append(toIndentedString(podName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
