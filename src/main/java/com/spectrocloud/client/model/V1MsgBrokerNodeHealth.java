/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1MsgBrokerConnectionList;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * V1MsgBrokerNodeHealth
 */



public class V1MsgBrokerNodeHealth {
  @SerializedName("allyPublishersByTenant")
  private Map<String, V1MsgBrokerConnectionList> allyPublishersByTenant = null;

  @SerializedName("duplicateSubscribersCount")
  private Map<String, Integer> duplicateSubscribersCount = null;

  @SerializedName("hubbleSubscribersByService")
  private Map<String, V1MsgBrokerConnectionList> hubbleSubscribersByService = null;

  @SerializedName("hubbleSubscribersByTenant")
  private Map<String, V1MsgBrokerConnectionList> hubbleSubscribersByTenant = null;

  @SerializedName("hubbleSubscribersByType")
  private Map<String, V1MsgBrokerConnectionList> hubbleSubscribersByType = null;

  @SerializedName("nodeId")
  private String nodeId = null;

  @SerializedName("subscriberWithAbnormalRTT")
  private V1MsgBrokerConnectionList subscriberWithAbnormalRTT = null;

  @SerializedName("subscribersWithAbnormalSubscriptions")
  private V1MsgBrokerConnectionList subscribersWithAbnormalSubscriptions = null;

  @SerializedName("uniqueSubscribers")
  private Integer uniqueSubscribers = null;

  @SerializedName("unrecognizedClients")
  private V1MsgBrokerConnectionList unrecognizedClients = null;

  public V1MsgBrokerNodeHealth allyPublishersByTenant(Map<String, V1MsgBrokerConnectionList> allyPublishersByTenant) {
    this.allyPublishersByTenant = allyPublishersByTenant;
    return this;
  }

  public V1MsgBrokerNodeHealth putAllyPublishersByTenantItem(String key, V1MsgBrokerConnectionList allyPublishersByTenantItem) {
    if (this.allyPublishersByTenant == null) {
      this.allyPublishersByTenant = new HashMap<String, V1MsgBrokerConnectionList>();
    }
    this.allyPublishersByTenant.put(key, allyPublishersByTenantItem);
    return this;
  }

   /**
   * Get allyPublishersByTenant
   * @return allyPublishersByTenant
  **/
  @Schema(description = "")
  public Map<String, V1MsgBrokerConnectionList> getAllyPublishersByTenant() {
    return allyPublishersByTenant;
  }

  public void setAllyPublishersByTenant(Map<String, V1MsgBrokerConnectionList> allyPublishersByTenant) {
    this.allyPublishersByTenant = allyPublishersByTenant;
  }

  public V1MsgBrokerNodeHealth duplicateSubscribersCount(Map<String, Integer> duplicateSubscribersCount) {
    this.duplicateSubscribersCount = duplicateSubscribersCount;
    return this;
  }

  public V1MsgBrokerNodeHealth putDuplicateSubscribersCountItem(String key, Integer duplicateSubscribersCountItem) {
    if (this.duplicateSubscribersCount == null) {
      this.duplicateSubscribersCount = new HashMap<String, Integer>();
    }
    this.duplicateSubscribersCount.put(key, duplicateSubscribersCountItem);
    return this;
  }

   /**
   * Get duplicateSubscribersCount
   * @return duplicateSubscribersCount
  **/
  @Schema(description = "")
  public Map<String, Integer> getDuplicateSubscribersCount() {
    return duplicateSubscribersCount;
  }

  public void setDuplicateSubscribersCount(Map<String, Integer> duplicateSubscribersCount) {
    this.duplicateSubscribersCount = duplicateSubscribersCount;
  }

  public V1MsgBrokerNodeHealth hubbleSubscribersByService(Map<String, V1MsgBrokerConnectionList> hubbleSubscribersByService) {
    this.hubbleSubscribersByService = hubbleSubscribersByService;
    return this;
  }

  public V1MsgBrokerNodeHealth putHubbleSubscribersByServiceItem(String key, V1MsgBrokerConnectionList hubbleSubscribersByServiceItem) {
    if (this.hubbleSubscribersByService == null) {
      this.hubbleSubscribersByService = new HashMap<String, V1MsgBrokerConnectionList>();
    }
    this.hubbleSubscribersByService.put(key, hubbleSubscribersByServiceItem);
    return this;
  }

   /**
   * Get hubbleSubscribersByService
   * @return hubbleSubscribersByService
  **/
  @Schema(description = "")
  public Map<String, V1MsgBrokerConnectionList> getHubbleSubscribersByService() {
    return hubbleSubscribersByService;
  }

  public void setHubbleSubscribersByService(Map<String, V1MsgBrokerConnectionList> hubbleSubscribersByService) {
    this.hubbleSubscribersByService = hubbleSubscribersByService;
  }

  public V1MsgBrokerNodeHealth hubbleSubscribersByTenant(Map<String, V1MsgBrokerConnectionList> hubbleSubscribersByTenant) {
    this.hubbleSubscribersByTenant = hubbleSubscribersByTenant;
    return this;
  }

  public V1MsgBrokerNodeHealth putHubbleSubscribersByTenantItem(String key, V1MsgBrokerConnectionList hubbleSubscribersByTenantItem) {
    if (this.hubbleSubscribersByTenant == null) {
      this.hubbleSubscribersByTenant = new HashMap<String, V1MsgBrokerConnectionList>();
    }
    this.hubbleSubscribersByTenant.put(key, hubbleSubscribersByTenantItem);
    return this;
  }

   /**
   * Get hubbleSubscribersByTenant
   * @return hubbleSubscribersByTenant
  **/
  @Schema(description = "")
  public Map<String, V1MsgBrokerConnectionList> getHubbleSubscribersByTenant() {
    return hubbleSubscribersByTenant;
  }

  public void setHubbleSubscribersByTenant(Map<String, V1MsgBrokerConnectionList> hubbleSubscribersByTenant) {
    this.hubbleSubscribersByTenant = hubbleSubscribersByTenant;
  }

  public V1MsgBrokerNodeHealth hubbleSubscribersByType(Map<String, V1MsgBrokerConnectionList> hubbleSubscribersByType) {
    this.hubbleSubscribersByType = hubbleSubscribersByType;
    return this;
  }

  public V1MsgBrokerNodeHealth putHubbleSubscribersByTypeItem(String key, V1MsgBrokerConnectionList hubbleSubscribersByTypeItem) {
    if (this.hubbleSubscribersByType == null) {
      this.hubbleSubscribersByType = new HashMap<String, V1MsgBrokerConnectionList>();
    }
    this.hubbleSubscribersByType.put(key, hubbleSubscribersByTypeItem);
    return this;
  }

   /**
   * Get hubbleSubscribersByType
   * @return hubbleSubscribersByType
  **/
  @Schema(description = "")
  public Map<String, V1MsgBrokerConnectionList> getHubbleSubscribersByType() {
    return hubbleSubscribersByType;
  }

  public void setHubbleSubscribersByType(Map<String, V1MsgBrokerConnectionList> hubbleSubscribersByType) {
    this.hubbleSubscribersByType = hubbleSubscribersByType;
  }

  public V1MsgBrokerNodeHealth nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @Schema(description = "")
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }

  public V1MsgBrokerNodeHealth subscriberWithAbnormalRTT(V1MsgBrokerConnectionList subscriberWithAbnormalRTT) {
    this.subscriberWithAbnormalRTT = subscriberWithAbnormalRTT;
    return this;
  }

   /**
   * Get subscriberWithAbnormalRTT
   * @return subscriberWithAbnormalRTT
  **/
  @Schema(description = "")
  public V1MsgBrokerConnectionList getSubscriberWithAbnormalRTT() {
    return subscriberWithAbnormalRTT;
  }

  public void setSubscriberWithAbnormalRTT(V1MsgBrokerConnectionList subscriberWithAbnormalRTT) {
    this.subscriberWithAbnormalRTT = subscriberWithAbnormalRTT;
  }

  public V1MsgBrokerNodeHealth subscribersWithAbnormalSubscriptions(V1MsgBrokerConnectionList subscribersWithAbnormalSubscriptions) {
    this.subscribersWithAbnormalSubscriptions = subscribersWithAbnormalSubscriptions;
    return this;
  }

   /**
   * Get subscribersWithAbnormalSubscriptions
   * @return subscribersWithAbnormalSubscriptions
  **/
  @Schema(description = "")
  public V1MsgBrokerConnectionList getSubscribersWithAbnormalSubscriptions() {
    return subscribersWithAbnormalSubscriptions;
  }

  public void setSubscribersWithAbnormalSubscriptions(V1MsgBrokerConnectionList subscribersWithAbnormalSubscriptions) {
    this.subscribersWithAbnormalSubscriptions = subscribersWithAbnormalSubscriptions;
  }

  public V1MsgBrokerNodeHealth uniqueSubscribers(Integer uniqueSubscribers) {
    this.uniqueSubscribers = uniqueSubscribers;
    return this;
  }

   /**
   * Get uniqueSubscribers
   * @return uniqueSubscribers
  **/
  @Schema(description = "")
  public Integer getUniqueSubscribers() {
    return uniqueSubscribers;
  }

  public void setUniqueSubscribers(Integer uniqueSubscribers) {
    this.uniqueSubscribers = uniqueSubscribers;
  }

  public V1MsgBrokerNodeHealth unrecognizedClients(V1MsgBrokerConnectionList unrecognizedClients) {
    this.unrecognizedClients = unrecognizedClients;
    return this;
  }

   /**
   * Get unrecognizedClients
   * @return unrecognizedClients
  **/
  @Schema(description = "")
  public V1MsgBrokerConnectionList getUnrecognizedClients() {
    return unrecognizedClients;
  }

  public void setUnrecognizedClients(V1MsgBrokerConnectionList unrecognizedClients) {
    this.unrecognizedClients = unrecognizedClients;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1MsgBrokerNodeHealth v1MsgBrokerNodeHealth = (V1MsgBrokerNodeHealth) o;
    return Objects.equals(this.allyPublishersByTenant, v1MsgBrokerNodeHealth.allyPublishersByTenant) &&
        Objects.equals(this.duplicateSubscribersCount, v1MsgBrokerNodeHealth.duplicateSubscribersCount) &&
        Objects.equals(this.hubbleSubscribersByService, v1MsgBrokerNodeHealth.hubbleSubscribersByService) &&
        Objects.equals(this.hubbleSubscribersByTenant, v1MsgBrokerNodeHealth.hubbleSubscribersByTenant) &&
        Objects.equals(this.hubbleSubscribersByType, v1MsgBrokerNodeHealth.hubbleSubscribersByType) &&
        Objects.equals(this.nodeId, v1MsgBrokerNodeHealth.nodeId) &&
        Objects.equals(this.subscriberWithAbnormalRTT, v1MsgBrokerNodeHealth.subscriberWithAbnormalRTT) &&
        Objects.equals(this.subscribersWithAbnormalSubscriptions, v1MsgBrokerNodeHealth.subscribersWithAbnormalSubscriptions) &&
        Objects.equals(this.uniqueSubscribers, v1MsgBrokerNodeHealth.uniqueSubscribers) &&
        Objects.equals(this.unrecognizedClients, v1MsgBrokerNodeHealth.unrecognizedClients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allyPublishersByTenant, duplicateSubscribersCount, hubbleSubscribersByService, hubbleSubscribersByTenant, hubbleSubscribersByType, nodeId, subscriberWithAbnormalRTT, subscribersWithAbnormalSubscriptions, uniqueSubscribers, unrecognizedClients);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1MsgBrokerNodeHealth {\n");
    
    sb.append("    allyPublishersByTenant: ").append(toIndentedString(allyPublishersByTenant)).append("\n");
    sb.append("    duplicateSubscribersCount: ").append(toIndentedString(duplicateSubscribersCount)).append("\n");
    sb.append("    hubbleSubscribersByService: ").append(toIndentedString(hubbleSubscribersByService)).append("\n");
    sb.append("    hubbleSubscribersByTenant: ").append(toIndentedString(hubbleSubscribersByTenant)).append("\n");
    sb.append("    hubbleSubscribersByType: ").append(toIndentedString(hubbleSubscribersByType)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    subscriberWithAbnormalRTT: ").append(toIndentedString(subscriberWithAbnormalRTT)).append("\n");
    sb.append("    subscribersWithAbnormalSubscriptions: ").append(toIndentedString(subscribersWithAbnormalSubscriptions)).append("\n");
    sb.append("    uniqueSubscribers: ").append(toIndentedString(uniqueSubscribers)).append("\n");
    sb.append("    unrecognizedClients: ").append(toIndentedString(unrecognizedClients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
