/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1PackDependencyMeta;
import com.spectrocloud.client.model.V1PackPreset;
import com.spectrocloud.client.model.V1PackSchema;
import com.spectrocloud.client.model.V1PackTemplate;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * V1PackUidValues
 */



public class V1PackUidValues {
  @SerializedName("dependencies")
  private List<V1PackDependencyMeta> dependencies = null;

  @SerializedName("packUid")
  private String packUid = null;

  @SerializedName("presets")
  private List<V1PackPreset> presets = null;

  @SerializedName("schema")
  private List<V1PackSchema> schema = null;

  @SerializedName("template")
  private V1PackTemplate template = null;

  @SerializedName("values")
  private String values = null;

  public V1PackUidValues dependencies(List<V1PackDependencyMeta> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public V1PackUidValues addDependenciesItem(V1PackDependencyMeta dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<V1PackDependencyMeta>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * Pack dependencies array
   * @return dependencies
  **/
  @Schema(description = "Pack dependencies array")
  public List<V1PackDependencyMeta> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<V1PackDependencyMeta> dependencies) {
    this.dependencies = dependencies;
  }

  public V1PackUidValues packUid(String packUid) {
    this.packUid = packUid;
    return this;
  }

   /**
   * Pack uid
   * @return packUid
  **/
  @Schema(description = "Pack uid")
  public String getPackUid() {
    return packUid;
  }

  public void setPackUid(String packUid) {
    this.packUid = packUid;
  }

  public V1PackUidValues presets(List<V1PackPreset> presets) {
    this.presets = presets;
    return this;
  }

  public V1PackUidValues addPresetsItem(V1PackPreset presetsItem) {
    if (this.presets == null) {
      this.presets = new ArrayList<V1PackPreset>();
    }
    this.presets.add(presetsItem);
    return this;
  }

   /**
   * Pack presets are the set of configurations applied on user selection of presets
   * @return presets
  **/
  @Schema(description = "Pack presets are the set of configurations applied on user selection of presets")
  public List<V1PackPreset> getPresets() {
    return presets;
  }

  public void setPresets(List<V1PackPreset> presets) {
    this.presets = presets;
  }

  public V1PackUidValues schema(List<V1PackSchema> schema) {
    this.schema = schema;
    return this;
  }

  public V1PackUidValues addSchemaItem(V1PackSchema schemaItem) {
    if (this.schema == null) {
      this.schema = new ArrayList<V1PackSchema>();
    }
    this.schema.add(schemaItem);
    return this;
  }

   /**
   * Pack schema contains constraints such as data type, format, hints for the pack values
   * @return schema
  **/
  @Schema(description = "Pack schema contains constraints such as data type, format, hints for the pack values")
  public List<V1PackSchema> getSchema() {
    return schema;
  }

  public void setSchema(List<V1PackSchema> schema) {
    this.schema = schema;
  }

  public V1PackUidValues template(V1PackTemplate template) {
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @Schema(description = "")
  public V1PackTemplate getTemplate() {
    return template;
  }

  public void setTemplate(V1PackTemplate template) {
    this.template = template;
  }

  public V1PackUidValues values(String values) {
    this.values = values;
    return this;
  }

   /**
   * Pack values represents the values.yaml used as input parameters
   * @return values
  **/
  @Schema(description = "Pack values represents the values.yaml used as input parameters")
  public String getValues() {
    return values;
  }

  public void setValues(String values) {
    this.values = values;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PackUidValues v1PackUidValues = (V1PackUidValues) o;
    return Objects.equals(this.dependencies, v1PackUidValues.dependencies) &&
        Objects.equals(this.packUid, v1PackUidValues.packUid) &&
        Objects.equals(this.presets, v1PackUidValues.presets) &&
        Objects.equals(this.schema, v1PackUidValues.schema) &&
        Objects.equals(this.template, v1PackUidValues.template) &&
        Objects.equals(this.values, v1PackUidValues.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencies, packUid, presets, schema, template, values);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PackUidValues {\n");
    
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    packUid: ").append(toIndentedString(packUid)).append("\n");
    sb.append("    presets: ").append(toIndentedString(presets)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
