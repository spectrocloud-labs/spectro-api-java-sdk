/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * If set, the VM will be booted from the defined kernel / initrd.
 */
@Schema(description = "If set, the VM will be booted from the defined kernel / initrd.")


public class V1VmKernelBootContainer {
  @SerializedName("image")
  private String image = null;

  @SerializedName("imagePullPolicy")
  private String imagePullPolicy = null;

  @SerializedName("imagePullSecret")
  private String imagePullSecret = null;

  @SerializedName("initrdPath")
  private String initrdPath = null;

  @SerializedName("kernelPath")
  private String kernelPath = null;

  public V1VmKernelBootContainer image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Image that contains initrd / kernel files.
   * @return image
  **/
  @Schema(required = true, description = "Image that contains initrd / kernel files.")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public V1VmKernelBootContainer imagePullPolicy(String imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   * @return imagePullPolicy
  **/
  @Schema(description = "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images")
  public String getImagePullPolicy() {
    return imagePullPolicy;
  }

  public void setImagePullPolicy(String imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }

  public V1VmKernelBootContainer imagePullSecret(String imagePullSecret) {
    this.imagePullSecret = imagePullSecret;
    return this;
  }

   /**
   * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
   * @return imagePullSecret
  **/
  @Schema(description = "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.")
  public String getImagePullSecret() {
    return imagePullSecret;
  }

  public void setImagePullSecret(String imagePullSecret) {
    this.imagePullSecret = imagePullSecret;
  }

  public V1VmKernelBootContainer initrdPath(String initrdPath) {
    this.initrdPath = initrdPath;
    return this;
  }

   /**
   * the fully-qualified path to the ramdisk image in the host OS
   * @return initrdPath
  **/
  @Schema(description = "the fully-qualified path to the ramdisk image in the host OS")
  public String getInitrdPath() {
    return initrdPath;
  }

  public void setInitrdPath(String initrdPath) {
    this.initrdPath = initrdPath;
  }

  public V1VmKernelBootContainer kernelPath(String kernelPath) {
    this.kernelPath = kernelPath;
    return this;
  }

   /**
   * The fully-qualified path to the kernel image in the host OS
   * @return kernelPath
  **/
  @Schema(description = "The fully-qualified path to the kernel image in the host OS")
  public String getKernelPath() {
    return kernelPath;
  }

  public void setKernelPath(String kernelPath) {
    this.kernelPath = kernelPath;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmKernelBootContainer v1VmKernelBootContainer = (V1VmKernelBootContainer) o;
    return Objects.equals(this.image, v1VmKernelBootContainer.image) &&
        Objects.equals(this.imagePullPolicy, v1VmKernelBootContainer.imagePullPolicy) &&
        Objects.equals(this.imagePullSecret, v1VmKernelBootContainer.imagePullSecret) &&
        Objects.equals(this.initrdPath, v1VmKernelBootContainer.initrdPath) &&
        Objects.equals(this.kernelPath, v1VmKernelBootContainer.kernelPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, imagePullPolicy, imagePullSecret, initrdPath, kernelPath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmKernelBootContainer {\n");
    
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    imagePullSecret: ").append(toIndentedString(imagePullSecret)).append("\n");
    sb.append("    initrdPath: ").append(toIndentedString(initrdPath)).append("\n");
    sb.append("    kernelPath: ").append(toIndentedString(kernelPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
