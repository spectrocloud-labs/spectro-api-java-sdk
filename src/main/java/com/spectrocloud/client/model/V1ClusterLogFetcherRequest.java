/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1ClusterLogFetcherK8sRequest;
import com.spectrocloud.client.model.V1ClusterLogFetcherNodeRequest;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Cluster Log Fetcher Request
 */
@Schema(description = "Cluster Log Fetcher Request")


public class V1ClusterLogFetcherRequest {
  @SerializedName("duration")
  private Long duration = 10l;

  @SerializedName("k8s")
  private V1ClusterLogFetcherK8sRequest k8s = null;

  /**
   * Accepted Values - [\&quot;cluster\&quot;, \&quot;app\&quot;]. if \&quot;app\&quot; then logs will be fetched from the virtual cluster
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    CLUSTER("cluster"),
    APP("app");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModeEnum fromValue(String input) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ModeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("mode")
  private ModeEnum mode = ModeEnum.CLUSTER;

  @SerializedName("noOfLines")
  private Long noOfLines = 1000l;

  @SerializedName("node")
  private V1ClusterLogFetcherNodeRequest node = null;

  public V1ClusterLogFetcherRequest duration(Long duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Duration for which log is requested
   * @return duration
  **/
  @Schema(description = "Duration for which log is requested")
  public Long getDuration() {
    return duration;
  }

  public void setDuration(Long duration) {
    this.duration = duration;
  }

  public V1ClusterLogFetcherRequest k8s(V1ClusterLogFetcherK8sRequest k8s) {
    this.k8s = k8s;
    return this;
  }

   /**
   * Get k8s
   * @return k8s
  **/
  @Schema(description = "")
  public V1ClusterLogFetcherK8sRequest getK8s() {
    return k8s;
  }

  public void setK8s(V1ClusterLogFetcherK8sRequest k8s) {
    this.k8s = k8s;
  }

  public V1ClusterLogFetcherRequest mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Accepted Values - [\&quot;cluster\&quot;, \&quot;app\&quot;]. if \&quot;app\&quot; then logs will be fetched from the virtual cluster
   * @return mode
  **/
  @Schema(description = "Accepted Values - [\"cluster\", \"app\"]. if \"app\" then logs will be fetched from the virtual cluster")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public V1ClusterLogFetcherRequest noOfLines(Long noOfLines) {
    this.noOfLines = noOfLines;
    return this;
  }

   /**
   * No of lines of logs requested
   * @return noOfLines
  **/
  @Schema(description = "No of lines of logs requested")
  public Long getNoOfLines() {
    return noOfLines;
  }

  public void setNoOfLines(Long noOfLines) {
    this.noOfLines = noOfLines;
  }

  public V1ClusterLogFetcherRequest node(V1ClusterLogFetcherNodeRequest node) {
    this.node = node;
    return this;
  }

   /**
   * Get node
   * @return node
  **/
  @Schema(description = "")
  public V1ClusterLogFetcherNodeRequest getNode() {
    return node;
  }

  public void setNode(V1ClusterLogFetcherNodeRequest node) {
    this.node = node;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ClusterLogFetcherRequest v1ClusterLogFetcherRequest = (V1ClusterLogFetcherRequest) o;
    return Objects.equals(this.duration, v1ClusterLogFetcherRequest.duration) &&
        Objects.equals(this.k8s, v1ClusterLogFetcherRequest.k8s) &&
        Objects.equals(this.mode, v1ClusterLogFetcherRequest.mode) &&
        Objects.equals(this.noOfLines, v1ClusterLogFetcherRequest.noOfLines) &&
        Objects.equals(this.node, v1ClusterLogFetcherRequest.node);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, k8s, mode, noOfLines, node);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ClusterLogFetcherRequest {\n");
    
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    k8s: ").append(toIndentedString(k8s)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    noOfLines: ").append(toIndentedString(noOfLines)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
