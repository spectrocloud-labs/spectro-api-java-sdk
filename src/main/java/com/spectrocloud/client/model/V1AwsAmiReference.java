/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AMI is the reference to the AMI from which to create the machine instance
 */
@Schema(description = "AMI is the reference to the AMI from which to create the machine instance")


public class V1AwsAmiReference {
  /**
   * EKSOptimizedLookupType If specified, will look up an EKS Optimized image in SSM Parameter store
   */
  @JsonAdapter(EksOptimizedLookupTypeEnum.Adapter.class)
  public enum EksOptimizedLookupTypeEnum {
    AMAZONLINUX("AmazonLinux"),
    AMAZONLINUXGPU("AmazonLinuxGPU");

    private String value;

    EksOptimizedLookupTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EksOptimizedLookupTypeEnum fromValue(String input) {
      for (EksOptimizedLookupTypeEnum b : EksOptimizedLookupTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EksOptimizedLookupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EksOptimizedLookupTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public EksOptimizedLookupTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EksOptimizedLookupTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("eksOptimizedLookupType")
  private EksOptimizedLookupTypeEnum eksOptimizedLookupType = null;

  @SerializedName("id")
  private String id = null;

  public V1AwsAmiReference eksOptimizedLookupType(EksOptimizedLookupTypeEnum eksOptimizedLookupType) {
    this.eksOptimizedLookupType = eksOptimizedLookupType;
    return this;
  }

   /**
   * EKSOptimizedLookupType If specified, will look up an EKS Optimized image in SSM Parameter store
   * @return eksOptimizedLookupType
  **/
  @Schema(description = "EKSOptimizedLookupType If specified, will look up an EKS Optimized image in SSM Parameter store")
  public EksOptimizedLookupTypeEnum getEksOptimizedLookupType() {
    return eksOptimizedLookupType;
  }

  public void setEksOptimizedLookupType(EksOptimizedLookupTypeEnum eksOptimizedLookupType) {
    this.eksOptimizedLookupType = eksOptimizedLookupType;
  }

  public V1AwsAmiReference id(String id) {
    this.id = id;
    return this;
  }

   /**
   * ID of resource
   * @return id
  **/
  @Schema(description = "ID of resource")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AwsAmiReference v1AwsAmiReference = (V1AwsAmiReference) o;
    return Objects.equals(this.eksOptimizedLookupType, v1AwsAmiReference.eksOptimizedLookupType) &&
        Objects.equals(this.id, v1AwsAmiReference.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eksOptimizedLookupType, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AwsAmiReference {\n");
    
    sb.append("    eksOptimizedLookupType: ").append(toIndentedString(eksOptimizedLookupType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
