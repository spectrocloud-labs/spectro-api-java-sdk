/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmCpuFeature;
import com.spectrocloud.client.model.V1VmNUMA;
import com.spectrocloud.client.model.V1VmRealtime;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * CPU allows specifying the CPU topology.
 */
@Schema(description = "CPU allows specifying the CPU topology.")


public class V1VmCpu {
  @SerializedName("cores")
  private Long cores = null;

  @SerializedName("dedicatedCpuPlacement")
  private Boolean dedicatedCpuPlacement = null;

  @SerializedName("features")
  private List<V1VmCpuFeature> features = null;

  @SerializedName("isolateEmulatorThread")
  private Boolean isolateEmulatorThread = null;

  @SerializedName("model")
  private String model = null;

  @SerializedName("numa")
  private V1VmNUMA numa = null;

  @SerializedName("realtime")
  private V1VmRealtime realtime = null;

  @SerializedName("sockets")
  private Long sockets = null;

  @SerializedName("threads")
  private Long threads = null;

  public V1VmCpu cores(Long cores) {
    this.cores = cores;
    return this;
  }

   /**
   * Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
   * @return cores
  **/
  @Schema(description = "Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.")
  public Long getCores() {
    return cores;
  }

  public void setCores(Long cores) {
    this.cores = cores;
  }

  public V1VmCpu dedicatedCpuPlacement(Boolean dedicatedCpuPlacement) {
    this.dedicatedCpuPlacement = dedicatedCpuPlacement;
    return this;
  }

   /**
   * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.
   * @return dedicatedCpuPlacement
  **/
  @Schema(description = "DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.")
  public Boolean isDedicatedCpuPlacement() {
    return dedicatedCpuPlacement;
  }

  public void setDedicatedCpuPlacement(Boolean dedicatedCpuPlacement) {
    this.dedicatedCpuPlacement = dedicatedCpuPlacement;
  }

  public V1VmCpu features(List<V1VmCpuFeature> features) {
    this.features = features;
    return this;
  }

  public V1VmCpu addFeaturesItem(V1VmCpuFeature featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<V1VmCpuFeature>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Features specifies the CPU features list inside the VMI.
   * @return features
  **/
  @Schema(description = "Features specifies the CPU features list inside the VMI.")
  public List<V1VmCpuFeature> getFeatures() {
    return features;
  }

  public void setFeatures(List<V1VmCpuFeature> features) {
    this.features = features;
  }

  public V1VmCpu isolateEmulatorThread(Boolean isolateEmulatorThread) {
    this.isolateEmulatorThread = isolateEmulatorThread;
    return this;
  }

   /**
   * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.
   * @return isolateEmulatorThread
  **/
  @Schema(description = "IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.")
  public Boolean isIsolateEmulatorThread() {
    return isolateEmulatorThread;
  }

  public void setIsolateEmulatorThread(Boolean isolateEmulatorThread) {
    this.isolateEmulatorThread = isolateEmulatorThread;
  }

  public V1VmCpu model(String model) {
    this.model = model;
    return this;
  }

   /**
   * Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \&quot;host-passthrough\&quot; to get the same CPU as the node and \&quot;host-model\&quot; to get CPU closest to the node one. Defaults to host-model.
   * @return model
  **/
  @Schema(description = "Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model.")
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }

  public V1VmCpu numa(V1VmNUMA numa) {
    this.numa = numa;
    return this;
  }

   /**
   * Get numa
   * @return numa
  **/
  @Schema(description = "")
  public V1VmNUMA getNuma() {
    return numa;
  }

  public void setNuma(V1VmNUMA numa) {
    this.numa = numa;
  }

  public V1VmCpu realtime(V1VmRealtime realtime) {
    this.realtime = realtime;
    return this;
  }

   /**
   * Get realtime
   * @return realtime
  **/
  @Schema(description = "")
  public V1VmRealtime getRealtime() {
    return realtime;
  }

  public void setRealtime(V1VmRealtime realtime) {
    this.realtime = realtime;
  }

  public V1VmCpu sockets(Long sockets) {
    this.sockets = sockets;
    return this;
  }

   /**
   * Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
   * @return sockets
  **/
  @Schema(description = "Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.")
  public Long getSockets() {
    return sockets;
  }

  public void setSockets(Long sockets) {
    this.sockets = sockets;
  }

  public V1VmCpu threads(Long threads) {
    this.threads = threads;
    return this;
  }

   /**
   * Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
   * @return threads
  **/
  @Schema(description = "Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.")
  public Long getThreads() {
    return threads;
  }

  public void setThreads(Long threads) {
    this.threads = threads;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmCpu v1VmCpu = (V1VmCpu) o;
    return Objects.equals(this.cores, v1VmCpu.cores) &&
        Objects.equals(this.dedicatedCpuPlacement, v1VmCpu.dedicatedCpuPlacement) &&
        Objects.equals(this.features, v1VmCpu.features) &&
        Objects.equals(this.isolateEmulatorThread, v1VmCpu.isolateEmulatorThread) &&
        Objects.equals(this.model, v1VmCpu.model) &&
        Objects.equals(this.numa, v1VmCpu.numa) &&
        Objects.equals(this.realtime, v1VmCpu.realtime) &&
        Objects.equals(this.sockets, v1VmCpu.sockets) &&
        Objects.equals(this.threads, v1VmCpu.threads);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cores, dedicatedCpuPlacement, features, isolateEmulatorThread, model, numa, realtime, sockets, threads);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmCpu {\n");
    
    sb.append("    cores: ").append(toIndentedString(cores)).append("\n");
    sb.append("    dedicatedCpuPlacement: ").append(toIndentedString(dedicatedCpuPlacement)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    isolateEmulatorThread: ").append(toIndentedString(isolateEmulatorThread)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    numa: ").append(toIndentedString(numa)).append("\n");
    sb.append("    realtime: ").append(toIndentedString(realtime)).append("\n");
    sb.append("    sockets: ").append(toIndentedString(sockets)).append("\n");
    sb.append("    threads: ").append(toIndentedString(threads)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
