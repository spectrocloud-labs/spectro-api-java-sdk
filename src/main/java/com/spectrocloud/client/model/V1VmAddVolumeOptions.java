/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmDisk;
import com.spectrocloud.client.model.V1VmHotplugVolumeSource;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AddVolumeOptions is provided when dynamically hot plugging a volume and disk
 */
@Schema(description = "AddVolumeOptions is provided when dynamically hot plugging a volume and disk")


public class V1VmAddVolumeOptions {
  @SerializedName("disk")
  private V1VmDisk disk = null;

  @SerializedName("dryRun")
  private List<String> dryRun = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("volumeSource")
  private V1VmHotplugVolumeSource volumeSource = null;

  public V1VmAddVolumeOptions disk(V1VmDisk disk) {
    this.disk = disk;
    return this;
  }

   /**
   * Get disk
   * @return disk
  **/
  @Schema(required = true, description = "")
  public V1VmDisk getDisk() {
    return disk;
  }

  public void setDisk(V1VmDisk disk) {
    this.disk = disk;
  }

  public V1VmAddVolumeOptions dryRun(List<String> dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  public V1VmAddVolumeOptions addDryRunItem(String dryRunItem) {
    if (this.dryRun == null) {
      this.dryRun = new ArrayList<String>();
    }
    this.dryRun.add(dryRunItem);
    return this;
  }

   /**
   * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @return dryRun
  **/
  @Schema(description = "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")
  public List<String> getDryRun() {
    return dryRun;
  }

  public void setDryRun(List<String> dryRun) {
    this.dryRun = dryRun;
  }

  public V1VmAddVolumeOptions name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself.
   * @return name
  **/
  @Schema(required = true, description = "Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1VmAddVolumeOptions volumeSource(V1VmHotplugVolumeSource volumeSource) {
    this.volumeSource = volumeSource;
    return this;
  }

   /**
   * Get volumeSource
   * @return volumeSource
  **/
  @Schema(required = true, description = "")
  public V1VmHotplugVolumeSource getVolumeSource() {
    return volumeSource;
  }

  public void setVolumeSource(V1VmHotplugVolumeSource volumeSource) {
    this.volumeSource = volumeSource;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmAddVolumeOptions v1VmAddVolumeOptions = (V1VmAddVolumeOptions) o;
    return Objects.equals(this.disk, v1VmAddVolumeOptions.disk) &&
        Objects.equals(this.dryRun, v1VmAddVolumeOptions.dryRun) &&
        Objects.equals(this.name, v1VmAddVolumeOptions.name) &&
        Objects.equals(this.volumeSource, v1VmAddVolumeOptions.volumeSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disk, dryRun, name, volumeSource);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmAddVolumeOptions {\n");
    
    sb.append("    disk: ").append(toIndentedString(disk)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    volumeSource: ").append(toIndentedString(volumeSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
