/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1ClusterProfileTemplate;
import com.spectrocloud.client.model.V1InstanceConfig;
import com.spectrocloud.client.model.V1ObjectReference;
import com.spectrocloud.client.model.V1SpotMarketOptions;
import com.spectrocloud.client.model.V1Taint;
import com.spectrocloud.client.model.V1UpdateStrategy;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * V1AwsMachinePoolConfig
 */



public class V1AwsMachinePoolConfig {
  @SerializedName("additionalLabels")
  private Map<String, String> additionalLabels = null;

  @SerializedName("additionalTags")
  private Map<String, String> additionalTags = null;

  @SerializedName("azs")
  private List<String> azs = null;

  /**
   * EC2 instance capacity type
   */
  @JsonAdapter(CapacityTypeEnum.Adapter.class)
  public enum CapacityTypeEnum {
    ON_DEMAND("on-demand"),
    SPOT("spot");

    private String value;

    CapacityTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CapacityTypeEnum fromValue(String input) {
      for (CapacityTypeEnum b : CapacityTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CapacityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CapacityTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public CapacityTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CapacityTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("capacityType")
  private CapacityTypeEnum capacityType = CapacityTypeEnum.ON_DEMAND;

  @SerializedName("infraProfileRef")
  private V1ObjectReference infraProfileRef = null;

  @SerializedName("infraProfileTemplate")
  private V1ClusterProfileTemplate infraProfileTemplate = null;

  @SerializedName("instanceConfig")
  private V1InstanceConfig instanceConfig = null;

  @SerializedName("instanceType")
  private String instanceType = null;

  @SerializedName("isControlPlane")
  private Boolean isControlPlane = null;

  @SerializedName("labels")
  private List<String> labels = null;

  @SerializedName("maxSize")
  private Integer maxSize = null;

  @SerializedName("minSize")
  private Integer minSize = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("rootDeviceSize")
  private Long rootDeviceSize = null;

  @SerializedName("size")
  private Integer size = null;

  @SerializedName("spotMarketOptions")
  private V1SpotMarketOptions spotMarketOptions = null;

  @SerializedName("subnetIds")
  private Map<String, String> subnetIds = null;

  @SerializedName("taints")
  private List<V1Taint> taints = null;

  @SerializedName("updateStrategy")
  private V1UpdateStrategy updateStrategy = null;

  @SerializedName("useControlPlaneAsWorker")
  private Boolean useControlPlaneAsWorker = null;

  public V1AwsMachinePoolConfig additionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
    return this;
  }

  public V1AwsMachinePoolConfig putAdditionalLabelsItem(String key, String additionalLabelsItem) {
    if (this.additionalLabels == null) {
      this.additionalLabels = new HashMap<String, String>();
    }
    this.additionalLabels.put(key, additionalLabelsItem);
    return this;
  }

   /**
   * additionalLabels
   * @return additionalLabels
  **/
  @Schema(description = "additionalLabels")
  public Map<String, String> getAdditionalLabels() {
    return additionalLabels;
  }

  public void setAdditionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
  }

  public V1AwsMachinePoolConfig additionalTags(Map<String, String> additionalTags) {
    this.additionalTags = additionalTags;
    return this;
  }

  public V1AwsMachinePoolConfig putAdditionalTagsItem(String key, String additionalTagsItem) {
    if (this.additionalTags == null) {
      this.additionalTags = new HashMap<String, String>();
    }
    this.additionalTags.put(key, additionalTagsItem);
    return this;
  }

   /**
   * AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole
   * @return additionalTags
  **/
  @Schema(description = "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole")
  public Map<String, String> getAdditionalTags() {
    return additionalTags;
  }

  public void setAdditionalTags(Map<String, String> additionalTags) {
    this.additionalTags = additionalTags;
  }

  public V1AwsMachinePoolConfig azs(List<String> azs) {
    this.azs = azs;
    return this;
  }

  public V1AwsMachinePoolConfig addAzsItem(String azsItem) {
    if (this.azs == null) {
      this.azs = new ArrayList<String>();
    }
    this.azs.add(azsItem);
    return this;
  }

   /**
   * AZs is only used for dynamic placement
   * @return azs
  **/
  @Schema(description = "AZs is only used for dynamic placement")
  public List<String> getAzs() {
    return azs;
  }

  public void setAzs(List<String> azs) {
    this.azs = azs;
  }

  public V1AwsMachinePoolConfig capacityType(CapacityTypeEnum capacityType) {
    this.capacityType = capacityType;
    return this;
  }

   /**
   * EC2 instance capacity type
   * @return capacityType
  **/
  @Schema(description = "EC2 instance capacity type")
  public CapacityTypeEnum getCapacityType() {
    return capacityType;
  }

  public void setCapacityType(CapacityTypeEnum capacityType) {
    this.capacityType = capacityType;
  }

  public V1AwsMachinePoolConfig infraProfileRef(V1ObjectReference infraProfileRef) {
    this.infraProfileRef = infraProfileRef;
    return this;
  }

   /**
   * Get infraProfileRef
   * @return infraProfileRef
  **/
  @Schema(description = "")
  public V1ObjectReference getInfraProfileRef() {
    return infraProfileRef;
  }

  public void setInfraProfileRef(V1ObjectReference infraProfileRef) {
    this.infraProfileRef = infraProfileRef;
  }

  public V1AwsMachinePoolConfig infraProfileTemplate(V1ClusterProfileTemplate infraProfileTemplate) {
    this.infraProfileTemplate = infraProfileTemplate;
    return this;
  }

   /**
   * Get infraProfileTemplate
   * @return infraProfileTemplate
  **/
  @Schema(description = "")
  public V1ClusterProfileTemplate getInfraProfileTemplate() {
    return infraProfileTemplate;
  }

  public void setInfraProfileTemplate(V1ClusterProfileTemplate infraProfileTemplate) {
    this.infraProfileTemplate = infraProfileTemplate;
  }

  public V1AwsMachinePoolConfig instanceConfig(V1InstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
    return this;
  }

   /**
   * Get instanceConfig
   * @return instanceConfig
  **/
  @Schema(description = "")
  public V1InstanceConfig getInstanceConfig() {
    return instanceConfig;
  }

  public void setInstanceConfig(V1InstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
  }

  public V1AwsMachinePoolConfig instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

   /**
   * instance type
   * @return instanceType
  **/
  @Schema(description = "instance type")
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }

  public V1AwsMachinePoolConfig isControlPlane(Boolean isControlPlane) {
    this.isControlPlane = isControlPlane;
    return this;
  }

   /**
   * whether this pool is for control plane
   * @return isControlPlane
  **/
  @Schema(required = true, description = "whether this pool is for control plane")
  public Boolean isIsControlPlane() {
    return isControlPlane;
  }

  public void setIsControlPlane(Boolean isControlPlane) {
    this.isControlPlane = isControlPlane;
  }

  public V1AwsMachinePoolConfig labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public V1AwsMachinePoolConfig addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * labels for this pool, example: master/worker, gpu, windows
   * @return labels
  **/
  @Schema(description = "labels for this pool, example: master/worker, gpu, windows")
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }

  public V1AwsMachinePoolConfig maxSize(Integer maxSize) {
    this.maxSize = maxSize;
    return this;
  }

   /**
   * max size of the pool, for scaling
   * @return maxSize
  **/
  @Schema(description = "max size of the pool, for scaling")
  public Integer getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(Integer maxSize) {
    this.maxSize = maxSize;
  }

  public V1AwsMachinePoolConfig minSize(Integer minSize) {
    this.minSize = minSize;
    return this;
  }

   /**
   * min size of the pool, for scaling
   * @return minSize
  **/
  @Schema(description = "min size of the pool, for scaling")
  public Integer getMinSize() {
    return minSize;
  }

  public void setMinSize(Integer minSize) {
    this.minSize = minSize;
  }

  public V1AwsMachinePoolConfig name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1AwsMachinePoolConfig rootDeviceSize(Long rootDeviceSize) {
    this.rootDeviceSize = rootDeviceSize;
    return this;
  }

   /**
   * rootDeviceSize in GBs
   * @return rootDeviceSize
  **/
  @Schema(description = "rootDeviceSize in GBs")
  public Long getRootDeviceSize() {
    return rootDeviceSize;
  }

  public void setRootDeviceSize(Long rootDeviceSize) {
    this.rootDeviceSize = rootDeviceSize;
  }

  public V1AwsMachinePoolConfig size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * size of the pool, number of machines
   * @return size
  **/
  @Schema(description = "size of the pool, number of machines")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public V1AwsMachinePoolConfig spotMarketOptions(V1SpotMarketOptions spotMarketOptions) {
    this.spotMarketOptions = spotMarketOptions;
    return this;
  }

   /**
   * Get spotMarketOptions
   * @return spotMarketOptions
  **/
  @Schema(description = "")
  public V1SpotMarketOptions getSpotMarketOptions() {
    return spotMarketOptions;
  }

  public void setSpotMarketOptions(V1SpotMarketOptions spotMarketOptions) {
    this.spotMarketOptions = spotMarketOptions;
  }

  public V1AwsMachinePoolConfig subnetIds(Map<String, String> subnetIds) {
    this.subnetIds = subnetIds;
    return this;
  }

  public V1AwsMachinePoolConfig putSubnetIdsItem(String key, String subnetIdsItem) {
    if (this.subnetIds == null) {
      this.subnetIds = new HashMap<String, String>();
    }
    this.subnetIds.put(key, subnetIdsItem);
    return this;
  }

   /**
   * AZ to subnet mapping filled by ally from hubble SubnetIDs [\&quot;us-west-2d\&quot;] &#x3D; \&quot;subnet-079b6061\&quot; This field is optional If we don&#x27;t provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment
   * @return subnetIds
  **/
  @Schema(description = "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment")
  public Map<String, String> getSubnetIds() {
    return subnetIds;
  }

  public void setSubnetIds(Map<String, String> subnetIds) {
    this.subnetIds = subnetIds;
  }

  public V1AwsMachinePoolConfig taints(List<V1Taint> taints) {
    this.taints = taints;
    return this;
  }

  public V1AwsMachinePoolConfig addTaintsItem(V1Taint taintsItem) {
    if (this.taints == null) {
      this.taints = new ArrayList<V1Taint>();
    }
    this.taints.add(taintsItem);
    return this;
  }

   /**
   * master or worker taints
   * @return taints
  **/
  @Schema(description = "master or worker taints")
  public List<V1Taint> getTaints() {
    return taints;
  }

  public void setTaints(List<V1Taint> taints) {
    this.taints = taints;
  }

  public V1AwsMachinePoolConfig updateStrategy(V1UpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
    return this;
  }

   /**
   * Get updateStrategy
   * @return updateStrategy
  **/
  @Schema(description = "")
  public V1UpdateStrategy getUpdateStrategy() {
    return updateStrategy;
  }

  public void setUpdateStrategy(V1UpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
  }

  public V1AwsMachinePoolConfig useControlPlaneAsWorker(Boolean useControlPlaneAsWorker) {
    this.useControlPlaneAsWorker = useControlPlaneAsWorker;
    return this;
  }

   /**
   * if IsControlPlane&#x3D;&#x3D;true &amp;&amp; useControlPlaneAsWorker&#x3D;&#x3D;true, then will remove master taint this will not be used for worker pools
   * @return useControlPlaneAsWorker
  **/
  @Schema(description = "if IsControlPlane==true && useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools")
  public Boolean isUseControlPlaneAsWorker() {
    return useControlPlaneAsWorker;
  }

  public void setUseControlPlaneAsWorker(Boolean useControlPlaneAsWorker) {
    this.useControlPlaneAsWorker = useControlPlaneAsWorker;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AwsMachinePoolConfig v1AwsMachinePoolConfig = (V1AwsMachinePoolConfig) o;
    return Objects.equals(this.additionalLabels, v1AwsMachinePoolConfig.additionalLabels) &&
        Objects.equals(this.additionalTags, v1AwsMachinePoolConfig.additionalTags) &&
        Objects.equals(this.azs, v1AwsMachinePoolConfig.azs) &&
        Objects.equals(this.capacityType, v1AwsMachinePoolConfig.capacityType) &&
        Objects.equals(this.infraProfileRef, v1AwsMachinePoolConfig.infraProfileRef) &&
        Objects.equals(this.infraProfileTemplate, v1AwsMachinePoolConfig.infraProfileTemplate) &&
        Objects.equals(this.instanceConfig, v1AwsMachinePoolConfig.instanceConfig) &&
        Objects.equals(this.instanceType, v1AwsMachinePoolConfig.instanceType) &&
        Objects.equals(this.isControlPlane, v1AwsMachinePoolConfig.isControlPlane) &&
        Objects.equals(this.labels, v1AwsMachinePoolConfig.labels) &&
        Objects.equals(this.maxSize, v1AwsMachinePoolConfig.maxSize) &&
        Objects.equals(this.minSize, v1AwsMachinePoolConfig.minSize) &&
        Objects.equals(this.name, v1AwsMachinePoolConfig.name) &&
        Objects.equals(this.rootDeviceSize, v1AwsMachinePoolConfig.rootDeviceSize) &&
        Objects.equals(this.size, v1AwsMachinePoolConfig.size) &&
        Objects.equals(this.spotMarketOptions, v1AwsMachinePoolConfig.spotMarketOptions) &&
        Objects.equals(this.subnetIds, v1AwsMachinePoolConfig.subnetIds) &&
        Objects.equals(this.taints, v1AwsMachinePoolConfig.taints) &&
        Objects.equals(this.updateStrategy, v1AwsMachinePoolConfig.updateStrategy) &&
        Objects.equals(this.useControlPlaneAsWorker, v1AwsMachinePoolConfig.useControlPlaneAsWorker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalLabels, additionalTags, azs, capacityType, infraProfileRef, infraProfileTemplate, instanceConfig, instanceType, isControlPlane, labels, maxSize, minSize, name, rootDeviceSize, size, spotMarketOptions, subnetIds, taints, updateStrategy, useControlPlaneAsWorker);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AwsMachinePoolConfig {\n");
    
    sb.append("    additionalLabels: ").append(toIndentedString(additionalLabels)).append("\n");
    sb.append("    additionalTags: ").append(toIndentedString(additionalTags)).append("\n");
    sb.append("    azs: ").append(toIndentedString(azs)).append("\n");
    sb.append("    capacityType: ").append(toIndentedString(capacityType)).append("\n");
    sb.append("    infraProfileRef: ").append(toIndentedString(infraProfileRef)).append("\n");
    sb.append("    infraProfileTemplate: ").append(toIndentedString(infraProfileTemplate)).append("\n");
    sb.append("    instanceConfig: ").append(toIndentedString(instanceConfig)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    isControlPlane: ").append(toIndentedString(isControlPlane)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    minSize: ").append(toIndentedString(minSize)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rootDeviceSize: ").append(toIndentedString(rootDeviceSize)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    spotMarketOptions: ").append(toIndentedString(spotMarketOptions)).append("\n");
    sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
    sb.append("    taints: ").append(toIndentedString(taints)).append("\n");
    sb.append("    updateStrategy: ").append(toIndentedString(updateStrategy)).append("\n");
    sb.append("    useControlPlaneAsWorker: ").append(toIndentedString(useControlPlaneAsWorker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
