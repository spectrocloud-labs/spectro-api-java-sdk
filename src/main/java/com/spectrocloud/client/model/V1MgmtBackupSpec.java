/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * backup spec
 */
@Schema(description = "backup spec")


public class V1MgmtBackupSpec {
  @SerializedName("backupUid")
  private String backupUid = null;

  @SerializedName("mode")
  private String mode = null;

  @SerializedName("modeUid")
  private String modeUid = null;

  @SerializedName("proxy")
  private String proxy = null;

  @SerializedName("scheduleTime")
  private OffsetDateTime scheduleTime = null;

  /**
   * Gets or Sets scheduleType
   */
  @JsonAdapter(ScheduleTypeEnum.Adapter.class)
  public enum ScheduleTypeEnum {
    ONDEMAND("OnDemand"),
    AUTOMATED("Automated");

    private String value;

    ScheduleTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScheduleTypeEnum fromValue(String input) {
      for (ScheduleTypeEnum b : ScheduleTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScheduleTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scheduleType")
  private ScheduleTypeEnum scheduleType = ScheduleTypeEnum.AUTOMATED;

  public V1MgmtBackupSpec backupUid(String backupUid) {
    this.backupUid = backupUid;
    return this;
  }

   /**
   * Get backupUid
   * @return backupUid
  **/
  @Schema(description = "")
  public String getBackupUid() {
    return backupUid;
  }

  public void setBackupUid(String backupUid) {
    this.backupUid = backupUid;
  }

  public V1MgmtBackupSpec mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @Schema(description = "")
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public V1MgmtBackupSpec modeUid(String modeUid) {
    this.modeUid = modeUid;
    return this;
  }

   /**
   * Get modeUid
   * @return modeUid
  **/
  @Schema(description = "")
  public String getModeUid() {
    return modeUid;
  }

  public void setModeUid(String modeUid) {
    this.modeUid = modeUid;
  }

  public V1MgmtBackupSpec proxy(String proxy) {
    this.proxy = proxy;
    return this;
  }

   /**
   * proxy information if applicable
   * @return proxy
  **/
  @Schema(description = "proxy information if applicable")
  public String getProxy() {
    return proxy;
  }

  public void setProxy(String proxy) {
    this.proxy = proxy;
  }

  public V1MgmtBackupSpec scheduleTime(OffsetDateTime scheduleTime) {
    this.scheduleTime = scheduleTime;
    return this;
  }

   /**
   * Get scheduleTime
   * @return scheduleTime
  **/
  @Schema(description = "")
  public OffsetDateTime getScheduleTime() {
    return scheduleTime;
  }

  public void setScheduleTime(OffsetDateTime scheduleTime) {
    this.scheduleTime = scheduleTime;
  }

  public V1MgmtBackupSpec scheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
    return this;
  }

   /**
   * Get scheduleType
   * @return scheduleType
  **/
  @Schema(description = "")
  public ScheduleTypeEnum getScheduleType() {
    return scheduleType;
  }

  public void setScheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1MgmtBackupSpec v1MgmtBackupSpec = (V1MgmtBackupSpec) o;
    return Objects.equals(this.backupUid, v1MgmtBackupSpec.backupUid) &&
        Objects.equals(this.mode, v1MgmtBackupSpec.mode) &&
        Objects.equals(this.modeUid, v1MgmtBackupSpec.modeUid) &&
        Objects.equals(this.proxy, v1MgmtBackupSpec.proxy) &&
        Objects.equals(this.scheduleTime, v1MgmtBackupSpec.scheduleTime) &&
        Objects.equals(this.scheduleType, v1MgmtBackupSpec.scheduleType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupUid, mode, modeUid, proxy, scheduleTime, scheduleType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1MgmtBackupSpec {\n");
    
    sb.append("    backupUid: ").append(toIndentedString(backupUid)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    modeUid: ").append(toIndentedString(modeUid)).append("\n");
    sb.append("    proxy: ").append(toIndentedString(proxy)).append("\n");
    sb.append("    scheduleTime: ").append(toIndentedString(scheduleTime)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
