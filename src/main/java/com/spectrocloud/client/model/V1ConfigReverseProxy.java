/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Describes the reverse proxy configuration
 */
@Schema(description = "Describes the reverse proxy configuration")


public class V1ConfigReverseProxy {
  @SerializedName("caCert")
  private String caCert = null;

  @SerializedName("clientCert")
  private String clientCert = null;

  @SerializedName("clientKey")
  private String clientKey = null;

  @SerializedName("port")
  private Integer port = null;

  /**
   * Describes the system&#x27;s reverse proxy server protocol. Possible values [https, http]
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    HTTP("http"),
    HTTPS("https");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProtocolEnum fromValue(String input) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ProtocolEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("protocol")
  private ProtocolEnum protocol = null;

  @SerializedName("server")
  private String server = null;

  public V1ConfigReverseProxy caCert(String caCert) {
    this.caCert = caCert;
    return this;
  }

   /**
   * Describes the ca certificate for system&#x27;s reverse proxy
   * @return caCert
  **/
  @Schema(description = "Describes the ca certificate for system's reverse proxy")
  public String getCaCert() {
    return caCert;
  }

  public void setCaCert(String caCert) {
    this.caCert = caCert;
  }

  public V1ConfigReverseProxy clientCert(String clientCert) {
    this.clientCert = clientCert;
    return this;
  }

   /**
   * Describes the client certificate for system&#x27;s reverse proxy
   * @return clientCert
  **/
  @Schema(description = "Describes the client certificate for system's reverse proxy")
  public String getClientCert() {
    return clientCert;
  }

  public void setClientCert(String clientCert) {
    this.clientCert = clientCert;
  }

  public V1ConfigReverseProxy clientKey(String clientKey) {
    this.clientKey = clientKey;
    return this;
  }

   /**
   * Describes the client certificate key for system&#x27;s reverse proxy
   * @return clientKey
  **/
  @Schema(description = "Describes the client certificate key for system's reverse proxy")
  public String getClientKey() {
    return clientKey;
  }

  public void setClientKey(String clientKey) {
    this.clientKey = clientKey;
  }

  public V1ConfigReverseProxy port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Describes the system&#x27;s reverse proxy server port
   * @return port
  **/
  @Schema(description = "Describes the system's reverse proxy server port")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public V1ConfigReverseProxy protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Describes the system&#x27;s reverse proxy server protocol. Possible values [https, http]
   * @return protocol
  **/
  @Schema(description = "Describes the system's reverse proxy server protocol. Possible values [https, http]")
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }

  public V1ConfigReverseProxy server(String server) {
    this.server = server;
    return this;
  }

   /**
   * Describes the system&#x27;s reverse proxy server
   * @return server
  **/
  @Schema(description = "Describes the system's reverse proxy server")
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ConfigReverseProxy v1ConfigReverseProxy = (V1ConfigReverseProxy) o;
    return Objects.equals(this.caCert, v1ConfigReverseProxy.caCert) &&
        Objects.equals(this.clientCert, v1ConfigReverseProxy.clientCert) &&
        Objects.equals(this.clientKey, v1ConfigReverseProxy.clientKey) &&
        Objects.equals(this.port, v1ConfigReverseProxy.port) &&
        Objects.equals(this.protocol, v1ConfigReverseProxy.protocol) &&
        Objects.equals(this.server, v1ConfigReverseProxy.server);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caCert, clientCert, clientKey, port, protocol, server);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ConfigReverseProxy {\n");
    
    sb.append("    caCert: ").append(toIndentedString(caCert)).append("\n");
    sb.append("    clientCert: ").append(toIndentedString(clientCert)).append("\n");
    sb.append("    clientKey: ").append(toIndentedString(clientKey)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
