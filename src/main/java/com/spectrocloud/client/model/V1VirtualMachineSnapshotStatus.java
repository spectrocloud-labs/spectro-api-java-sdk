/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmCondition;
import com.spectrocloud.client.model.V1VmError;
import com.spectrocloud.client.model.V1VmSnapshotVolumesLists;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * VirtualMachineSnapshotStatus is the status for a VirtualMachineSnapshot resource
 */
@Schema(description = "VirtualMachineSnapshotStatus is the status for a VirtualMachineSnapshot resource")


public class V1VirtualMachineSnapshotStatus {
  @SerializedName("conditions")
  private List<V1VmCondition> conditions = null;

  @SerializedName("creationTime")
  private OffsetDateTime creationTime = null;

  @SerializedName("error")
  private V1VmError error = null;

  @SerializedName("indications")
  private List<String> indications = null;

  @SerializedName("phase")
  private String phase = null;

  @SerializedName("readyToUse")
  private Boolean readyToUse = null;

  @SerializedName("snapshotVolumes")
  private V1VmSnapshotVolumesLists snapshotVolumes = null;

  @SerializedName("sourceUID")
  private String sourceUID = null;

  @SerializedName("virtualMachineSnapshotContentName")
  private String virtualMachineSnapshotContentName = null;

  public V1VirtualMachineSnapshotStatus conditions(List<V1VmCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public V1VirtualMachineSnapshotStatus addConditionsItem(V1VmCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<V1VmCondition>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @Schema(description = "")
  public List<V1VmCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<V1VmCondition> conditions) {
    this.conditions = conditions;
  }

  public V1VirtualMachineSnapshotStatus creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * Get creationTime
   * @return creationTime
  **/
  @Schema(description = "")
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }

  public V1VirtualMachineSnapshotStatus error(V1VmError error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @Schema(description = "")
  public V1VmError getError() {
    return error;
  }

  public void setError(V1VmError error) {
    this.error = error;
  }

  public V1VirtualMachineSnapshotStatus indications(List<String> indications) {
    this.indications = indications;
    return this;
  }

  public V1VirtualMachineSnapshotStatus addIndicationsItem(String indicationsItem) {
    if (this.indications == null) {
      this.indications = new ArrayList<String>();
    }
    this.indications.add(indicationsItem);
    return this;
  }

   /**
   * Get indications
   * @return indications
  **/
  @Schema(description = "")
  public List<String> getIndications() {
    return indications;
  }

  public void setIndications(List<String> indications) {
    this.indications = indications;
  }

  public V1VirtualMachineSnapshotStatus phase(String phase) {
    this.phase = phase;
    return this;
  }

   /**
   * Get phase
   * @return phase
  **/
  @Schema(description = "")
  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }

  public V1VirtualMachineSnapshotStatus readyToUse(Boolean readyToUse) {
    this.readyToUse = readyToUse;
    return this;
  }

   /**
   * Get readyToUse
   * @return readyToUse
  **/
  @Schema(description = "")
  public Boolean isReadyToUse() {
    return readyToUse;
  }

  public void setReadyToUse(Boolean readyToUse) {
    this.readyToUse = readyToUse;
  }

  public V1VirtualMachineSnapshotStatus snapshotVolumes(V1VmSnapshotVolumesLists snapshotVolumes) {
    this.snapshotVolumes = snapshotVolumes;
    return this;
  }

   /**
   * Get snapshotVolumes
   * @return snapshotVolumes
  **/
  @Schema(description = "")
  public V1VmSnapshotVolumesLists getSnapshotVolumes() {
    return snapshotVolumes;
  }

  public void setSnapshotVolumes(V1VmSnapshotVolumesLists snapshotVolumes) {
    this.snapshotVolumes = snapshotVolumes;
  }

  public V1VirtualMachineSnapshotStatus sourceUID(String sourceUID) {
    this.sourceUID = sourceUID;
    return this;
  }

   /**
   * Get sourceUID
   * @return sourceUID
  **/
  @Schema(description = "")
  public String getSourceUID() {
    return sourceUID;
  }

  public void setSourceUID(String sourceUID) {
    this.sourceUID = sourceUID;
  }

  public V1VirtualMachineSnapshotStatus virtualMachineSnapshotContentName(String virtualMachineSnapshotContentName) {
    this.virtualMachineSnapshotContentName = virtualMachineSnapshotContentName;
    return this;
  }

   /**
   * Get virtualMachineSnapshotContentName
   * @return virtualMachineSnapshotContentName
  **/
  @Schema(description = "")
  public String getVirtualMachineSnapshotContentName() {
    return virtualMachineSnapshotContentName;
  }

  public void setVirtualMachineSnapshotContentName(String virtualMachineSnapshotContentName) {
    this.virtualMachineSnapshotContentName = virtualMachineSnapshotContentName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VirtualMachineSnapshotStatus v1VirtualMachineSnapshotStatus = (V1VirtualMachineSnapshotStatus) o;
    return Objects.equals(this.conditions, v1VirtualMachineSnapshotStatus.conditions) &&
        Objects.equals(this.creationTime, v1VirtualMachineSnapshotStatus.creationTime) &&
        Objects.equals(this.error, v1VirtualMachineSnapshotStatus.error) &&
        Objects.equals(this.indications, v1VirtualMachineSnapshotStatus.indications) &&
        Objects.equals(this.phase, v1VirtualMachineSnapshotStatus.phase) &&
        Objects.equals(this.readyToUse, v1VirtualMachineSnapshotStatus.readyToUse) &&
        Objects.equals(this.snapshotVolumes, v1VirtualMachineSnapshotStatus.snapshotVolumes) &&
        Objects.equals(this.sourceUID, v1VirtualMachineSnapshotStatus.sourceUID) &&
        Objects.equals(this.virtualMachineSnapshotContentName, v1VirtualMachineSnapshotStatus.virtualMachineSnapshotContentName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, creationTime, error, indications, phase, readyToUse, snapshotVolumes, sourceUID, virtualMachineSnapshotContentName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VirtualMachineSnapshotStatus {\n");
    
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    indications: ").append(toIndentedString(indications)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    readyToUse: ").append(toIndentedString(readyToUse)).append("\n");
    sb.append("    snapshotVolumes: ").append(toIndentedString(snapshotVolumes)).append("\n");
    sb.append("    sourceUID: ").append(toIndentedString(sourceUID)).append("\n");
    sb.append("    virtualMachineSnapshotContentName: ").append(toIndentedString(virtualMachineSnapshotContentName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
