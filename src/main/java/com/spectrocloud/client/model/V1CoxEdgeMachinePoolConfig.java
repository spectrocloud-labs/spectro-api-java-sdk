/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1ClusterProfileTemplate;
import com.spectrocloud.client.model.V1CoxEdgeDeployment;
import com.spectrocloud.client.model.V1CoxEdgeLoadPersistentStorage;
import com.spectrocloud.client.model.V1CoxEdgeSecurityGroupRule;
import com.spectrocloud.client.model.V1InstanceConfig;
import com.spectrocloud.client.model.V1ObjectReference;
import com.spectrocloud.client.model.V1Taint;
import com.spectrocloud.client.model.V1UpdateStrategy;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * V1CoxEdgeMachinePoolConfig
 */



public class V1CoxEdgeMachinePoolConfig {
  @SerializedName("additionalLabels")
  private Map<String, String> additionalLabels = null;

  @SerializedName("additionalTags")
  private Map<String, String> additionalTags = null;

  @SerializedName("deployments")
  private List<V1CoxEdgeDeployment> deployments = null;

  @SerializedName("infraProfileRef")
  private V1ObjectReference infraProfileRef = null;

  @SerializedName("infraProfileTemplate")
  private V1ClusterProfileTemplate infraProfileTemplate = null;

  @SerializedName("instanceConfig")
  private V1InstanceConfig instanceConfig = null;

  @SerializedName("isControlPlane")
  private Boolean isControlPlane = null;

  @SerializedName("labels")
  private List<String> labels = null;

  @SerializedName("maxSize")
  private Integer maxSize = null;

  @SerializedName("minSize")
  private Integer minSize = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("persistentStorages")
  private List<V1CoxEdgeLoadPersistentStorage> persistentStorages = null;

  @SerializedName("securityGroupRules")
  private List<V1CoxEdgeSecurityGroupRule> securityGroupRules = null;

  @SerializedName("size")
  private Integer size = null;

  @SerializedName("spec")
  private String spec = null;

  @SerializedName("taints")
  private List<V1Taint> taints = null;

  @SerializedName("updateStrategy")
  private V1UpdateStrategy updateStrategy = null;

  @SerializedName("useControlPlaneAsWorker")
  private Boolean useControlPlaneAsWorker = null;

  public V1CoxEdgeMachinePoolConfig additionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
    return this;
  }

  public V1CoxEdgeMachinePoolConfig putAdditionalLabelsItem(String key, String additionalLabelsItem) {
    if (this.additionalLabels == null) {
      this.additionalLabels = new HashMap<String, String>();
    }
    this.additionalLabels.put(key, additionalLabelsItem);
    return this;
  }

   /**
   * additionalLabels
   * @return additionalLabels
  **/
  @Schema(description = "additionalLabels")
  public Map<String, String> getAdditionalLabels() {
    return additionalLabels;
  }

  public void setAdditionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
  }

  public V1CoxEdgeMachinePoolConfig additionalTags(Map<String, String> additionalTags) {
    this.additionalTags = additionalTags;
    return this;
  }

  public V1CoxEdgeMachinePoolConfig putAdditionalTagsItem(String key, String additionalTagsItem) {
    if (this.additionalTags == null) {
      this.additionalTags = new HashMap<String, String>();
    }
    this.additionalTags.put(key, additionalTagsItem);
    return this;
  }

   /**
   * AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole
   * @return additionalTags
  **/
  @Schema(description = "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole")
  public Map<String, String> getAdditionalTags() {
    return additionalTags;
  }

  public void setAdditionalTags(Map<String, String> additionalTags) {
    this.additionalTags = additionalTags;
  }

  public V1CoxEdgeMachinePoolConfig deployments(List<V1CoxEdgeDeployment> deployments) {
    this.deployments = deployments;
    return this;
  }

  public V1CoxEdgeMachinePoolConfig addDeploymentsItem(V1CoxEdgeDeployment deploymentsItem) {
    if (this.deployments == null) {
      this.deployments = new ArrayList<V1CoxEdgeDeployment>();
    }
    this.deployments.add(deploymentsItem);
    return this;
  }

   /**
   * Get deployments
   * @return deployments
  **/
  @Schema(description = "")
  public List<V1CoxEdgeDeployment> getDeployments() {
    return deployments;
  }

  public void setDeployments(List<V1CoxEdgeDeployment> deployments) {
    this.deployments = deployments;
  }

  public V1CoxEdgeMachinePoolConfig infraProfileRef(V1ObjectReference infraProfileRef) {
    this.infraProfileRef = infraProfileRef;
    return this;
  }

   /**
   * Get infraProfileRef
   * @return infraProfileRef
  **/
  @Schema(description = "")
  public V1ObjectReference getInfraProfileRef() {
    return infraProfileRef;
  }

  public void setInfraProfileRef(V1ObjectReference infraProfileRef) {
    this.infraProfileRef = infraProfileRef;
  }

  public V1CoxEdgeMachinePoolConfig infraProfileTemplate(V1ClusterProfileTemplate infraProfileTemplate) {
    this.infraProfileTemplate = infraProfileTemplate;
    return this;
  }

   /**
   * Get infraProfileTemplate
   * @return infraProfileTemplate
  **/
  @Schema(description = "")
  public V1ClusterProfileTemplate getInfraProfileTemplate() {
    return infraProfileTemplate;
  }

  public void setInfraProfileTemplate(V1ClusterProfileTemplate infraProfileTemplate) {
    this.infraProfileTemplate = infraProfileTemplate;
  }

  public V1CoxEdgeMachinePoolConfig instanceConfig(V1InstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
    return this;
  }

   /**
   * Get instanceConfig
   * @return instanceConfig
  **/
  @Schema(description = "")
  public V1InstanceConfig getInstanceConfig() {
    return instanceConfig;
  }

  public void setInstanceConfig(V1InstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
  }

  public V1CoxEdgeMachinePoolConfig isControlPlane(Boolean isControlPlane) {
    this.isControlPlane = isControlPlane;
    return this;
  }

   /**
   * whether this pool is for control plane
   * @return isControlPlane
  **/
  @Schema(required = true, description = "whether this pool is for control plane")
  public Boolean isIsControlPlane() {
    return isControlPlane;
  }

  public void setIsControlPlane(Boolean isControlPlane) {
    this.isControlPlane = isControlPlane;
  }

  public V1CoxEdgeMachinePoolConfig labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public V1CoxEdgeMachinePoolConfig addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * labels for this pool, example: master/worker, gpu, windows
   * @return labels
  **/
  @Schema(description = "labels for this pool, example: master/worker, gpu, windows")
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }

  public V1CoxEdgeMachinePoolConfig maxSize(Integer maxSize) {
    this.maxSize = maxSize;
    return this;
  }

   /**
   * max size of the pool, for scaling
   * @return maxSize
  **/
  @Schema(description = "max size of the pool, for scaling")
  public Integer getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(Integer maxSize) {
    this.maxSize = maxSize;
  }

  public V1CoxEdgeMachinePoolConfig minSize(Integer minSize) {
    this.minSize = minSize;
    return this;
  }

   /**
   * min size of the pool, for scaling
   * @return minSize
  **/
  @Schema(description = "min size of the pool, for scaling")
  public Integer getMinSize() {
    return minSize;
  }

  public void setMinSize(Integer minSize) {
    this.minSize = minSize;
  }

  public V1CoxEdgeMachinePoolConfig name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1CoxEdgeMachinePoolConfig persistentStorages(List<V1CoxEdgeLoadPersistentStorage> persistentStorages) {
    this.persistentStorages = persistentStorages;
    return this;
  }

  public V1CoxEdgeMachinePoolConfig addPersistentStoragesItem(V1CoxEdgeLoadPersistentStorage persistentStoragesItem) {
    if (this.persistentStorages == null) {
      this.persistentStorages = new ArrayList<V1CoxEdgeLoadPersistentStorage>();
    }
    this.persistentStorages.add(persistentStoragesItem);
    return this;
  }

   /**
   * Array of coxedge load persistent storages
   * @return persistentStorages
  **/
  @Schema(description = "Array of coxedge load persistent storages")
  public List<V1CoxEdgeLoadPersistentStorage> getPersistentStorages() {
    return persistentStorages;
  }

  public void setPersistentStorages(List<V1CoxEdgeLoadPersistentStorage> persistentStorages) {
    this.persistentStorages = persistentStorages;
  }

  public V1CoxEdgeMachinePoolConfig securityGroupRules(List<V1CoxEdgeSecurityGroupRule> securityGroupRules) {
    this.securityGroupRules = securityGroupRules;
    return this;
  }

  public V1CoxEdgeMachinePoolConfig addSecurityGroupRulesItem(V1CoxEdgeSecurityGroupRule securityGroupRulesItem) {
    if (this.securityGroupRules == null) {
      this.securityGroupRules = new ArrayList<V1CoxEdgeSecurityGroupRule>();
    }
    this.securityGroupRules.add(securityGroupRulesItem);
    return this;
  }

   /**
   * Get securityGroupRules
   * @return securityGroupRules
  **/
  @Schema(description = "")
  public List<V1CoxEdgeSecurityGroupRule> getSecurityGroupRules() {
    return securityGroupRules;
  }

  public void setSecurityGroupRules(List<V1CoxEdgeSecurityGroupRule> securityGroupRules) {
    this.securityGroupRules = securityGroupRules;
  }

  public V1CoxEdgeMachinePoolConfig size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * size of the pool, number of machines
   * @return size
  **/
  @Schema(description = "size of the pool, number of machines")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public V1CoxEdgeMachinePoolConfig spec(String spec) {
    this.spec = spec;
    return this;
  }

   /**
   * Get spec
   * @return spec
  **/
  @Schema(description = "")
  public String getSpec() {
    return spec;
  }

  public void setSpec(String spec) {
    this.spec = spec;
  }

  public V1CoxEdgeMachinePoolConfig taints(List<V1Taint> taints) {
    this.taints = taints;
    return this;
  }

  public V1CoxEdgeMachinePoolConfig addTaintsItem(V1Taint taintsItem) {
    if (this.taints == null) {
      this.taints = new ArrayList<V1Taint>();
    }
    this.taints.add(taintsItem);
    return this;
  }

   /**
   * master or worker taints
   * @return taints
  **/
  @Schema(description = "master or worker taints")
  public List<V1Taint> getTaints() {
    return taints;
  }

  public void setTaints(List<V1Taint> taints) {
    this.taints = taints;
  }

  public V1CoxEdgeMachinePoolConfig updateStrategy(V1UpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
    return this;
  }

   /**
   * Get updateStrategy
   * @return updateStrategy
  **/
  @Schema(description = "")
  public V1UpdateStrategy getUpdateStrategy() {
    return updateStrategy;
  }

  public void setUpdateStrategy(V1UpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
  }

  public V1CoxEdgeMachinePoolConfig useControlPlaneAsWorker(Boolean useControlPlaneAsWorker) {
    this.useControlPlaneAsWorker = useControlPlaneAsWorker;
    return this;
  }

   /**
   * if IsControlPlane&#x3D;&#x3D;true &amp;&amp; useControlPlaneAsWorker&#x3D;&#x3D;true, then will remove master taint this will not be used for worker pools
   * @return useControlPlaneAsWorker
  **/
  @Schema(description = "if IsControlPlane==true && useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools")
  public Boolean isUseControlPlaneAsWorker() {
    return useControlPlaneAsWorker;
  }

  public void setUseControlPlaneAsWorker(Boolean useControlPlaneAsWorker) {
    this.useControlPlaneAsWorker = useControlPlaneAsWorker;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1CoxEdgeMachinePoolConfig v1CoxEdgeMachinePoolConfig = (V1CoxEdgeMachinePoolConfig) o;
    return Objects.equals(this.additionalLabels, v1CoxEdgeMachinePoolConfig.additionalLabels) &&
        Objects.equals(this.additionalTags, v1CoxEdgeMachinePoolConfig.additionalTags) &&
        Objects.equals(this.deployments, v1CoxEdgeMachinePoolConfig.deployments) &&
        Objects.equals(this.infraProfileRef, v1CoxEdgeMachinePoolConfig.infraProfileRef) &&
        Objects.equals(this.infraProfileTemplate, v1CoxEdgeMachinePoolConfig.infraProfileTemplate) &&
        Objects.equals(this.instanceConfig, v1CoxEdgeMachinePoolConfig.instanceConfig) &&
        Objects.equals(this.isControlPlane, v1CoxEdgeMachinePoolConfig.isControlPlane) &&
        Objects.equals(this.labels, v1CoxEdgeMachinePoolConfig.labels) &&
        Objects.equals(this.maxSize, v1CoxEdgeMachinePoolConfig.maxSize) &&
        Objects.equals(this.minSize, v1CoxEdgeMachinePoolConfig.minSize) &&
        Objects.equals(this.name, v1CoxEdgeMachinePoolConfig.name) &&
        Objects.equals(this.persistentStorages, v1CoxEdgeMachinePoolConfig.persistentStorages) &&
        Objects.equals(this.securityGroupRules, v1CoxEdgeMachinePoolConfig.securityGroupRules) &&
        Objects.equals(this.size, v1CoxEdgeMachinePoolConfig.size) &&
        Objects.equals(this.spec, v1CoxEdgeMachinePoolConfig.spec) &&
        Objects.equals(this.taints, v1CoxEdgeMachinePoolConfig.taints) &&
        Objects.equals(this.updateStrategy, v1CoxEdgeMachinePoolConfig.updateStrategy) &&
        Objects.equals(this.useControlPlaneAsWorker, v1CoxEdgeMachinePoolConfig.useControlPlaneAsWorker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalLabels, additionalTags, deployments, infraProfileRef, infraProfileTemplate, instanceConfig, isControlPlane, labels, maxSize, minSize, name, persistentStorages, securityGroupRules, size, spec, taints, updateStrategy, useControlPlaneAsWorker);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1CoxEdgeMachinePoolConfig {\n");
    
    sb.append("    additionalLabels: ").append(toIndentedString(additionalLabels)).append("\n");
    sb.append("    additionalTags: ").append(toIndentedString(additionalTags)).append("\n");
    sb.append("    deployments: ").append(toIndentedString(deployments)).append("\n");
    sb.append("    infraProfileRef: ").append(toIndentedString(infraProfileRef)).append("\n");
    sb.append("    infraProfileTemplate: ").append(toIndentedString(infraProfileTemplate)).append("\n");
    sb.append("    instanceConfig: ").append(toIndentedString(instanceConfig)).append("\n");
    sb.append("    isControlPlane: ").append(toIndentedString(isControlPlane)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    minSize: ").append(toIndentedString(minSize)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    persistentStorages: ").append(toIndentedString(persistentStorages)).append("\n");
    sb.append("    securityGroupRules: ").append(toIndentedString(securityGroupRules)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("    taints: ").append(toIndentedString(taints)).append("\n");
    sb.append("    updateStrategy: ").append(toIndentedString(updateStrategy)).append("\n");
    sb.append("    useControlPlaneAsWorker: ").append(toIndentedString(useControlPlaneAsWorker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
