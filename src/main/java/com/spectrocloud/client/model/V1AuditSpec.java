/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1AuditActor;
import com.spectrocloud.client.model.V1AuditResourceReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Audit specifications
 */
@Schema(description = "Audit specifications")


public class V1AuditSpec {
  @SerializedName("actionMsg")
  private String actionMsg = null;

  /**
   * Gets or Sets actionType
   */
  @JsonAdapter(ActionTypeEnum.Adapter.class)
  public enum ActionTypeEnum {
    CREATE("create"),
    UPDATE("update"),
    DELETE("delete"),
    PUBLISH("publish"),
    DEPLOY("deploy");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ActionTypeEnum fromValue(String input) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ActionTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("actionType")
  private ActionTypeEnum actionType = null;

  @SerializedName("actor")
  private V1AuditActor actor = null;

  @SerializedName("contentMsg")
  private String contentMsg = null;

  @SerializedName("resource")
  private V1AuditResourceReference resource = null;

  @SerializedName("userMsg")
  private String userMsg = null;

  public V1AuditSpec actionMsg(String actionMsg) {
    this.actionMsg = actionMsg;
    return this;
  }

   /**
   * Audit action message
   * @return actionMsg
  **/
  @Schema(description = "Audit action message")
  public String getActionMsg() {
    return actionMsg;
  }

  public void setActionMsg(String actionMsg) {
    this.actionMsg = actionMsg;
  }

  public V1AuditSpec actionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

   /**
   * Get actionType
   * @return actionType
  **/
  @Schema(description = "")
  public ActionTypeEnum getActionType() {
    return actionType;
  }

  public void setActionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
  }

  public V1AuditSpec actor(V1AuditActor actor) {
    this.actor = actor;
    return this;
  }

   /**
   * Get actor
   * @return actor
  **/
  @Schema(description = "")
  public V1AuditActor getActor() {
    return actor;
  }

  public void setActor(V1AuditActor actor) {
    this.actor = actor;
  }

  public V1AuditSpec contentMsg(String contentMsg) {
    this.contentMsg = contentMsg;
    return this;
  }

   /**
   * Audit content message
   * @return contentMsg
  **/
  @Schema(description = "Audit content message")
  public String getContentMsg() {
    return contentMsg;
  }

  public void setContentMsg(String contentMsg) {
    this.contentMsg = contentMsg;
  }

  public V1AuditSpec resource(V1AuditResourceReference resource) {
    this.resource = resource;
    return this;
  }

   /**
   * Get resource
   * @return resource
  **/
  @Schema(description = "")
  public V1AuditResourceReference getResource() {
    return resource;
  }

  public void setResource(V1AuditResourceReference resource) {
    this.resource = resource;
  }

  public V1AuditSpec userMsg(String userMsg) {
    this.userMsg = userMsg;
    return this;
  }

   /**
   * Audit user message
   * @return userMsg
  **/
  @Schema(description = "Audit user message")
  public String getUserMsg() {
    return userMsg;
  }

  public void setUserMsg(String userMsg) {
    this.userMsg = userMsg;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AuditSpec v1AuditSpec = (V1AuditSpec) o;
    return Objects.equals(this.actionMsg, v1AuditSpec.actionMsg) &&
        Objects.equals(this.actionType, v1AuditSpec.actionType) &&
        Objects.equals(this.actor, v1AuditSpec.actor) &&
        Objects.equals(this.contentMsg, v1AuditSpec.contentMsg) &&
        Objects.equals(this.resource, v1AuditSpec.resource) &&
        Objects.equals(this.userMsg, v1AuditSpec.userMsg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionMsg, actionType, actor, contentMsg, resource, userMsg);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AuditSpec {\n");
    
    sb.append("    actionMsg: ").append(toIndentedString(actionMsg)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    contentMsg: ").append(toIndentedString(contentMsg)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    userMsg: ").append(toIndentedString(userMsg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
