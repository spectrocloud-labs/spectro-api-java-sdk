/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmCoreResourceRequirements;
import com.spectrocloud.client.model.V1VmLabelSelector;
import com.spectrocloud.client.model.V1VmTypedLocalObjectReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * StorageSpec defines the Storage type specification
 */
@Schema(description = "StorageSpec defines the Storage type specification")


public class V1VmStorageSpec {
  @SerializedName("accessModes")
  private List<String> accessModes = null;

  @SerializedName("dataSource")
  private V1VmTypedLocalObjectReference dataSource = null;

  @SerializedName("resources")
  private V1VmCoreResourceRequirements resources = null;

  @SerializedName("selector")
  private V1VmLabelSelector selector = null;

  @SerializedName("storageClassName")
  private String storageClassName = null;

  @SerializedName("volumeMode")
  private String volumeMode = null;

  @SerializedName("volumeName")
  private String volumeName = null;

  public V1VmStorageSpec accessModes(List<String> accessModes) {
    this.accessModes = accessModes;
    return this;
  }

  public V1VmStorageSpec addAccessModesItem(String accessModesItem) {
    if (this.accessModes == null) {
      this.accessModes = new ArrayList<String>();
    }
    this.accessModes.add(accessModesItem);
    return this;
  }

   /**
   * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
   * @return accessModes
  **/
  @Schema(description = "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1")
  public List<String> getAccessModes() {
    return accessModes;
  }

  public void setAccessModes(List<String> accessModes) {
    this.accessModes = accessModes;
  }

  public V1VmStorageSpec dataSource(V1VmTypedLocalObjectReference dataSource) {
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Get dataSource
   * @return dataSource
  **/
  @Schema(description = "")
  public V1VmTypedLocalObjectReference getDataSource() {
    return dataSource;
  }

  public void setDataSource(V1VmTypedLocalObjectReference dataSource) {
    this.dataSource = dataSource;
  }

  public V1VmStorageSpec resources(V1VmCoreResourceRequirements resources) {
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @Schema(description = "")
  public V1VmCoreResourceRequirements getResources() {
    return resources;
  }

  public void setResources(V1VmCoreResourceRequirements resources) {
    this.resources = resources;
  }

  public V1VmStorageSpec selector(V1VmLabelSelector selector) {
    this.selector = selector;
    return this;
  }

   /**
   * Get selector
   * @return selector
  **/
  @Schema(description = "")
  public V1VmLabelSelector getSelector() {
    return selector;
  }

  public void setSelector(V1VmLabelSelector selector) {
    this.selector = selector;
  }

  public V1VmStorageSpec storageClassName(String storageClassName) {
    this.storageClassName = storageClassName;
    return this;
  }

   /**
   * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
   * @return storageClassName
  **/
  @Schema(description = "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1")
  public String getStorageClassName() {
    return storageClassName;
  }

  public void setStorageClassName(String storageClassName) {
    this.storageClassName = storageClassName;
  }

  public V1VmStorageSpec volumeMode(String volumeMode) {
    this.volumeMode = volumeMode;
    return this;
  }

   /**
   * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
   * @return volumeMode
  **/
  @Schema(description = "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.")
  public String getVolumeMode() {
    return volumeMode;
  }

  public void setVolumeMode(String volumeMode) {
    this.volumeMode = volumeMode;
  }

  public V1VmStorageSpec volumeName(String volumeName) {
    this.volumeName = volumeName;
    return this;
  }

   /**
   * VolumeName is the binding reference to the PersistentVolume backing this claim.
   * @return volumeName
  **/
  @Schema(description = "VolumeName is the binding reference to the PersistentVolume backing this claim.")
  public String getVolumeName() {
    return volumeName;
  }

  public void setVolumeName(String volumeName) {
    this.volumeName = volumeName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmStorageSpec v1VmStorageSpec = (V1VmStorageSpec) o;
    return Objects.equals(this.accessModes, v1VmStorageSpec.accessModes) &&
        Objects.equals(this.dataSource, v1VmStorageSpec.dataSource) &&
        Objects.equals(this.resources, v1VmStorageSpec.resources) &&
        Objects.equals(this.selector, v1VmStorageSpec.selector) &&
        Objects.equals(this.storageClassName, v1VmStorageSpec.storageClassName) &&
        Objects.equals(this.volumeMode, v1VmStorageSpec.volumeMode) &&
        Objects.equals(this.volumeName, v1VmStorageSpec.volumeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessModes, dataSource, resources, selector, storageClassName, volumeMode, volumeName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmStorageSpec {\n");
    
    sb.append("    accessModes: ").append(toIndentedString(accessModes)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    storageClassName: ").append(toIndentedString(storageClassName)).append("\n");
    sb.append("    volumeMode: ").append(toIndentedString(volumeMode)).append("\n");
    sb.append("    volumeName: ").append(toIndentedString(volumeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
