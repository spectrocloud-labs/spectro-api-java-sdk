/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1ClusterCondition;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * CoxEdgeCloudConfigStatus defines the observed state of CoxEdgeCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool
 */
@Schema(description = "CoxEdgeCloudConfigStatus defines the observed state of CoxEdgeCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool")


public class V1CoxEdgeCloudConfigStatus {
  @SerializedName("conditions")
  private List<V1ClusterCondition> conditions = null;

  @SerializedName("imageID")
  private String imageID = null;

  public V1CoxEdgeCloudConfigStatus conditions(List<V1ClusterCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public V1CoxEdgeCloudConfigStatus addConditionsItem(V1ClusterCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<V1ClusterCondition>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool &#x60;json:\&quot;spectroAnsiblePacker,omitempty\&quot;&#x60;
   * @return conditions
  **/
  @Schema(description = "spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool `json:\"spectroAnsiblePacker,omitempty\"`")
  public List<V1ClusterCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<V1ClusterCondition> conditions) {
    this.conditions = conditions;
  }

  public V1CoxEdgeCloudConfigStatus imageID(String imageID) {
    this.imageID = imageID;
    return this;
  }

   /**
   * For mold controller to identify if is there any changes in Pack
   * @return imageID
  **/
  @Schema(description = "For mold controller to identify if is there any changes in Pack")
  public String getImageID() {
    return imageID;
  }

  public void setImageID(String imageID) {
    this.imageID = imageID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1CoxEdgeCloudConfigStatus v1CoxEdgeCloudConfigStatus = (V1CoxEdgeCloudConfigStatus) o;
    return Objects.equals(this.conditions, v1CoxEdgeCloudConfigStatus.conditions) &&
        Objects.equals(this.imageID, v1CoxEdgeCloudConfigStatus.imageID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, imageID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1CoxEdgeCloudConfigStatus {\n");
    
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    imageID: ").append(toIndentedString(imageID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
