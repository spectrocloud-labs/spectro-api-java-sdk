/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1Taint;
import com.spectrocloud.client.model.V1UpdateStrategy;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Machine pool configuration for the cluster
 */
@Schema(description = "Machine pool configuration for the cluster")


public class V1MachinePoolConfigEntity {
  @SerializedName("additionalLabels")
  private Map<String, String> additionalLabels = null;

  @SerializedName("additionalTags")
  private Map<String, String> additionalTags = null;

  @SerializedName("isControlPlane")
  private Boolean isControlPlane = null;

  @SerializedName("labels")
  private List<String> labels = new ArrayList<String>();

  @SerializedName("maxSize")
  private Integer maxSize = null;

  @SerializedName("minSize")
  private Integer minSize = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("size")
  private Integer size = null;

  @SerializedName("taints")
  private List<V1Taint> taints = null;

  @SerializedName("updateStrategy")
  private V1UpdateStrategy updateStrategy = null;

  @SerializedName("useControlPlaneAsWorker")
  private Boolean useControlPlaneAsWorker = null;

  public V1MachinePoolConfigEntity additionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
    return this;
  }

  public V1MachinePoolConfigEntity putAdditionalLabelsItem(String key, String additionalLabelsItem) {
    if (this.additionalLabels == null) {
      this.additionalLabels = new HashMap<String, String>();
    }
    this.additionalLabels.put(key, additionalLabelsItem);
    return this;
  }

   /**
   * Additional labels to be part of the machine pool
   * @return additionalLabels
  **/
  @Schema(description = "Additional labels to be part of the machine pool")
  public Map<String, String> getAdditionalLabels() {
    return additionalLabels;
  }

  public void setAdditionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
  }

  public V1MachinePoolConfigEntity additionalTags(Map<String, String> additionalTags) {
    this.additionalTags = additionalTags;
    return this;
  }

  public V1MachinePoolConfigEntity putAdditionalTagsItem(String key, String additionalTagsItem) {
    if (this.additionalTags == null) {
      this.additionalTags = new HashMap<String, String>();
    }
    this.additionalTags.put(key, additionalTagsItem);
    return this;
  }

   /**
   * AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole
   * @return additionalTags
  **/
  @Schema(description = "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole")
  public Map<String, String> getAdditionalTags() {
    return additionalTags;
  }

  public void setAdditionalTags(Map<String, String> additionalTags) {
    this.additionalTags = additionalTags;
  }

  public V1MachinePoolConfigEntity isControlPlane(Boolean isControlPlane) {
    this.isControlPlane = isControlPlane;
    return this;
  }

   /**
   * Whether this pool is for control plane
   * @return isControlPlane
  **/
  @Schema(description = "Whether this pool is for control plane")
  public Boolean isIsControlPlane() {
    return isControlPlane;
  }

  public void setIsControlPlane(Boolean isControlPlane) {
    this.isControlPlane = isControlPlane;
  }

  public V1MachinePoolConfigEntity labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public V1MachinePoolConfigEntity addLabelsItem(String labelsItem) {
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Labels for this machine pool, example: master/worker, gpu, windows
   * @return labels
  **/
  @Schema(required = true, description = "Labels for this machine pool, example: master/worker, gpu, windows")
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }

  public V1MachinePoolConfigEntity maxSize(Integer maxSize) {
    this.maxSize = maxSize;
    return this;
  }

   /**
   * Max size of the pool, for scaling
   * @return maxSize
  **/
  @Schema(description = "Max size of the pool, for scaling")
  public Integer getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(Integer maxSize) {
    this.maxSize = maxSize;
  }

  public V1MachinePoolConfigEntity minSize(Integer minSize) {
    this.minSize = minSize;
    return this;
  }

   /**
   * Min size of the pool, for scaling
   * @return minSize
  **/
  @Schema(description = "Min size of the pool, for scaling")
  public Integer getMinSize() {
    return minSize;
  }

  public void setMinSize(Integer minSize) {
    this.minSize = minSize;
  }

  public V1MachinePoolConfigEntity name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1MachinePoolConfigEntity size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Size of the pool, number of nodes/machines
   * @return size
  **/
  @Schema(required = true, description = "Size of the pool, number of nodes/machines")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public V1MachinePoolConfigEntity taints(List<V1Taint> taints) {
    this.taints = taints;
    return this;
  }

  public V1MachinePoolConfigEntity addTaintsItem(V1Taint taintsItem) {
    if (this.taints == null) {
      this.taints = new ArrayList<V1Taint>();
    }
    this.taints.add(taintsItem);
    return this;
  }

   /**
   * Master or worker taints
   * @return taints
  **/
  @Schema(description = "Master or worker taints")
  public List<V1Taint> getTaints() {
    return taints;
  }

  public void setTaints(List<V1Taint> taints) {
    this.taints = taints;
  }

  public V1MachinePoolConfigEntity updateStrategy(V1UpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
    return this;
  }

   /**
   * Get updateStrategy
   * @return updateStrategy
  **/
  @Schema(description = "")
  public V1UpdateStrategy getUpdateStrategy() {
    return updateStrategy;
  }

  public void setUpdateStrategy(V1UpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
  }

  public V1MachinePoolConfigEntity useControlPlaneAsWorker(Boolean useControlPlaneAsWorker) {
    this.useControlPlaneAsWorker = useControlPlaneAsWorker;
    return this;
  }

   /**
   * If IsControlPlane&#x3D;&#x3D;true &amp;&amp; useControlPlaneAsWorker&#x3D;&#x3D;true, then will remove master taint this will not be used for worker pools
   * @return useControlPlaneAsWorker
  **/
  @Schema(description = "If IsControlPlane==true && useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools")
  public Boolean isUseControlPlaneAsWorker() {
    return useControlPlaneAsWorker;
  }

  public void setUseControlPlaneAsWorker(Boolean useControlPlaneAsWorker) {
    this.useControlPlaneAsWorker = useControlPlaneAsWorker;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1MachinePoolConfigEntity v1MachinePoolConfigEntity = (V1MachinePoolConfigEntity) o;
    return Objects.equals(this.additionalLabels, v1MachinePoolConfigEntity.additionalLabels) &&
        Objects.equals(this.additionalTags, v1MachinePoolConfigEntity.additionalTags) &&
        Objects.equals(this.isControlPlane, v1MachinePoolConfigEntity.isControlPlane) &&
        Objects.equals(this.labels, v1MachinePoolConfigEntity.labels) &&
        Objects.equals(this.maxSize, v1MachinePoolConfigEntity.maxSize) &&
        Objects.equals(this.minSize, v1MachinePoolConfigEntity.minSize) &&
        Objects.equals(this.name, v1MachinePoolConfigEntity.name) &&
        Objects.equals(this.size, v1MachinePoolConfigEntity.size) &&
        Objects.equals(this.taints, v1MachinePoolConfigEntity.taints) &&
        Objects.equals(this.updateStrategy, v1MachinePoolConfigEntity.updateStrategy) &&
        Objects.equals(this.useControlPlaneAsWorker, v1MachinePoolConfigEntity.useControlPlaneAsWorker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalLabels, additionalTags, isControlPlane, labels, maxSize, minSize, name, size, taints, updateStrategy, useControlPlaneAsWorker);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1MachinePoolConfigEntity {\n");
    
    sb.append("    additionalLabels: ").append(toIndentedString(additionalLabels)).append("\n");
    sb.append("    additionalTags: ").append(toIndentedString(additionalTags)).append("\n");
    sb.append("    isControlPlane: ").append(toIndentedString(isControlPlane)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    minSize: ").append(toIndentedString(minSize)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    taints: ").append(toIndentedString(taints)).append("\n");
    sb.append("    updateStrategy: ").append(toIndentedString(updateStrategy)).append("\n");
    sb.append("    useControlPlaneAsWorker: ").append(toIndentedString(useControlPlaneAsWorker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
