/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Describes the request for resource&#x27;s nats credential
 */
@Schema(description = "Describes the request for resource's nats credential")


public class V1NatsCredentialRequest {
  @SerializedName("clusterUid")
  private String clusterUid = null;

  @SerializedName("isSystem")
  private Boolean isSystem = null;

  @SerializedName("resourceUid")
  private String resourceUid = null;

  /**
   * Describes the service for which credentials has to be fetched. Possible values [ally, jet]
   */
  @JsonAdapter(ServiceNameEnum.Adapter.class)
  public enum ServiceNameEnum {
    ALLY("ally"),
    JET("jet");

    private String value;

    ServiceNameEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ServiceNameEnum fromValue(String input) {
      for (ServiceNameEnum b : ServiceNameEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ServiceNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceNameEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ServiceNameEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ServiceNameEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("serviceName")
  private ServiceNameEnum serviceName = null;

  @SerializedName("tenantUid")
  private String tenantUid = null;

  public V1NatsCredentialRequest clusterUid(String clusterUid) {
    this.clusterUid = clusterUid;
    return this;
  }

   /**
   * Deprecated. please use resourceUid
   * @return clusterUid
  **/
  @Schema(description = "Deprecated. please use resourceUid")
  public String getClusterUid() {
    return clusterUid;
  }

  public void setClusterUid(String clusterUid) {
    this.clusterUid = clusterUid;
  }

  public V1NatsCredentialRequest isSystem(Boolean isSystem) {
    this.isSystem = isSystem;
    return this;
  }

   /**
   * Describes if its a system request
   * @return isSystem
  **/
  @Schema(description = "Describes if its a system request")
  public Boolean isIsSystem() {
    return isSystem;
  }

  public void setIsSystem(Boolean isSystem) {
    this.isSystem = isSystem;
  }

  public V1NatsCredentialRequest resourceUid(String resourceUid) {
    this.resourceUid = resourceUid;
    return this;
  }

   /**
   * Describes the resource for which credentials has to be fetched
   * @return resourceUid
  **/
  @Schema(description = "Describes the resource for which credentials has to be fetched")
  public String getResourceUid() {
    return resourceUid;
  }

  public void setResourceUid(String resourceUid) {
    this.resourceUid = resourceUid;
  }

  public V1NatsCredentialRequest serviceName(ServiceNameEnum serviceName) {
    this.serviceName = serviceName;
    return this;
  }

   /**
   * Describes the service for which credentials has to be fetched. Possible values [ally, jet]
   * @return serviceName
  **/
  @Schema(description = "Describes the service for which credentials has to be fetched. Possible values [ally, jet]")
  public ServiceNameEnum getServiceName() {
    return serviceName;
  }

  public void setServiceName(ServiceNameEnum serviceName) {
    this.serviceName = serviceName;
  }

  public V1NatsCredentialRequest tenantUid(String tenantUid) {
    this.tenantUid = tenantUid;
    return this;
  }

   /**
   * Describes the tenant of the resource
   * @return tenantUid
  **/
  @Schema(description = "Describes the tenant of the resource")
  public String getTenantUid() {
    return tenantUid;
  }

  public void setTenantUid(String tenantUid) {
    this.tenantUid = tenantUid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1NatsCredentialRequest v1NatsCredentialRequest = (V1NatsCredentialRequest) o;
    return Objects.equals(this.clusterUid, v1NatsCredentialRequest.clusterUid) &&
        Objects.equals(this.isSystem, v1NatsCredentialRequest.isSystem) &&
        Objects.equals(this.resourceUid, v1NatsCredentialRequest.resourceUid) &&
        Objects.equals(this.serviceName, v1NatsCredentialRequest.serviceName) &&
        Objects.equals(this.tenantUid, v1NatsCredentialRequest.tenantUid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterUid, isSystem, resourceUid, serviceName, tenantUid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1NatsCredentialRequest {\n");
    
    sb.append("    clusterUid: ").append(toIndentedString(clusterUid)).append("\n");
    sb.append("    isSystem: ").append(toIndentedString(isSystem)).append("\n");
    sb.append("    resourceUid: ").append(toIndentedString(resourceUid)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    tenantUid: ").append(toIndentedString(tenantUid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
