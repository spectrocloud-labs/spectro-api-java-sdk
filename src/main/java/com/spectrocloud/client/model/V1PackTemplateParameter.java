/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1PackTemplateParameterOption;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Pack template parameter
 */
@Schema(description = "Pack template parameter")


public class V1PackTemplateParameter {
  @SerializedName("description")
  private String description = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("format")
  private String format = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("listOptions")
  private List<String> listOptions = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("optional")
  private Boolean optional = null;

  @SerializedName("options")
  private Map<String, V1PackTemplateParameterOption> options = null;

  @SerializedName("readOnly")
  private Boolean readOnly = null;

  @SerializedName("regex")
  private String regex = null;

  @SerializedName("targetKey")
  private String targetKey = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("value")
  private String value = null;

  public V1PackTemplateParameter description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Pack template parameter description
   * @return description
  **/
  @Schema(description = "Pack template parameter description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public V1PackTemplateParameter displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Pack template parameter display name
   * @return displayName
  **/
  @Schema(description = "Pack template parameter display name")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public V1PackTemplateParameter format(String format) {
    this.format = format;
    return this;
  }

   /**
   * Pack template parameter format
   * @return format
  **/
  @Schema(description = "Pack template parameter format")
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public V1PackTemplateParameter hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Pack template parameter hidden flag, if true then the parameter is hidden in the UI
   * @return hidden
  **/
  @Schema(description = "Pack template parameter hidden flag, if true then the parameter is hidden in the UI")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public V1PackTemplateParameter listOptions(List<String> listOptions) {
    this.listOptions = listOptions;
    return this;
  }

  public V1PackTemplateParameter addListOptionsItem(String listOptionsItem) {
    if (this.listOptions == null) {
      this.listOptions = new ArrayList<String>();
    }
    this.listOptions.add(listOptionsItem);
    return this;
  }

   /**
   * Pack template parameter list options as string array
   * @return listOptions
  **/
  @Schema(description = "Pack template parameter list options as string array")
  public List<String> getListOptions() {
    return listOptions;
  }

  public void setListOptions(List<String> listOptions) {
    this.listOptions = listOptions;
  }

  public V1PackTemplateParameter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Pack template parameter name
   * @return name
  **/
  @Schema(description = "Pack template parameter name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1PackTemplateParameter optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

   /**
   * Pack template parameter optional flag, if true then the parameter value is not mandatory
   * @return optional
  **/
  @Schema(description = "Pack template parameter optional flag, if true then the parameter value is not mandatory")
  public Boolean isOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }

  public V1PackTemplateParameter options(Map<String, V1PackTemplateParameterOption> options) {
    this.options = options;
    return this;
  }

  public V1PackTemplateParameter putOptionsItem(String key, V1PackTemplateParameterOption optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<String, V1PackTemplateParameterOption>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * Pack template parameter options array
   * @return options
  **/
  @Schema(description = "Pack template parameter options array")
  public Map<String, V1PackTemplateParameterOption> getOptions() {
    return options;
  }

  public void setOptions(Map<String, V1PackTemplateParameterOption> options) {
    this.options = options;
  }

  public V1PackTemplateParameter readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Pack template parameter readonly flag, if true then the parameter value can&#x27;t be overridden
   * @return readOnly
  **/
  @Schema(description = "Pack template parameter readonly flag, if true then the parameter value can't be overridden")
  public Boolean isReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }

  public V1PackTemplateParameter regex(String regex) {
    this.regex = regex;
    return this;
  }

   /**
   * Pack template parameter regex, if set then parameter value must match with specified regex
   * @return regex
  **/
  @Schema(description = "Pack template parameter regex, if set then parameter value must match with specified regex")
  public String getRegex() {
    return regex;
  }

  public void setRegex(String regex) {
    this.regex = regex;
  }

  public V1PackTemplateParameter targetKey(String targetKey) {
    this.targetKey = targetKey;
    return this;
  }

   /**
   * Pack template parameter target key which is mapped to the key defined in the pack values
   * @return targetKey
  **/
  @Schema(description = "Pack template parameter target key which is mapped to the key defined in the pack values")
  public String getTargetKey() {
    return targetKey;
  }

  public void setTargetKey(String targetKey) {
    this.targetKey = targetKey;
  }

  public V1PackTemplateParameter type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Pack template parameter data type
   * @return type
  **/
  @Schema(description = "Pack template parameter data type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public V1PackTemplateParameter value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Pack template parameter value
   * @return value
  **/
  @Schema(description = "Pack template parameter value")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PackTemplateParameter v1PackTemplateParameter = (V1PackTemplateParameter) o;
    return Objects.equals(this.description, v1PackTemplateParameter.description) &&
        Objects.equals(this.displayName, v1PackTemplateParameter.displayName) &&
        Objects.equals(this.format, v1PackTemplateParameter.format) &&
        Objects.equals(this.hidden, v1PackTemplateParameter.hidden) &&
        Objects.equals(this.listOptions, v1PackTemplateParameter.listOptions) &&
        Objects.equals(this.name, v1PackTemplateParameter.name) &&
        Objects.equals(this.optional, v1PackTemplateParameter.optional) &&
        Objects.equals(this.options, v1PackTemplateParameter.options) &&
        Objects.equals(this.readOnly, v1PackTemplateParameter.readOnly) &&
        Objects.equals(this.regex, v1PackTemplateParameter.regex) &&
        Objects.equals(this.targetKey, v1PackTemplateParameter.targetKey) &&
        Objects.equals(this.type, v1PackTemplateParameter.type) &&
        Objects.equals(this.value, v1PackTemplateParameter.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, format, hidden, listOptions, name, optional, options, readOnly, regex, targetKey, type, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PackTemplateParameter {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    listOptions: ").append(toIndentedString(listOptions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("    targetKey: ").append(toIndentedString(targetKey)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
