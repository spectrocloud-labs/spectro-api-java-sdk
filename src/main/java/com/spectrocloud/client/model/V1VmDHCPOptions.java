/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmDHCPPrivateOptions;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Extra DHCP options to use in the interface.
 */
@Schema(description = "Extra DHCP options to use in the interface.")


public class V1VmDHCPOptions {
  @SerializedName("bootFileName")
  private String bootFileName = null;

  @SerializedName("ntpServers")
  private List<String> ntpServers = null;

  @SerializedName("privateOptions")
  private List<V1VmDHCPPrivateOptions> privateOptions = null;

  @SerializedName("tftpServerName")
  private String tftpServerName = null;

  public V1VmDHCPOptions bootFileName(String bootFileName) {
    this.bootFileName = bootFileName;
    return this;
  }

   /**
   * If specified will pass option 67 to interface&#x27;s DHCP server
   * @return bootFileName
  **/
  @Schema(description = "If specified will pass option 67 to interface's DHCP server")
  public String getBootFileName() {
    return bootFileName;
  }

  public void setBootFileName(String bootFileName) {
    this.bootFileName = bootFileName;
  }

  public V1VmDHCPOptions ntpServers(List<String> ntpServers) {
    this.ntpServers = ntpServers;
    return this;
  }

  public V1VmDHCPOptions addNtpServersItem(String ntpServersItem) {
    if (this.ntpServers == null) {
      this.ntpServers = new ArrayList<String>();
    }
    this.ntpServers.add(ntpServersItem);
    return this;
  }

   /**
   * If specified will pass the configured NTP server to the VM via DHCP option 042.
   * @return ntpServers
  **/
  @Schema(description = "If specified will pass the configured NTP server to the VM via DHCP option 042.")
  public List<String> getNtpServers() {
    return ntpServers;
  }

  public void setNtpServers(List<String> ntpServers) {
    this.ntpServers = ntpServers;
  }

  public V1VmDHCPOptions privateOptions(List<V1VmDHCPPrivateOptions> privateOptions) {
    this.privateOptions = privateOptions;
    return this;
  }

  public V1VmDHCPOptions addPrivateOptionsItem(V1VmDHCPPrivateOptions privateOptionsItem) {
    if (this.privateOptions == null) {
      this.privateOptions = new ArrayList<V1VmDHCPPrivateOptions>();
    }
    this.privateOptions.add(privateOptionsItem);
    return this;
  }

   /**
   * If specified will pass extra DHCP options for private use, range: 224-254
   * @return privateOptions
  **/
  @Schema(description = "If specified will pass extra DHCP options for private use, range: 224-254")
  public List<V1VmDHCPPrivateOptions> getPrivateOptions() {
    return privateOptions;
  }

  public void setPrivateOptions(List<V1VmDHCPPrivateOptions> privateOptions) {
    this.privateOptions = privateOptions;
  }

  public V1VmDHCPOptions tftpServerName(String tftpServerName) {
    this.tftpServerName = tftpServerName;
    return this;
  }

   /**
   * If specified will pass option 66 to interface&#x27;s DHCP server
   * @return tftpServerName
  **/
  @Schema(description = "If specified will pass option 66 to interface's DHCP server")
  public String getTftpServerName() {
    return tftpServerName;
  }

  public void setTftpServerName(String tftpServerName) {
    this.tftpServerName = tftpServerName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmDHCPOptions v1VmDHCPOptions = (V1VmDHCPOptions) o;
    return Objects.equals(this.bootFileName, v1VmDHCPOptions.bootFileName) &&
        Objects.equals(this.ntpServers, v1VmDHCPOptions.ntpServers) &&
        Objects.equals(this.privateOptions, v1VmDHCPOptions.privateOptions) &&
        Objects.equals(this.tftpServerName, v1VmDHCPOptions.tftpServerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootFileName, ntpServers, privateOptions, tftpServerName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmDHCPOptions {\n");
    
    sb.append("    bootFileName: ").append(toIndentedString(bootFileName)).append("\n");
    sb.append("    ntpServers: ").append(toIndentedString(ntpServers)).append("\n");
    sb.append("    privateOptions: ").append(toIndentedString(privateOptions)).append("\n");
    sb.append("    tftpServerName: ").append(toIndentedString(tftpServerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
