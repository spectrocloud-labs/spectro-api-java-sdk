/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1EdgeHostSSHSecret;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * V1LibvirtHostIdentity
 */



public class V1LibvirtHostIdentity {
  @SerializedName("caCert")
  private String caCert = null;

  @SerializedName("mode")
  private String mode = null;

  @SerializedName("socketPath")
  private String socketPath = null;

  @SerializedName("sshSecret")
  private V1EdgeHostSSHSecret sshSecret = null;

  public V1LibvirtHostIdentity caCert(String caCert) {
    this.caCert = caCert;
    return this;
  }

   /**
   * CACert is the client CA certificate
   * @return caCert
  **/
  @Schema(description = "CACert is the client CA certificate")
  public String getCaCert() {
    return caCert;
  }

  public void setCaCert(String caCert) {
    this.caCert = caCert;
  }

  public V1LibvirtHostIdentity mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Mode indicates a system or session connection to the host
   * @return mode
  **/
  @Schema(description = "Mode indicates a system or session connection to the host")
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public V1LibvirtHostIdentity socketPath(String socketPath) {
    this.socketPath = socketPath;
    return this;
  }

   /**
   * SocketPath is an optional path to the socket on the host, if not using defaults
   * @return socketPath
  **/
  @Schema(description = "SocketPath is an optional path to the socket on the host, if not using defaults")
  public String getSocketPath() {
    return socketPath;
  }

  public void setSocketPath(String socketPath) {
    this.socketPath = socketPath;
  }

  public V1LibvirtHostIdentity sshSecret(V1EdgeHostSSHSecret sshSecret) {
    this.sshSecret = sshSecret;
    return this;
  }

   /**
   * Get sshSecret
   * @return sshSecret
  **/
  @Schema(description = "")
  public V1EdgeHostSSHSecret getSshSecret() {
    return sshSecret;
  }

  public void setSshSecret(V1EdgeHostSSHSecret sshSecret) {
    this.sshSecret = sshSecret;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1LibvirtHostIdentity v1LibvirtHostIdentity = (V1LibvirtHostIdentity) o;
    return Objects.equals(this.caCert, v1LibvirtHostIdentity.caCert) &&
        Objects.equals(this.mode, v1LibvirtHostIdentity.mode) &&
        Objects.equals(this.socketPath, v1LibvirtHostIdentity.socketPath) &&
        Objects.equals(this.sshSecret, v1LibvirtHostIdentity.sshSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caCert, mode, socketPath, sshSecret);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1LibvirtHostIdentity {\n");
    
    sb.append("    caCert: ").append(toIndentedString(caCert)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    socketPath: ").append(toIndentedString(socketPath)).append("\n");
    sb.append("    sshSecret: ").append(toIndentedString(sshSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
