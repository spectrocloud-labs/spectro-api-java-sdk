/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1VmDataVolumeBlankImage;
import com.spectrocloud.client.model.V1VmDataVolumeSourceHttp;
import com.spectrocloud.client.model.V1VmDataVolumeSourceImageIO;
import com.spectrocloud.client.model.V1VmDataVolumeSourcePVC;
import com.spectrocloud.client.model.V1VmDataVolumeSourceRegistry;
import com.spectrocloud.client.model.V1VmDataVolumeSourceS3;
import com.spectrocloud.client.model.V1VmDataVolumeSourceUpload;
import com.spectrocloud.client.model.V1VmDataVolumeSourceVDDK;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DataVolumeSource represents the source for our Data Volume, this can be HTTP, Imageio, S3, Registry or an existing PVC
 */
@Schema(description = "DataVolumeSource represents the source for our Data Volume, this can be HTTP, Imageio, S3, Registry or an existing PVC")


public class V1VmDataVolumeSource {
  @SerializedName("blank")
  private V1VmDataVolumeBlankImage blank = null;

  @SerializedName("http")
  private V1VmDataVolumeSourceHttp http = null;

  @SerializedName("imageio")
  private V1VmDataVolumeSourceImageIO imageio = null;

  @SerializedName("pvc")
  private V1VmDataVolumeSourcePVC pvc = null;

  @SerializedName("registry")
  private V1VmDataVolumeSourceRegistry registry = null;

  @SerializedName("s3")
  private V1VmDataVolumeSourceS3 s3 = null;

  @SerializedName("upload")
  private V1VmDataVolumeSourceUpload upload = null;

  @SerializedName("vddk")
  private V1VmDataVolumeSourceVDDK vddk = null;

  public V1VmDataVolumeSource blank(V1VmDataVolumeBlankImage blank) {
    this.blank = blank;
    return this;
  }

   /**
   * Get blank
   * @return blank
  **/
  @Schema(description = "")
  public V1VmDataVolumeBlankImage getBlank() {
    return blank;
  }

  public void setBlank(V1VmDataVolumeBlankImage blank) {
    this.blank = blank;
  }

  public V1VmDataVolumeSource http(V1VmDataVolumeSourceHttp http) {
    this.http = http;
    return this;
  }

   /**
   * Get http
   * @return http
  **/
  @Schema(description = "")
  public V1VmDataVolumeSourceHttp getHttp() {
    return http;
  }

  public void setHttp(V1VmDataVolumeSourceHttp http) {
    this.http = http;
  }

  public V1VmDataVolumeSource imageio(V1VmDataVolumeSourceImageIO imageio) {
    this.imageio = imageio;
    return this;
  }

   /**
   * Get imageio
   * @return imageio
  **/
  @Schema(description = "")
  public V1VmDataVolumeSourceImageIO getImageio() {
    return imageio;
  }

  public void setImageio(V1VmDataVolumeSourceImageIO imageio) {
    this.imageio = imageio;
  }

  public V1VmDataVolumeSource pvc(V1VmDataVolumeSourcePVC pvc) {
    this.pvc = pvc;
    return this;
  }

   /**
   * Get pvc
   * @return pvc
  **/
  @Schema(description = "")
  public V1VmDataVolumeSourcePVC getPvc() {
    return pvc;
  }

  public void setPvc(V1VmDataVolumeSourcePVC pvc) {
    this.pvc = pvc;
  }

  public V1VmDataVolumeSource registry(V1VmDataVolumeSourceRegistry registry) {
    this.registry = registry;
    return this;
  }

   /**
   * Get registry
   * @return registry
  **/
  @Schema(description = "")
  public V1VmDataVolumeSourceRegistry getRegistry() {
    return registry;
  }

  public void setRegistry(V1VmDataVolumeSourceRegistry registry) {
    this.registry = registry;
  }

  public V1VmDataVolumeSource s3(V1VmDataVolumeSourceS3 s3) {
    this.s3 = s3;
    return this;
  }

   /**
   * Get s3
   * @return s3
  **/
  @Schema(description = "")
  public V1VmDataVolumeSourceS3 getS3() {
    return s3;
  }

  public void setS3(V1VmDataVolumeSourceS3 s3) {
    this.s3 = s3;
  }

  public V1VmDataVolumeSource upload(V1VmDataVolumeSourceUpload upload) {
    this.upload = upload;
    return this;
  }

   /**
   * Get upload
   * @return upload
  **/
  @Schema(description = "")
  public V1VmDataVolumeSourceUpload getUpload() {
    return upload;
  }

  public void setUpload(V1VmDataVolumeSourceUpload upload) {
    this.upload = upload;
  }

  public V1VmDataVolumeSource vddk(V1VmDataVolumeSourceVDDK vddk) {
    this.vddk = vddk;
    return this;
  }

   /**
   * Get vddk
   * @return vddk
  **/
  @Schema(description = "")
  public V1VmDataVolumeSourceVDDK getVddk() {
    return vddk;
  }

  public void setVddk(V1VmDataVolumeSourceVDDK vddk) {
    this.vddk = vddk;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmDataVolumeSource v1VmDataVolumeSource = (V1VmDataVolumeSource) o;
    return Objects.equals(this.blank, v1VmDataVolumeSource.blank) &&
        Objects.equals(this.http, v1VmDataVolumeSource.http) &&
        Objects.equals(this.imageio, v1VmDataVolumeSource.imageio) &&
        Objects.equals(this.pvc, v1VmDataVolumeSource.pvc) &&
        Objects.equals(this.registry, v1VmDataVolumeSource.registry) &&
        Objects.equals(this.s3, v1VmDataVolumeSource.s3) &&
        Objects.equals(this.upload, v1VmDataVolumeSource.upload) &&
        Objects.equals(this.vddk, v1VmDataVolumeSource.vddk);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blank, http, imageio, pvc, registry, s3, upload, vddk);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmDataVolumeSource {\n");
    
    sb.append("    blank: ").append(toIndentedString(blank)).append("\n");
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    imageio: ").append(toIndentedString(imageio)).append("\n");
    sb.append("    pvc: ").append(toIndentedString(pvc)).append("\n");
    sb.append("    registry: ").append(toIndentedString(registry)).append("\n");
    sb.append("    s3: ").append(toIndentedString(s3)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    vddk: ").append(toIndentedString(vddk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
