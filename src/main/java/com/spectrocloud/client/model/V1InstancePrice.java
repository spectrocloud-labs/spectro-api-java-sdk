/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Cloud instance price
 */
@Schema(description = "Cloud instance price")


public class V1InstancePrice {
  @SerializedName("onDemand")
  private Double onDemand = null;

  /**
   * Os associated with instance price. Allowed values - [linux, windows]
   */
  @JsonAdapter(OsEnum.Adapter.class)
  public enum OsEnum {
    LINUX("linux"),
    WINDOWS("windows");

    private String value;

    OsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OsEnum fromValue(String input) {
      for (OsEnum b : OsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("os")
  private OsEnum os = null;

  @SerializedName("spot")
  private Double spot = null;

  public V1InstancePrice onDemand(Double onDemand) {
    this.onDemand = onDemand;
    return this;
  }

   /**
   * OnDemand price of instance
   * @return onDemand
  **/
  @Schema(description = "OnDemand price of instance")
  public Double getOnDemand() {
    return onDemand;
  }

  public void setOnDemand(Double onDemand) {
    this.onDemand = onDemand;
  }

  public V1InstancePrice os(OsEnum os) {
    this.os = os;
    return this;
  }

   /**
   * Os associated with instance price. Allowed values - [linux, windows]
   * @return os
  **/
  @Schema(description = "Os associated with instance price. Allowed values - [linux, windows]")
  public OsEnum getOs() {
    return os;
  }

  public void setOs(OsEnum os) {
    this.os = os;
  }

  public V1InstancePrice spot(Double spot) {
    this.spot = spot;
    return this;
  }

   /**
   * Spot price of instance
   * @return spot
  **/
  @Schema(description = "Spot price of instance")
  public Double getSpot() {
    return spot;
  }

  public void setSpot(Double spot) {
    this.spot = spot;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1InstancePrice v1InstancePrice = (V1InstancePrice) o;
    return Objects.equals(this.onDemand, v1InstancePrice.onDemand) &&
        Objects.equals(this.os, v1InstancePrice.os) &&
        Objects.equals(this.spot, v1InstancePrice.spot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onDemand, os, spot);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1InstancePrice {\n");
    
    sb.append("    onDemand: ").append(toIndentedString(onDemand)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    spot: ").append(toIndentedString(spot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
