/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spectrocloud.client.model.V1MgmtErrSpecUserCtx;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * V1MgmtErrSpec
 */



public class V1MgmtErrSpec {
  @SerializedName("causes")
  private List<String> causes = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("debug")
  private Map<String, Object> debug = null;

  @SerializedName("errCode")
  private String errCode = null;

  @SerializedName("errMsg")
  private String errMsg = null;

  @SerializedName("stackTraces")
  private List<String> stackTraces = null;

  @SerializedName("userCtx")
  private V1MgmtErrSpecUserCtx userCtx = null;

  public V1MgmtErrSpec causes(List<String> causes) {
    this.causes = causes;
    return this;
  }

  public V1MgmtErrSpec addCausesItem(String causesItem) {
    if (this.causes == null) {
      this.causes = new ArrayList<String>();
    }
    this.causes.add(causesItem);
    return this;
  }

   /**
   * Get causes
   * @return causes
  **/
  @Schema(description = "")
  public List<String> getCauses() {
    return causes;
  }

  public void setCauses(List<String> causes) {
    this.causes = causes;
  }

  public V1MgmtErrSpec data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @Schema(description = "")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public V1MgmtErrSpec debug(Map<String, Object> debug) {
    this.debug = debug;
    return this;
  }

  public V1MgmtErrSpec putDebugItem(String key, Object debugItem) {
    if (this.debug == null) {
      this.debug = new HashMap<String, Object>();
    }
    this.debug.put(key, debugItem);
    return this;
  }

   /**
   * Get debug
   * @return debug
  **/
  @Schema(description = "")
  public Map<String, Object> getDebug() {
    return debug;
  }

  public void setDebug(Map<String, Object> debug) {
    this.debug = debug;
  }

  public V1MgmtErrSpec errCode(String errCode) {
    this.errCode = errCode;
    return this;
  }

   /**
   * Get errCode
   * @return errCode
  **/
  @Schema(description = "")
  public String getErrCode() {
    return errCode;
  }

  public void setErrCode(String errCode) {
    this.errCode = errCode;
  }

  public V1MgmtErrSpec errMsg(String errMsg) {
    this.errMsg = errMsg;
    return this;
  }

   /**
   * Get errMsg
   * @return errMsg
  **/
  @Schema(description = "")
  public String getErrMsg() {
    return errMsg;
  }

  public void setErrMsg(String errMsg) {
    this.errMsg = errMsg;
  }

  public V1MgmtErrSpec stackTraces(List<String> stackTraces) {
    this.stackTraces = stackTraces;
    return this;
  }

  public V1MgmtErrSpec addStackTracesItem(String stackTracesItem) {
    if (this.stackTraces == null) {
      this.stackTraces = new ArrayList<String>();
    }
    this.stackTraces.add(stackTracesItem);
    return this;
  }

   /**
   * Get stackTraces
   * @return stackTraces
  **/
  @Schema(description = "")
  public List<String> getStackTraces() {
    return stackTraces;
  }

  public void setStackTraces(List<String> stackTraces) {
    this.stackTraces = stackTraces;
  }

  public V1MgmtErrSpec userCtx(V1MgmtErrSpecUserCtx userCtx) {
    this.userCtx = userCtx;
    return this;
  }

   /**
   * Get userCtx
   * @return userCtx
  **/
  @Schema(description = "")
  public V1MgmtErrSpecUserCtx getUserCtx() {
    return userCtx;
  }

  public void setUserCtx(V1MgmtErrSpecUserCtx userCtx) {
    this.userCtx = userCtx;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1MgmtErrSpec v1MgmtErrSpec = (V1MgmtErrSpec) o;
    return Objects.equals(this.causes, v1MgmtErrSpec.causes) &&
        Objects.equals(this.data, v1MgmtErrSpec.data) &&
        Objects.equals(this.debug, v1MgmtErrSpec.debug) &&
        Objects.equals(this.errCode, v1MgmtErrSpec.errCode) &&
        Objects.equals(this.errMsg, v1MgmtErrSpec.errMsg) &&
        Objects.equals(this.stackTraces, v1MgmtErrSpec.stackTraces) &&
        Objects.equals(this.userCtx, v1MgmtErrSpec.userCtx);
  }

  @Override
  public int hashCode() {
    return Objects.hash(causes, data, debug, errCode, errMsg, stackTraces, userCtx);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1MgmtErrSpec {\n");
    
    sb.append("    causes: ").append(toIndentedString(causes)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    debug: ").append(toIndentedString(debug)).append("\n");
    sb.append("    errCode: ").append(toIndentedString(errCode)).append("\n");
    sb.append("    errMsg: ").append(toIndentedString(errMsg)).append("\n");
    sb.append("    stackTraces: ").append(toIndentedString(stackTraces)).append("\n");
    sb.append("    userCtx: ").append(toIndentedString(userCtx)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
