/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * V1VmCDRomTarget
 */



public class V1VmCDRomTarget {
  @SerializedName("bus")
  private String bus = null;

  @SerializedName("readonly")
  private Boolean readonly = null;

  @SerializedName("tray")
  private String tray = null;

  public V1VmCDRomTarget bus(String bus) {
    this.bus = bus;
    return this;
  }

   /**
   * Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.
   * @return bus
  **/
  @Schema(description = "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.")
  public String getBus() {
    return bus;
  }

  public void setBus(String bus) {
    this.bus = bus;
  }

  public V1VmCDRomTarget readonly(Boolean readonly) {
    this.readonly = readonly;
    return this;
  }

   /**
   * ReadOnly. Defaults to true.
   * @return readonly
  **/
  @Schema(description = "ReadOnly. Defaults to true.")
  public Boolean isReadonly() {
    return readonly;
  }

  public void setReadonly(Boolean readonly) {
    this.readonly = readonly;
  }

  public V1VmCDRomTarget tray(String tray) {
    this.tray = tray;
    return this;
  }

   /**
   * Tray indicates if the tray of the device is open or closed. Allowed values are \&quot;open\&quot; and \&quot;closed\&quot;. Defaults to closed.
   * @return tray
  **/
  @Schema(description = "Tray indicates if the tray of the device is open or closed. Allowed values are \"open\" and \"closed\". Defaults to closed.")
  public String getTray() {
    return tray;
  }

  public void setTray(String tray) {
    this.tray = tray;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmCDRomTarget v1VmCDRomTarget = (V1VmCDRomTarget) o;
    return Objects.equals(this.bus, v1VmCDRomTarget.bus) &&
        Objects.equals(this.readonly, v1VmCDRomTarget.readonly) &&
        Objects.equals(this.tray, v1VmCDRomTarget.tray);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bus, readonly, tray);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmCDRomTarget {\n");
    
    sb.append("    bus: ").append(toIndentedString(bus)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    tray: ").append(toIndentedString(tray)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
