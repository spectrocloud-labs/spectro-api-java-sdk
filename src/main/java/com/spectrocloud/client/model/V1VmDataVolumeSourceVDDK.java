/*
 * Palette APIs - 3.4
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spectrocloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source
 */
@Schema(description = "DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source")


public class V1VmDataVolumeSourceVDDK {
  @SerializedName("backingFile")
  private String backingFile = null;

  @SerializedName("initImageURL")
  private String initImageURL = null;

  @SerializedName("secretRef")
  private String secretRef = null;

  @SerializedName("thumbprint")
  private String thumbprint = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("uuid")
  private String uuid = null;

  public V1VmDataVolumeSourceVDDK backingFile(String backingFile) {
    this.backingFile = backingFile;
    return this;
  }

   /**
   * BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi
   * @return backingFile
  **/
  @Schema(description = "BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi")
  public String getBackingFile() {
    return backingFile;
  }

  public void setBackingFile(String backingFile) {
    this.backingFile = backingFile;
  }

  public V1VmDataVolumeSourceVDDK initImageURL(String initImageURL) {
    this.initImageURL = initImageURL;
    return this;
  }

   /**
   * InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map
   * @return initImageURL
  **/
  @Schema(description = "InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map")
  public String getInitImageURL() {
    return initImageURL;
  }

  public void setInitImageURL(String initImageURL) {
    this.initImageURL = initImageURL;
  }

  public V1VmDataVolumeSourceVDDK secretRef(String secretRef) {
    this.secretRef = secretRef;
    return this;
  }

   /**
   * SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host
   * @return secretRef
  **/
  @Schema(description = "SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host")
  public String getSecretRef() {
    return secretRef;
  }

  public void setSecretRef(String secretRef) {
    this.secretRef = secretRef;
  }

  public V1VmDataVolumeSourceVDDK thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

   /**
   * Thumbprint is the certificate thumbprint of the vCenter or ESXi host
   * @return thumbprint
  **/
  @Schema(description = "Thumbprint is the certificate thumbprint of the vCenter or ESXi host")
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }

  public V1VmDataVolumeSourceVDDK url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL is the URL of the vCenter or ESXi host with the VM to migrate
   * @return url
  **/
  @Schema(description = "URL is the URL of the vCenter or ESXi host with the VM to migrate")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public V1VmDataVolumeSourceVDDK uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi
   * @return uuid
  **/
  @Schema(description = "UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VmDataVolumeSourceVDDK v1VmDataVolumeSourceVDDK = (V1VmDataVolumeSourceVDDK) o;
    return Objects.equals(this.backingFile, v1VmDataVolumeSourceVDDK.backingFile) &&
        Objects.equals(this.initImageURL, v1VmDataVolumeSourceVDDK.initImageURL) &&
        Objects.equals(this.secretRef, v1VmDataVolumeSourceVDDK.secretRef) &&
        Objects.equals(this.thumbprint, v1VmDataVolumeSourceVDDK.thumbprint) &&
        Objects.equals(this.url, v1VmDataVolumeSourceVDDK.url) &&
        Objects.equals(this.uuid, v1VmDataVolumeSourceVDDK.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backingFile, initImageURL, secretRef, thumbprint, url, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VmDataVolumeSourceVDDK {\n");
    
    sb.append("    backingFile: ").append(toIndentedString(backingFile)).append("\n");
    sb.append("    initImageURL: ").append(toIndentedString(initImageURL)).append("\n");
    sb.append("    secretRef: ").append(toIndentedString(secretRef)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
